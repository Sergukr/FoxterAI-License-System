/**
 * FoxterAI_Server/database/create_fresh_db.js
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
 * –í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—è equity –∏ profit
 */

const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, '../licenses.db');
const backupPath = path.join(__dirname, '../licenses_backup.db');

console.log('üî® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö FoxterAI...\n');

// –î–µ–ª–∞–µ–º –±—ç–∫–∞–ø –µ—Å–ª–∏ –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (fs.existsSync(dbPath)) {
    console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ë–î');
    console.log(`üì¶ –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø: ${backupPath}`);
    
    try {
        fs.copyFileSync(dbPath, backupPath);
        console.log('‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω\n');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î
        fs.unlinkSync(dbPath);
        console.log('üóëÔ∏è  –°—Ç–∞—Ä–∞—è –ë–î —É–¥–∞–ª–µ–Ω–∞\n');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞:', err);
        process.exit(1);
    }
}

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ë–î
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ë–î:', err);
        process.exit(1);
    }
    console.log('‚úÖ –ù–æ–≤–∞—è –ë–î —Å–æ–∑–¥–∞–Ω–∞');
});

// SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
const createTables = [
    {
        name: 'licenses',
        sql: `
            CREATE TABLE licenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                license_key TEXT UNIQUE NOT NULL,
                
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
                client_name TEXT,
                client_contact TEXT,
                client_telegram TEXT,
                
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–±–æ—Ç–µ
                robot_name TEXT,
                robot_version TEXT,
                
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ
                account_number TEXT,
                account_owner TEXT,
                account_type TEXT DEFAULT 'Real',
                broker_name TEXT,
                
                -- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–ù–û–í–´–ï –ü–û–õ–Ø)
                last_balance REAL DEFAULT 0,
                last_equity REAL DEFAULT 0,
                last_profit REAL DEFAULT 0,
                
                -- –û—Ç–ø–µ—á–∞—Ç–æ–∫ –∏ –ø—Ä–∏–≤—è–∑–∫–∞
                fingerprint TEXT,
                fingerprint_hash TEXT,
                
                -- –î–∞—Ç—ã
                created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                activation_date DATETIME,
                expiry_date DATETIME,
                months INTEGER DEFAULT 1,
                
                -- –°—Ç–∞—Ç—É—Å—ã
                status TEXT DEFAULT 'created',
                
                -- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                last_ip TEXT,
                activation_ip TEXT,
                last_check DATETIME,
                terminal_version TEXT,
                os_info TEXT,
                
                -- –°—á–µ—Ç—á–∏–∫–∏
                check_count INTEGER DEFAULT 0,
                failed_checks INTEGER DEFAULT 0,
                heartbeat_count INTEGER DEFAULT 0,
                
                -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                notes TEXT
            )
        `
    },
    {
        name: 'checks',
        sql: `
            CREATE TABLE checks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                license_key TEXT,
                check_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                ip_address TEXT,
                account_number TEXT,
                broker_name TEXT,
                robot_name TEXT,
                robot_version TEXT,
                status TEXT,
                message TEXT,
                balance REAL,
                equity REAL,
                profit REAL
            )
        `
    },
    {
        name: 'events',
        sql: `
            CREATE TABLE events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                event_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                event_type TEXT,
                license_key TEXT,
                robot_name TEXT,
                client_name TEXT,
                description TEXT,
                priority TEXT DEFAULT 'normal',
                details TEXT,
                ip_address TEXT
            )
        `
    }
];

// –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const createIndexes = [
    'CREATE INDEX idx_licenses_status ON licenses(status)',
    'CREATE INDEX idx_licenses_robot ON licenses(robot_name)',
    'CREATE INDEX idx_licenses_account ON licenses(account_number)',
    'CREATE INDEX idx_checks_date ON checks(check_date)',
    'CREATE INDEX idx_checks_key ON checks(license_key)',
    'CREATE INDEX idx_events_date ON events(event_date)',
    'CREATE INDEX idx_events_type ON events(event_type)'
];

// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü:');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    for (const table of createTables) {
        db.run(table.sql, (err) => {
            if (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${table.name}:`, err);
                process.exit(1);
            } else {
                console.log(`  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table.name} —Å–æ–∑–¥–∞–Ω–∞`);
            }
        });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤:');
    for (const indexSql of createIndexes) {
        db.run(indexSql, (err) => {
            if (!err) {
                const indexName = indexSql.match(/INDEX (\w+)/)[1];
                console.log(`  ‚úÖ –ò–Ω–¥–µ–∫—Å ${indexName} —Å–æ–∑–¥–∞–Ω`);
            }
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    setTimeout(() => {
        console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã licenses:');
        db.all("PRAGMA table_info(licenses)", (err, rows) => {
            if (!err) {
                const importantColumns = rows.filter(r => 
                    r.name.includes('balance') || 
                    r.name.includes('equity') || 
                    r.name.includes('profit') ||
                    r.name.includes('account') ||
                    r.name.includes('robot')
                );
                
                console.log('\n  –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è:');
                importantColumns.forEach(col => {
                    console.log(`    ‚Ä¢ ${col.name}: ${col.type}`);
                });
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
            db.close((err) => {
                if (err) {
                    console.error('\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err);
                } else {
                    console.log('\n‚ú® –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
                    console.log('üìÅ –§–∞–π–ª: licenses.db');
                    
                    if (fs.existsSync(backupPath)) {
                        console.log(`üì¶ –ë—ç–∫–∞–ø —Å—Ç–∞—Ä–æ–π –ë–î: ${backupPath}`);
                        console.log('   (–º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)');
                    }
                    
                    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä!');
                }
            });
        });
    }, 500);
});