"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø—Ä–µ–º–∏—É–º –¥–∏–∑–∞–π–Ω–æ–º
–ö–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–∑—É–º—Ä—É–¥–Ω—ã–º–∏ –∏ –∑–æ–ª–æ—Ç—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∑–∞–π–Ω-–≥–∞–π–¥—É
"""

import customtkinter as ctk
from typing import Dict, Any
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
from themes.dark_theme import DarkTheme


class StatCard(ctk.CTkFrame):
    """–ü—Ä–µ–º–∏—É–º –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å 3D —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    
    def __init__(self, parent, title: str, value: str = "0", 
                 icon: str = "üìä", card_type: str = "default"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ
            icon: –ò–∫–æ–Ω–∫–∞ (3D —ç–º–æ–¥–∑–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∑–∞–π–Ω-–≥–∞–π–¥—É)
            card_type: –¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        card_styles = self._get_card_styles(card_type)
        super().__init__(parent, **card_styles)
        
        self.title = title
        self.value = value
        self.icon = icon
        self.card_type = card_type
        self.is_animating = False
        
        self._setup_ui()
        
        # –ó–∞–ø—É—Å–∫ pulse –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ (–∫–∞–∂–¥—ã–µ 4-5 —Å–µ–∫—É–Ω–¥)
        self.after(4500, self._start_icon_pulse)
    
    def _get_card_styles(self, card_type: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∑–∞–π–Ω-–≥–∞–π–¥—É"""
        base_style = {
            "fg_color": DarkTheme.BG_CARD,
            "corner_radius": DarkTheme.RADIUS_LARGE,
            "border_width": 2,
            "height": 100
        }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ —Ä–∞–º–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
        if card_type == "total":
            base_style["border_color"] = DarkTheme.CHAMPAGNE_GOLD  # –ó–æ–ª–æ—Ç–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º–∞
        elif card_type == "active":
            base_style["border_color"] = DarkTheme.JADE_GREEN      # –ó–µ–ª–µ–Ω–∞—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
        elif card_type == "expired":
            base_style["border_color"] = DarkTheme.COPPER_BRONZE   # –ë—Ä–æ–Ω–∑–æ–≤–∞—è –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö
        elif card_type == "blocked":
            base_style["border_color"] = "#D32F2F"                 # –ö—Ä–∞—Å–Ω–∞—è –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        elif card_type == "inactive":
            base_style["border_color"] = DarkTheme.WARM_GRAY       # –°–µ—Ä–∞—è –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
        elif card_type == "balance":
            base_style["border_color"] = DarkTheme.CHAMPAGNE_GOLD  # –ó–æ–ª–æ—Ç–∞—è –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
        else:
            base_style["border_color"] = DarkTheme.BORDER
        
        return base_style
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∑–∞–π–Ω-–≥–∞–π–¥—É"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(self, fg_color='transparent')
        main_container.pack(fill='both', expand=True, padx=10, pady=8)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–∫–æ–Ω–∫–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–≤–µ—á–µ–Ω–∏—è
        icon_container = ctk.CTkFrame(
            main_container,
            fg_color=self._get_icon_bg_color(),
            width=50,
            height=50,
            corner_radius=10
        )
        icon_container.pack(side='left', padx=(5, 15))
        icon_container.pack_propagate(False)
        
        # 3D –∏–∫–æ–Ω–∫–∞ (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∑–∞–π–Ω-–≥–∞–π–¥—É)
        self.icon_label = ctk.CTkLabel(
            icon_container,
            text=self.icon,
            font=("Segoe UI Emoji", 24)
        )
        self.icon_label.pack(expand=True)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Ç–µ–∫—Å—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
        text_container = ctk.CTkFrame(main_container, fg_color='transparent')
        text_container.pack(side='left', fill='both', expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ (—Ä–∞–∑–º–µ—Ä 18-20px —Å–æ–≥–ª–∞—Å–Ω–æ –≥–∞–π–¥—É)
        self.title_label = ctk.CTkLabel(
            text_container,
            text=self.title,
            font=("Inter", 12),  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–∞–π–¥—É
            text_color=DarkTheme.WARM_GRAY,
            anchor='w'
        )
        self.title_label.pack(fill='x', pady=(5, 2))
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ (–±–æ–ª—å—à–∏–µ —Ü–∏—Ñ—Ä—ã 24-28px —Å–æ–≥–ª–∞—Å–Ω–æ –≥–∞–π–¥—É)
        self.value_label = ctk.CTkLabel(
            text_container,
            text=self.value,
            font=("Inter", 26, "bold"),  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 26px –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≥–∞–π–¥—É
            text_color=self._get_value_color(),
            anchor='w'
        )
        self.value_label.pack(fill='x')
        
        # Hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≤—Å–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        for widget in [self, main_container, icon_container, text_container]:
            widget.bind("<Enter>", self._on_hover_enter)
            widget.bind("<Leave>", self._on_hover_leave)
    
    def _get_icon_bg_color(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è –∏–∫–æ–Ω–∫–∏"""
        colors = {
            "total": DarkTheme.DEEP_EMERALD,
            "active": DarkTheme.JADE_GREEN,
            "expired": DarkTheme.COPPER_BRONZE,
            "blocked": "#3A1F1F",  # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
            "inactive": "#2A2A2A",  # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
            "balance": DarkTheme.CHAMPAGNE_GOLD
        }
        return colors.get(self.card_type, DarkTheme.BG_TERTIARY)
    
    def _get_value_color(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∑–∞–π–Ω-–≥–∞–π–¥—É"""
        colors = {
            "total": DarkTheme.PURE_WHITE,
            "active": DarkTheme.JADE_GREEN,       # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
            "expired": DarkTheme.COPPER_BRONZE,   # –ë—Ä–æ–Ω–∑–æ–≤—ã–π –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö
            "blocked": "#FF5252",                  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            "inactive": DarkTheme.WARM_GRAY,      # –°–µ—Ä—ã–π –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
            "balance": DarkTheme.CHAMPAGNE_GOLD   # –ó–æ–ª–æ—Ç–æ–π –¥–ª—è –¥–µ–Ω–µ–≥
        }
        return colors.get(self.card_type, DarkTheme.TEXT_PRIMARY)
    
    def update_value(self, new_value: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å count-up –∞–Ω–∏–º–∞—Ü–∏–µ–π (—Å–æ–≥–ª–∞—Å–Ω–æ –≥–∞–π–¥—É)"""
        self.value = new_value
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        self._animate_value_change(new_value)
    
    def _animate_value_change(self, new_value: str):
        """Count-up –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Ü–∏—Ñ—Ä"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
        try:
            # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç—ã –∏ K –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            clean_value = new_value.replace('$', '').replace('K', '').replace(',', '')
            target_num = float(clean_value)
            is_currency = '$' in new_value
            is_thousands = 'K' in new_value
            
            # –ê–Ω–∏–º–∏—Ä—É–µ–º –æ—Ç 0 –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            self._count_up_animation(0, target_num, is_currency, is_thousands)
        except:
            # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º
            self.value_label.configure(text=new_value)
    
    def _count_up_animation(self, current: float, target: float, 
                           is_currency: bool, is_thousands: bool, step: int = 0):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫ —Ü–µ–ª–µ–≤–æ–º—É"""
        if step > 20:  # –ú–∞–∫—Å–∏–º—É–º 20 —à–∞–≥–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if is_currency:
                if is_thousands:
                    final_text = f"${target:.1f}K"
                else:
                    final_text = f"${target:.0f}"
            else:
                final_text = str(int(target))
            
            self.value_label.configure(text=final_text)
            return
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        progress = step / 20
        interpolated = current + (target - current) * progress
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if is_currency:
            if is_thousands:
                display_text = f"${interpolated:.1f}K"
            else:
                display_text = f"${interpolated:.0f}"
        else:
            display_text = str(int(interpolated))
        
        self.value_label.configure(text=display_text)
        
        # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —á–µ—Ä–µ–∑ 30–º—Å
        self.after(30, lambda: self._count_up_animation(
            current, target, is_currency, is_thousands, step + 1
        ))
    
    def _on_hover_enter(self, event):
        """Hover —ç—Ñ—Ñ–µ–∫—Ç - –ø–æ–¥—ä–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ (scale 1.02 —Å–æ–≥–ª–∞—Å–Ω–æ –≥–∞–π–¥—É)"""
        # –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–≤–µ—á–µ–Ω–∏—è
        hover_colors = {
            "total": DarkTheme.CHAMPAGNE_GOLD,
            "active": DarkTheme.JADE_GREEN,
            "expired": DarkTheme.COPPER_BRONZE,
            "blocked": "#FF5252",
            "inactive": DarkTheme.WARM_GRAY,
            "balance": DarkTheme.CHAMPAGNE_GOLD
        }
        
        new_border = hover_colors.get(self.card_type, DarkTheme.JADE_GREEN)
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–ø–æ–¥—ä–µ–º–∞"
        self.configure(border_color=new_border, border_width=3)
    
    def _on_hover_leave(self, event):
        """–£–±–∏—Ä–∞–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç"""
        self.configure(border_width=2)
    
    def _start_icon_pulse(self):
        """–ó–∞–ø—É—Å–∫ pulse –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∫–æ–Ω–∫–∏ (–∫–∞–∂–¥—ã–µ 4-5 —Å–µ–∫—É–Ω–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –≥–∞–π–¥—É)"""
        if not self.is_animating:
            self.is_animating = True
            self._pulse_icon()
    
    def _pulse_icon(self):
        """Pulse –∞–Ω–∏–º–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏"""
        if not self.is_animating:
            return
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
        self.icon_label.configure(font=("Segoe UI Emoji", 26))
        self.after(200, lambda: self.icon_label.configure(font=("Segoe UI Emoji", 24)))
        
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 4.5 —Å–µ–∫—É–Ω–¥—ã
        self.after(4500, self._pulse_icon)


class StatsPanel(ctk.CTkFrame):
    """–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø—Ä–µ–º–∏—É–º –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    
    def __init__(self, parent, stats: Dict[str, Any] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            stats: –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        super().__init__(
            parent,
            fg_color=DarkTheme.BG_PRIMARY,
            corner_radius=0,
            height=120
        )
        
        self.stats = stats or self._get_default_stats()
        self.cards = {}
        
        self._setup_ui()
        self.update_stats(self.stats)
    
    def _get_default_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'total': 0,
            'active': 0,
            'expired': 0,
            'blocked': 0,
            'inactive': 0,
            'balance': 0.0
        }
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø—Ä–µ–º–∏—É–º –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        cards_container = ctk.CTkFrame(self, fg_color='transparent')
        cards_container.pack(fill='both', expand=True)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ - 6 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        for i in range(6):
            cards_container.grid_columnconfigure(i, weight=1, minsize=180)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏—É–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∑–∞–π–Ω-–≥–∞–π–¥—É
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 3D –∏–∫–æ–Ω–∫–∏ –∏–∑ –≥–∞–π–¥–∞
        card_configs = [
            {
                'key': 'balance',
                'title': 'üìä –ë–∞–ª–∞–Ω—Å',
                'icon': 'üí∞',  # –ú–µ—à–æ–∫ —Å –∑–æ–ª–æ—Ç—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏
                'card_type': 'balance',
                'column': 0
            },
            {
                'key': 'total',
                'title': 'üéü –í—Å–µ–≥–æ –ª–∏—Ü–µ–Ω–∑–∏–π',
                'icon': 'üíé',  # –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç-–ø—Ä–µ–º–∏—É–º
                'card_type': 'total',
                'column': 1
            },
            {
                'key': 'active',
                'title': '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ',
                'icon': '‚≠ê',  # –ó–≤–µ–∑–¥–∞
                'card_type': 'active',
                'column': 2
            },
            {
                'key': 'expired',
                'title': 'üïí –ò—Å—Ç–µ–∫–∞—é—â–∏–µ',
                'icon': '‚è≥',  # –ü–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã
                'card_type': 'expired',
                'column': 3
            },
            {
                'key': 'blocked',
                'title': 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
                'icon': 'üîí',  # –ú–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞–º–æ–∫
                'card_type': 'blocked',
                'column': 4
            },
            {
                'key': 'inactive',
                'title': 'üåô –ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
                'icon': 'üåô',  # –õ—É–Ω–∞ —Å–æ —Å–≤–µ—á–µ–Ω–∏–µ–º
                'card_type': 'inactive',
                'column': 5
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        for config in card_configs:
            card = StatCard(
                cards_container,
                title=config['title'],
                value="0",
                icon=config['icon'],
                card_type=config['card_type']
            )
            card.grid(row=0, column=config['column'], padx=7, pady=10, sticky='nsew')
            self.cards[config['key']] = card
    
    def update_stats(self, stats: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        self.stats = stats
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (—Å –∑–æ–ª–æ—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ –≥–∞–π–¥—É)
        if 'balance' in stats and 'balance' in self.cards:
            balance = stats['balance']
            if balance >= 1000:
                balance_str = f"${balance/1000:.1f}K"
            else:
                balance_str = f"${balance:.0f}"
            self.cards['balance'].update_value(balance_str)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        if 'total' in stats and 'total' in self.cards:
            self.cards['total'].update_value(str(stats['total']))
        
        if 'active' in stats and 'active' in self.cards:
            self.cards['active'].update_value(str(stats['active']))
        
        if 'expired' in stats and 'expired' in self.cards:
            self.cards['expired'].update_value(str(stats['expired']))
        
        if 'blocked' in stats and 'blocked' in self.cards:
            self.cards['blocked'].update_value(str(stats['blocked']))
        
        # –î–ª—è "–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö" –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'created' –∏–ª–∏ 'inactive'
        inactive_count = stats.get('inactive', stats.get('created', 0))
        if 'inactive' in self.cards:
            self.cards['inactive'].update_value(str(inactive_count))
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return self.stats
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.update_stats(self._get_default_stats())
    
    def highlight_card(self, card_key: str):
        """
        –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        
        Args:
            card_key: –ö–ª—é—á –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        """
        if card_key in self.cards:
            card = self.cards[card_key]
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
            original_border = card.cget("border_width")
            card.configure(border_width=4)
            card.after(1000, lambda: card.configure(border_width=original_border))