"""
–í–∏–¥–∂–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
"""

import customtkinter as ctk
from typing import Optional, Tuple
from enum import Enum
from datetime import datetime
from themes.dark_theme import DarkTheme


class ConnectionStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    CONNECTED = ('üü¢', '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ', DarkTheme.STATUS_ACTIVE)     # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–µ–ª–µ–Ω—ã–π
    CONNECTING = ('üü°', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', DarkTheme.STATUS_WARNING)  # –ñ–µ–ª—Ç—ã–π
    DISCONNECTED = ('üî¥', '–û—Ç–∫–ª—é—á–µ–Ω–æ', DarkTheme.STATUS_EXPIRED)  # –ö—Ä–∞—Å–Ω—ã–π
    ERROR = ('‚ö†Ô∏è', '–û—à–∏–±–∫–∞', DarkTheme.STATUS_EXPIRED)           # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—à–∏–±–æ–∫


class StatusIndicator(ctk.CTkFrame):
    """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    
    def __init__(self, parent, initial_status: ConnectionStatus = ConnectionStatus.DISCONNECTED):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            initial_status: –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        """
        super().__init__(parent, fg_color="transparent", height=30)
        
        self.current_status = initial_status
        self.last_update = datetime.now()
        self.server_info = {}
        
        self._setup_ui()
        self.set_status(initial_status)
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        self.container = ctk.CTkFrame(
            self,
            fg_color=DarkTheme.BG_TERTIARY,
            corner_radius=DarkTheme.RADIUS_MEDIUM,
            height=30
        )
        self.container.pack(fill="x", padx=5, pady=2)
        
        # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        self.icon_label = ctk.CTkLabel(
            self.container,
            text="",
            font=(DarkTheme.FONT_FAMILY, 14),
            width=30
        )
        self.icon_label.pack(side="left", padx=(10, 5))
        
        # –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        self.status_label = ctk.CTkLabel(
            self.container,
            text="",
            font=(DarkTheme.FONT_FAMILY, DarkTheme.FONT_SIZE_SMALL),
            text_color=DarkTheme.TEXT_SECONDARY
        )
        self.status_label.pack(side="left", padx=(0, 10))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.info_label = ctk.CTkLabel(
            self.container,
            text="",
            font=(DarkTheme.FONT_FAMILY, DarkTheme.FONT_SIZE_TINY),
            text_color=DarkTheme.TEXT_MUTED
        )
        self.info_label.pack(side="right", padx=(0, 10))
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞)
        self.loading_bar = ctk.CTkProgressBar(
            self.container,
            mode="indeterminate",
            height=2,
            progress_color=DarkTheme.GREEN_PRIMARY
        )
    
    def set_status(self, status: ConnectionStatus, info: str = ""):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Args:
            status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        self.current_status = status
        self.last_update = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞
        icon, text, color = status.value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.icon_label.configure(text=icon)
        self.status_label.configure(text=text, text_color=color)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if status == ConnectionStatus.CONNECTED:
            self.container.configure(
                fg_color=DarkTheme.BG_TERTIARY,
                border_width=1,
                border_color=color
            )
        elif status == ConnectionStatus.ERROR or status == ConnectionStatus.DISCONNECTED:
            self.container.configure(
                fg_color="#450a0a",  # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
                border_width=1,
                border_color=color
            )
        else:
            self.container.configure(
                fg_color=DarkTheme.BG_TERTIARY,
                border_width=1,
                border_color=DarkTheme.BORDER_PRIMARY
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if status == ConnectionStatus.CONNECTING:
            self.show_loading()
        else:
            self.hide_loading()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if info:
            self.info_label.configure(text=info)
        else:
            self._update_info()
    
    def _update_info(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        if self.current_status == ConnectionStatus.CONNECTED:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            time_str = self.last_update.strftime("%H:%M:%S")
            self.info_label.configure(text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {time_str}")
        elif self.current_status == ConnectionStatus.ERROR:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—à–∏–±–∫–∏
            self.info_label.configure(text="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        else:
            self.info_label.configure(text="")
    
    def show_loading(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.loading_bar.pack(side="bottom", fill="x", padx=0, pady=0)
        self.loading_bar.start()
    
    def hide_loading(self):
        """–°–∫—Ä—ã—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.loading_bar.stop()
        self.loading_bar.pack_forget()
    
    def set_server_info(self, host: str, port: int):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        
        Args:
            host: –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
            port: –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
        """
        self.server_info = {
            'host': host,
            'port': port
        }
        
        if self.current_status == ConnectionStatus.CONNECTED:
            self.info_label.configure(text=f"{host}:{port}")
    
    def pulse_animation(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è"""
        original_color = self.container.cget("fg_color")
        
        # –ú–∏–≥–∞–µ–º 3 —Ä–∞–∑–∞
        for i in range(3):
            self.after(i * 400, lambda: self.container.configure(
                fg_color=DarkTheme.BG_HOVER))
            self.after(i * 400 + 200, lambda c=original_color: 
                      self.container.configure(fg_color=c))
    
    def get_status(self) -> ConnectionStatus:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        
        Returns:
            ConnectionStatus: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        """
        return self.current_status
    
    def is_connected(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
        """
        return self.current_status == ConnectionStatus.CONNECTED
    
    def get_uptime(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        
        Returns:
            str: –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
        """
        if not self.is_connected():
            return "00:00:00"
        
        delta = datetime.now() - self.last_update
        hours = delta.seconds // 3600
        minutes = (delta.seconds % 3600) // 60
        seconds = delta.seconds % 60
        
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"


class QuickStatusBar(ctk.CTkFrame):
    """–ë—ã—Å—Ç—Ä–∞—è –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –æ–∫–Ω–∞"""
    
    def __init__(self, parent):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        super().__init__(parent, fg_color=DarkTheme.BG_SECONDARY, height=25)
        
        self.indicators = {}
        self._setup_ui()
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.left_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.left_frame.pack(side="left", padx=10)
        
        self.connection_dot = ctk.CTkLabel(
            self.left_frame,
            text="‚óè",
            font=(DarkTheme.FONT_FAMILY, 10),
            text_color=DarkTheme.STATUS_EXPIRED
        )
        self.connection_dot.pack(side="left", padx=(0, 5))
        
        self.connection_text = ctk.CTkLabel(
            self.left_frame,
            text="–û—Ç–∫–ª—é—á–µ–Ω–æ",
            font=(DarkTheme.FONT_FAMILY, DarkTheme.FONT_SIZE_TINY),
            text_color=DarkTheme.TEXT_MUTED
        )
        self.connection_text.pack(side="left")
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        self.separator1 = ctk.CTkLabel(
            self,
            text="|",
            font=(DarkTheme.FONT_FAMILY, DarkTheme.FONT_SIZE_TINY),
            text_color=DarkTheme.TEXT_MUTED
        )
        self.separator1.pack(side="left", padx=10)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.center_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.center_frame.pack(side="left", expand=True)
        
        self.stats_text = ctk.CTkLabel(
            self.center_frame,
            text="",
            font=(DarkTheme.FONT_FAMILY, DarkTheme.FONT_SIZE_TINY),
            text_color=DarkTheme.TEXT_MUTED
        )
        self.stats_text.pack()
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –≤—Ä–µ–º—è
        self.right_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.right_frame.pack(side="right", padx=10)
        
        self.time_label = ctk.CTkLabel(
            self.right_frame,
            text="",
            font=(DarkTheme.FONT_FAMILY, DarkTheme.FONT_SIZE_TINY),
            text_color=DarkTheme.TEXT_MUTED
        )
        self.time_label.pack()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        self._update_time()
    
    def _update_time(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        current_time = datetime.now().strftime("%H:%M:%S")
        self.time_label.configure(text=current_time)
        self.after(1000, self._update_time)
    
    def set_connection_status(self, connected: bool, text: str = ""):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Args:
            connected: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
            text: –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        """
        if connected:
            self.connection_dot.configure(text_color=DarkTheme.STATUS_ACTIVE)
            self.connection_text.configure(
                text=text or "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ",
                text_color=DarkTheme.TEXT_SECONDARY
            )
        else:
            self.connection_dot.configure(text_color=DarkTheme.STATUS_EXPIRED)
            self.connection_text.configure(
                text=text or "–û—Ç–∫–ª—é—á–µ–Ω–æ",
                text_color=DarkTheme.TEXT_MUTED
            )
    
    def set_stats(self, active: int = 0, total: int = 0):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
        Args:
            active: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        """
        self.stats_text.configure(
            text=f"–ê–∫—Ç–∏–≤–Ω—ã–µ: {active} / –í—Å–µ–≥–æ: {total}"
        )
    
    def add_indicator(self, key: str, text: str, color: str = None):
        """
        –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        
        Args:
            key: –ö–ª—é—á –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            text: –¢–µ–∫—Å—Ç
            color: –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        """
        if key not in self.indicators:
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            separator = ctk.CTkLabel(
                self,
                text="|",
                font=(DarkTheme.FONT_FAMILY, DarkTheme.FONT_SIZE_TINY),
                text_color=DarkTheme.TEXT_MUTED
            )
            separator.pack(side="left", padx=5)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            indicator = ctk.CTkLabel(
                self,
                text=text,
                font=(DarkTheme.FONT_FAMILY, DarkTheme.FONT_SIZE_TINY),
                text_color=color or DarkTheme.TEXT_MUTED
            )
            indicator.pack(side="left", padx=5)
            
            self.indicators[key] = {
                'separator': separator,
                'label': indicator
            }
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            self.indicators[key]['label'].configure(
                text=text,
                text_color=color or DarkTheme.TEXT_MUTED
            )
    
    def remove_indicator(self, key: str):
        """
        –£–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        
        Args:
            key: –ö–ª—é—á –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        """
        if key in self.indicators:
            self.indicators[key]['separator'].destroy()
            self.indicators[key]['label'].destroy()
            del self.indicators[key]