"""
–í–∏–¥–∂–µ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π –∏ –æ—á–∏—Å—Ç–∫–æ–π
"""

import customtkinter as ctk
from typing import Optional, Callable
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from themes.dark_theme import DarkTheme


class SearchBar(ctk.CTkFrame):
    """–ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    def __init__(self, parent,
                 placeholder: str = "–ü–æ–∏—Å–∫...",
                 width: int = 300,
                 height: int = 32,
                 on_search: Optional[Callable] = None,
                 on_clear: Optional[Callable] = None,
                 search_delay: int = 300):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            placeholder: –¢–µ–∫—Å—Ç-–ø–æ–¥—Å–∫–∞–∑–∫–∞
            width: –®–∏—Ä–∏–Ω–∞ –≤–∏–¥–∂–µ—Ç–∞
            height: –í—ã—Å–æ—Ç–∞ –≤–∏–¥–∂–µ—Ç–∞
            on_search: Callback –ø—Ä–∏ –ø–æ–∏—Å–∫–µ (text: str)
            on_clear: Callback –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
            search_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º (–º—Å)
        """
        super().__init__(parent, 
                        fg_color='transparent',
                        width=width,
                        height=height)
        
        # Callbacks
        self.on_search = on_search
        self.on_clear = on_clear
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.search_delay = search_delay
        self.search_timer = None
        
        # –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã
        self._create_widgets(placeholder, width, height)
    
    def _create_widgets(self, placeholder: str, width: int, height: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = ctk.CTkFrame(self, 
                                fg_color=DarkTheme.BG_INPUT,
                                corner_radius=6,
                                height=height)
        container.pack(fill='x', expand=True)
        container.pack_propagate(False)
        
        # –ò–∫–æ–Ω–∫–∞ –ø–æ–∏—Å–∫–∞
        self.search_icon = ctk.CTkLabel(
            container,
            text="üîç",
            font=("Arial", 14),
            text_color=DarkTheme.TEXT_SECONDARY
        )
        self.search_icon.pack(side='left', padx=(8, 4))
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.entry = ctk.CTkEntry(
            container,
            placeholder_text=placeholder,
            border_width=0,
            fg_color='transparent',
            text_color=DarkTheme.TEXT_PRIMARY,
            placeholder_text_color=DarkTheme.TEXT_DISABLED,
            font=("Arial", 12)
        )
        self.entry.pack(side='left', fill='x', expand=True, padx=(0, 4))
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞)
        self.clear_btn = ctk.CTkButton(
            container,
            text="‚úï",
            width=20,
            height=20,
            fg_color='transparent',
            text_color=DarkTheme.TEXT_SECONDARY,
            hover_color=DarkTheme.BG_HOVER,
            font=("Arial", 12),
            command=self.clear
        )
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.entry.bind('<KeyRelease>', self._on_key_release)
        self.entry.bind('<Return>', self._on_enter)
        self.entry.bind('<FocusIn>', self._on_focus_in)
        self.entry.bind('<FocusOut>', self._on_focus_out)
        
        # –°—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        self.container = container
    
    def _on_key_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞"""
        text = self.entry.get()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
        if text:
            if not self.clear_btn.winfo_ismapped():
                self.clear_btn.pack(side='right', padx=(0, 8))
        else:
            if self.clear_btn.winfo_ismapped():
                self.clear_btn.pack_forget()
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if self.search_timer:
            self.after_cancel(self.search_timer)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        if self.on_search:
            self.search_timer = self.after(
                self.search_delay,
                lambda: self._perform_search(text)
            )
    
    def _on_enter(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter"""
        text = self.entry.get()
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
        if self.search_timer:
            self.after_cancel(self.search_timer)
            self.search_timer = None
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å—Ä–∞–∑—É
        if self.on_search:
            self._perform_search(text)
    
    def _on_focus_in(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞"""
        self.container.configure(border_width=1, 
                                border_color=DarkTheme.BORDER_FOCUS)
        self.search_icon.configure(text_color=DarkTheme.ACCENT_GREEN)
    
    def _on_focus_out(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞"""
        self.container.configure(border_width=0)
        self.search_icon.configure(text_color=DarkTheme.TEXT_SECONDARY)
    
    def _perform_search(self, text: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫"""
        if self.on_search:
            self.on_search(text)
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"""
        self.entry.delete(0, 'end')
        
        # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
        if self.clear_btn.winfo_ismapped():
            self.clear_btn.pack_forget()
        
        # –í—ã–∑—ã–≤–∞–µ–º callback
        if self.on_clear:
            self.on_clear()
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        if self.on_search:
            self.on_search("")
    
    def set_text(self, text: str):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        self.entry.delete(0, 'end')
        self.entry.insert(0, text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
        if text and not self.clear_btn.winfo_ismapped():
            self.clear_btn.pack(side='right', padx=(0, 8))
        elif not text and self.clear_btn.winfo_ismapped():
            self.clear_btn.pack_forget()
    
    def get_text(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç
        
        Returns:
            str: –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
        """
        return self.entry.get()
    
    def focus(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞"""
        self.entry.focus_set()
    
    def set_placeholder(self, placeholder: str):
        """
        –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç-–ø–æ–¥—Å–∫–∞–∑–∫—É
        
        Args:
            placeholder: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç-–ø–æ–¥—Å–∫–∞–∑–∫–∞
        """
        self.entry.configure(placeholder_text=placeholder)
    
    def enable(self):
        """–í–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫"""
        self.entry.configure(state='normal')
        self.search_icon.configure(text_color=DarkTheme.TEXT_SECONDARY)
    
    def disable(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫"""
        self.entry.configure(state='disabled')
        self.search_icon.configure(text_color=DarkTheme.TEXT_DISABLED)