"""
–ú–∏–∫—Å–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏
–ü–û–õ–ù–´–ô –§–ê–ô–õ: FoxterAI_Desktop/app/mixins/license_mixin.py
–ò–°–ü–†–ê–í–õ–ï–ù–û: update_licenses –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ load_licenses
"""

import threading
from tkinter import filedialog, messagebox
from typing import List, Dict, Any
from datetime import datetime
import pandas as pd
import customtkinter as ctk


class LicenseMixin:
    """–ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏"""
    
    def load_licenses(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–∏—Ü–µ–Ω–∑–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not hasattr(self, 'license_service'):
            print("‚ùå –°–µ—Ä–≤–∏—Å –ª–∏—Ü–µ–Ω–∑–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            self.set_status("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤", "error")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self.license_service.is_connected:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
            self.connect_to_server()
            # –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è load_licenses –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            return
        
        self.set_status("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π...", "loading")
        self.show_loading(True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._load_licenses_thread)
        thread.daemon = True
        thread.start()
    
    def _load_licenses_thread(self):
        """–ü–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π"""
        try:
            print("üì° –ó–∞–ø—Ä–æ—Å –ª–∏—Ü–µ–Ω–∑–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            licenses = self.license_service.get_licenses()
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ª–∏—Ü–µ–Ω–∑–∏–π: {len(licenses) if licenses else 0}")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
            self.after(0, self._handle_licenses_loaded, licenses)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π: {e}")
            self.after(0, self._handle_licenses_error, str(e))
    
    def _handle_licenses_loaded(self, licenses: List[Dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π"""
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(licenses) if licenses else 0} –ª–∏—Ü–µ–Ω–∑–∏–π...")
        
        self.show_loading(False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏
        if licenses is None:
            licenses = []
        
        self.licenses = licenses
        self.filtered_licenses = licenses.copy()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º load_licenses –≤–º–µ—Å—Ç–æ update_licenses
        if hasattr(self, 'license_table') and self.license_table:
            print("üìä –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏—Ü–µ–Ω–∑–∏–π...")
            self.license_table.load_licenses(self.licenses)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_statistics_from_licenses()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        if hasattr(self, '_update_license_count'):
            self._update_license_count()
        
        # –°—Ç–∞—Ç—É—Å
        count = len(self.licenses)
        if count > 0:
            self.set_status(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –ª–∏—Ü–µ–Ω–∑–∏–π", "success")
        else:
            self.set_status("‚ÑπÔ∏è –ù–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–π", "info")
    
    def _handle_licenses_error(self, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.show_loading(False)
        self.set_status(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error}", "error")
        
        self.show_notification(
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏:\n{error}",
            "error"
        )
    
    def _update_statistics_from_licenses(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π"""
        if not self.licenses:
            stats = {'total': 0, 'active': 0, 'expired': 0, 'blocked': 0, 'inactive': 0, 'balance': 0}
        else:
            stats = {
                'total': len(self.licenses),
                'active': len([l for l in self.licenses if self._get_field(l, 'status') == 'active']),
                'expired': len([l for l in self.licenses if self._get_field(l, 'status') == 'expired']),
                'blocked': len([l for l in self.licenses if self._get_field(l, 'status') == 'blocked']),
                'inactive': len([l for l in self.licenses if self._get_field(l, 'status') == 'created']),
                'balance': sum([float(self._get_field(l, 'last_balance', 0)) for l in self.licenses 
                               if self._get_field(l, 'account_type') == 'Real'])
            }
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Å–µ–≥–æ={stats['total']}, –ê–∫—Ç–∏–≤–Ω—ã—Ö={stats['active']}, "
              f"–ò—Å—Ç–µ–∫—à–∏—Ö={stats['expired']}, –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö={stats['blocked']}, "
              f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö={stats['inactive']}, –ë–∞–ª–∞–Ω—Å REAL=${stats['balance']:.2f}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        if hasattr(self, 'update_statistics'):
            self.update_statistics(stats)
    
    def _get_field(self, obj, field_name, default=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è"""
        if hasattr(obj, field_name):
            return getattr(obj, field_name, default)
        elif hasattr(obj, '__dict__'):
            return obj.__dict__.get(field_name, default)
        elif isinstance(obj, dict):
            return obj.get(field_name, default)
        return default
    
    def create_license(self, license_data: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        self.set_status("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏...", "loading")
        
        def create_thread():
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ universal –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if 'universal' not in license_data:
                    license_data['universal'] = True
                    
                result = self.license_service.create_license(license_data)
                self.after(0, self._handle_create_result, result, license_data)
            except Exception as e:
                self.after(0, self._handle_create_error, str(e))
        
        thread = threading.Thread(target=create_thread)
        thread.daemon = True
        thread.start()
    
    def _handle_create_result(self, result: Dict, license_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        if result and result.get('success'):
            key = result.get('license_key', license_data.get('license_key', 'Unknown'))
            self.set_status(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —Å–æ–∑–¥–∞–Ω–∞: {key}", "success")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            self.load_licenses()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.show_notification(
                "–õ–∏—Ü–µ–Ω–∑–∏—è —Å–æ–∑–¥–∞–Ω–∞",
                f"–ö–ª—é—á: {key}\n–ö–ª–∏–µ–Ω—Ç: {license_data.get('client_name', '')}",
                "success"
            )
        else:
            error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'
            self._handle_create_error(error)
    
    def _handle_create_error(self, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è"""
        self.set_status(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {error}", "error")
        self.show_notification(
            "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é:\n{error}",
            "error"
        )
    
    def edit_license(self, license_key: str, updates: Dict):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        self.set_status(f"‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏...", "loading")
        
        def edit_thread():
            try:
                success = self.license_service.update_license(license_key, updates)
                self.after(0, self._handle_edit_result, success, license_key)
            except Exception as e:
                self.after(0, self._handle_edit_error, license_key, str(e))
        
        thread = threading.Thread(target=edit_thread)
        thread.daemon = True
        thread.start()
    
    def _handle_edit_result(self, success: bool, license_key: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if success:
            self.set_status(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", "success")
            self.load_licenses()
            
            self.show_notification(
                "–õ–∏—Ü–µ–Ω–∑–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                f"–ö–ª—é—á: {license_key[:12]}...",
                "success"
            )
        else:
            self._handle_edit_error(license_key, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å")
    
    def _handle_edit_error(self, license_key: str, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.set_status(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {error}", "error")
        self.show_notification(
            "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é {license_key[:12]}...:\n{error}",
            "error"
        )
    
    def delete_license(self, license):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á
        key = self._get_field(license, 'license_key', 'Unknown')
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é?\n\n–ö–ª—é—á: {key[:12]}...\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
        )
        
        if not result:
            return
        
        self.set_status("‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏...", "loading")
        
        def delete_thread():
            try:
                success = self.license_service.delete_license(key)
                self.after(0, self._handle_delete_result, success, key)
            except Exception as e:
                self.after(0, self._handle_delete_error, key, str(e))
        
        thread = threading.Thread(target=delete_thread)
        thread.daemon = True
        thread.start()
    
    def _handle_delete_result(self, success: bool, key: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
        if success:
            self.set_status(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —É–¥–∞–ª–µ–Ω–∞", "success")
            self.load_licenses()
            
            self.show_notification(
                "–õ–∏—Ü–µ–Ω–∑–∏—è —É–¥–∞–ª–µ–Ω–∞",
                f"–ö–ª—é—á: {key[:12]}...",
                "success"
            )
        else:
            self._handle_delete_error(key, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å")
    
    def _handle_delete_error(self, key: str, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
        self.set_status(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {error}", "error")
        self.show_notification(
            "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é {key[:12]}...:\n{error}",
            "error"
        )
    
    def extend_license(self, license, months: int):
        """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        key = self._get_field(license, 'license_key', 'Unknown')
        self.set_status(f"‚è≥ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏...", "loading")
        
        def extend_thread():
            try:
                success = self.license_service.extend_license(key, months)
                self.after(0, self._handle_extend_result, success, key, months)
            except Exception as e:
                self.after(0, self._handle_extend_error, key, str(e))
        
        thread = threading.Thread(target=extend_thread)
        thread.daemon = True
        thread.start()
    
    def _handle_extend_result(self, success: bool, key: str, months: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
        if success:
            self.set_status(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∞", "success")
            self.load_licenses()
            
            self.show_notification(
                "–õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∞",
                f"–ö–ª—é—á: {key[:12]}...\n–ü—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞: {months} –º–µ—Å—è—Ü–µ–≤",
                "success"
            )
        else:
            self._handle_extend_error(key, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å")
    
    def _handle_extend_error(self, key: str, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
        self.set_status(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {error}", "error")
        self.show_notification(
            "–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è",
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é {key[:12]}...:\n{error}",
            "error"
        )
    
    def block_license(self, license):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        key = self._get_field(license, 'license_key', 'Unknown')
        current_status = self._get_field(license, 'status', 'unknown')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        is_blocked = current_status == 'blocked'
        action = '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' if is_blocked else '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'
        new_status = 'active' if is_blocked else 'blocked'
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {action} –ª–∏—Ü–µ–Ω–∑–∏—é?\n\n–ö–ª—é—á: {key[:12]}...\n\n"
            f"{'–ö–ª–∏–µ–Ω—Ç —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–æ–±–æ—Ç–∞' if is_blocked else '–ö–ª–∏–µ–Ω—Ç –ù–ï —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–æ–±–æ—Ç–∞'}!"
        )
        
        if not result:
            return
        
        self.set_status(f"‚è≥ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞...", "loading")
        
        def block_thread():
            try:
                success = self.license_service.block_license(key, not is_blocked)
                self.after(0, self._handle_block_result, success, key, action)
            except Exception as e:
                self.after(0, self._handle_block_error, key, str(e))
        
        thread = threading.Thread(target=block_thread)
        thread.daemon = True
        thread.start()
    
    def _handle_block_result(self, success: bool, key: str, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if success:
            self.set_status(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è {action}–Ω–∞", "success")
            self.load_licenses()
            
            self.show_notification(
                f"–õ–∏—Ü–µ–Ω–∑–∏—è {action}–Ω–∞",
                f"–ö–ª—é—á: {key[:12]}...",
                "success"
            )
        else:
            self._handle_block_error(key, f"–ù–µ —É–¥–∞–ª–æ—Å—å {action}")
    
    def _handle_block_error(self, key: str, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        self.set_status(f"‚ùå –û—à–∏–±–∫–∞: {error}", "error")
        self.show_notification(
            "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞",
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏ {key[:12]}...:\n{error}",
            "error"
        )
    
    def export_licenses(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–∏—Ü–µ–Ω–∑–∏–π –≤ —Ñ–∞–π–ª"""
        if not self.licenses:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[
                ("Excel —Ñ–∞–π–ª—ã", "*.xlsx"),
                ("CSV —Ñ–∞–π–ª—ã", "*.csv"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ],
            initialfile=f"licenses_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        )
        
        if not filename:
            return
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = []
            for lic in self.licenses:
                data.append({
                    '–ö–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏': self._get_field(lic, 'license_key', ''),
                    '–ö–ª–∏–µ–Ω—Ç': self._get_field(lic, 'client_name', ''),
                    '–¢–µ–ª–µ—Ñ–æ–Ω': self._get_field(lic, 'client_contact', ''),
                    'Telegram': self._get_field(lic, 'client_telegram', ''),
                    '–í–ª–∞–¥–µ–ª–µ—Ü —Å—á–µ—Ç–∞': self._get_field(lic, 'account_owner', ''),
                    '–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞': self._get_field(lic, 'account_number', ''),
                    '–ë—Ä–æ–∫–µ—Ä': self._get_field(lic, 'broker_name', ''),
                    '–†–æ–±–æ—Ç': self._get_field(lic, 'robot_name', ''),
                    '–í–µ—Ä—Å–∏—è': self._get_field(lic, 'robot_version', ''),
                    '–ë–∞–ª–∞–Ω—Å': self._get_field(lic, 'last_balance', 0),
                    '–¢–∏–ø —Å—á–µ—Ç–∞': self._get_field(lic, 'account_type', ''),
                    '–°—Ç–∞—Ç—É—Å': self._get_field(lic, 'status', ''),
                    '–°–æ–∑–¥–∞–Ω–∞': self._get_field(lic, 'created_date', ''),
                    '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞': self._get_field(lic, 'activation_date', ''),
                    '–ò—Å—Ç–µ–∫–∞–µ—Ç': self._get_field(lic, 'expiry_date', ''),
                    '–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å': self._get_field(lic, 'days_left', ''),
                    '–ó–∞–º–µ—Ç–∫–∏': self._get_field(lic, 'notes', '')
                })
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            if filename.endswith('.csv'):
                df.to_csv(filename, index=False, encoding='utf-8-sig')
            else:
                with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                    df.to_excel(writer, index=False, sheet_name='–õ–∏—Ü–µ–Ω–∑–∏–∏')
            
            self.set_status(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {filename.split('/')[-1]}", "success")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.show_notification(
                "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.licenses)} –ª–∏—Ü–µ–Ω–∑–∏–π",
                "success"
            )
            
        except Exception as e:
            self.set_status(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", "error")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:\n{str(e)}")