"""
–ú–∏–∫—Å–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É
–ü–û–õ–ù–´–ô –§–ê–ô–õ: FoxterAI_Desktop/app/mixins/connection_mixin.py
–ò–°–ü–†–ê–í–õ–ï–ù–û: update_licenses –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ load_licenses
"""

import threading
from typing import List, Dict


class ConnectionMixin:
    """–ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É –ª–∏—Ü–µ–Ω–∑–∏–π"""
    
    def connect_to_server(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ª–∏—Ü–µ–Ω–∑–∏–π"""
        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        if not hasattr(self, 'license_service'):
            print("‚ùå –°–µ—Ä–≤–∏—Å –ª–∏—Ü–µ–Ω–∑–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            self.set_status("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤", "error")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        self.set_status("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...", "loading")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if hasattr(self, '_enable_controls'):
            self._enable_controls(False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._connect_thread)
        thread.daemon = True
        thread.start()
    
    def _connect_thread(self):
        """–ü–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            result = self.license_service.connect()
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
            self.after(0, self._handle_connection_result, result)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
            self.after(0, self._handle_connection_error, str(e))
    
    def _handle_connection_result(self, success: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if success:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            self.set_status("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É", "success")
            
            # –í–∫–ª—é—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if hasattr(self, '_enable_controls'):
                self._enable_controls(True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            if hasattr(self, 'header') and self.header:
                self.header.set_connection_status(True)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if hasattr(self, 'load_licenses'):
                self.load_licenses()
        else:
            self._handle_connection_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    
    def _handle_connection_error(self, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {error}")
        self.set_status(f"‚ùå –û—à–∏–±–∫–∞: {error}", "error")
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏
        if hasattr(self, '_enable_controls'):
            self._enable_controls(False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if hasattr(self, 'header') and self.header:
            self.header.set_connection_status(False)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.show_notification(
            "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ª–∏—Ü–µ–Ω–∑–∏–π.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.ini",
            "error"
        )
    
    def _on_service_connected(self):
        """Callback –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        print("‚úÖ –°–µ—Ä–≤–∏—Å –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        self.after(0, lambda: self._handle_connection_result(True))
    
    def _on_service_disconnected(self):
        """Callback –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        print("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω")
        self.after(0, lambda: self.set_status("‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", "warning"))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if hasattr(self, 'header') and self.header:
            self.header.set_connection_status(False)
    
    def _on_licenses_loaded(self, licenses: List[Dict]):
        """Callback –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—Ü–µ–Ω–∑–∏–π –æ—Ç —Å–µ—Ä–≤–∏—Å–∞"""
        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –ª–∏—Ü–µ–Ω–∑–∏–π –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: {len(licenses) if licenses else 0}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏
        self.licenses = licenses if licenses else []
        self.filtered_licenses = self.licenses.copy()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º load_licenses –≤–º–µ—Å—Ç–æ update_licenses
        if hasattr(self, 'license_table') and self.license_table:
            self.license_table.load_licenses(self.filtered_licenses)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if hasattr(self, 'update_statistics'):
            self.update_statistics()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ UI
        if hasattr(self, '_update_license_count'):
            self._update_license_count()
        
        # –°—Ç–∞—Ç—É—Å
        count = len(self.licenses)
        if count > 0:
            self.set_status(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –ª–∏—Ü–µ–Ω–∑–∏–π", "success")
        else:
            self.set_status("‚ÑπÔ∏è –ù–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–π", "info")
    
    def _on_service_error(self, error: str):
        """Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤ —Å–µ—Ä–≤–∏—Å–µ"""
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {error}")
        self.after(0, lambda: self.set_status(f"‚ùå –û—à–∏–±–∫–∞: {error}", "error"))
    
    def _setup_service_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"""
        if hasattr(self.license_service, 'set_callbacks'):
            self.license_service.set_callbacks(
                on_connected=self._on_service_connected,
                on_disconnected=self._on_service_disconnected,
                on_licenses_loaded=self._on_licenses_loaded,
                on_error=self._on_service_error
            )
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ callbacks
        self.license_service.on_connected = self._on_service_connected
        self.license_service.on_disconnected = self._on_service_disconnected
        self.license_service.on_licenses_loaded = self._on_licenses_loaded
        self.license_service.on_error = self._on_service_error
    
    def _enable_controls(self, enabled: bool):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        state = 'normal' if enabled else 'disabled'
        
        controls = ['refresh_btn', 'create_btn', 'export_btn']
        for control_name in controls:
            if hasattr(self, control_name):
                control = getattr(self, control_name)
                if hasattr(control, 'configure'):
                    try:
                        control.configure(state=state)
                    except:
                        pass
    
    def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        print("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        self.connect_to_server()
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if hasattr(self, 'license_service'):
            self.license_service.disconnect()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        if hasattr(self, 'header') and self.header:
            self.header.set_connection_status(False)
        
        self.set_status("‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", "warning")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if hasattr(self, '_enable_controls'):
            self._enable_controls(False)