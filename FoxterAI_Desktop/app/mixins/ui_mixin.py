"""
–ú–∏–∫—Å–∏–Ω –¥–ª—è UI –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
–ò–∑—É–º—Ä—É–¥–Ω—ã–µ –∏ –∑–æ–ª–æ—Ç—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∑–∞–π–Ω-–≥–∞–π–¥—É FoxterAI
–ü–û–õ–ù–´–ô –§–ê–ô–õ –î–õ–Ø –ó–ê–ú–ï–ù–´: FoxterAI_Desktop/app/mixins/ui_mixin.py
"""

import customtkinter as ctk
from tkinter import filedialog, messagebox
from datetime import datetime
from typing import List, Dict, Any

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
from ui.components.header import HeaderPanel
from ui.components.stats_panel import StatsPanel
from ui.components.license_table import LicenseTable

# –ò–º–ø–æ—Ä—Ç —Ç–µ–º—ã
from themes.dark_theme import DarkTheme


class UIMixin:
    """–ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def _setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ä–∞–∑–º–µ—Ä
        self.title("ü¶ä License Manager SD v2.2 - Premium Edition")
        
        # –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        width = self.config.get('APP', 'window_width', 1400)
        height = self.config.get('APP', 'window_height', 800)
        
        self.center_window(width, height)
        self.minsize(1200, 700)
        
        # –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Ç–µ–º–∞
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("dark-blue")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # –°—Ç–∏–ª—å –æ–∫–Ω–∞ —Å —É–≥–æ–ª—å–Ω–æ-—á–µ—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º
        self.configure(fg_color=DarkTheme.CHARCOAL_BLACK)
    
    def _build_ui(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_container = ctk.CTkFrame(
            self,
            fg_color=DarkTheme.CHARCOAL_BLACK,
            corner_radius=0
        )
        self.main_container.pack(fill='both', expand=True)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._build_header()
        self._build_stats_panel()
        self._build_control_panel()
        self._build_license_table()
        self._build_status_bar()
    
    def _build_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –∏–∑—É–º—Ä—É–¥–Ω–æ-–∑–æ–ª–æ—Ç—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏"""
        self.header = HeaderPanel(
            self.main_container,
            on_reconnect_callback=self.connect_to_server
        )
        self.header.pack(fill='x', padx=10, pady=(10, 5))
        
        # –î–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—Å—Ç—É —Å—Ç–∞—Ç—É—Å–∞
        self.status_text = self.header.status_text
    
    def _build_stats_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å 3D –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
        self.stats_panel = StatsPanel(self.main_container)
        self.stats_panel.pack(fill='x', padx=10, pady=5)
    
    def _build_control_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_container = ctk.CTkFrame(
            self.main_container,
            fg_color=DarkTheme.GRAPHITE_GRAY,
            corner_radius=DarkTheme.RADIUS_LARGE,
            height=60
        )
        control_container.pack(fill='x', padx=10, pady=5)
        control_container.pack_propagate(False)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        left_frame = ctk.CTkFrame(control_container, fg_color='transparent')
        left_frame.pack(side='left', fill='y', padx=15, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ (–∏–∑—É–º—Ä—É–¥–Ω–∞—è)
        self.create_btn = ctk.CTkButton(
            left_frame,
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é",
            command=self.create_license_dialog,
            fg_color=DarkTheme.DEEP_EMERALD,
            hover_color=DarkTheme.JADE_GREEN,
            text_color=DarkTheme.PURE_WHITE,
            width=160,
            height=35,
            corner_radius=DarkTheme.RADIUS_NORMAL,
            font=("Inter", 12, "bold")
        )
        self.create_btn.pack(side='left', padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∑–æ–ª–æ—Ç–∞—è)
        self.refresh_btn = ctk.CTkButton(
            left_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self.load_licenses,
            fg_color=DarkTheme.CHAMPAGNE_GOLD,
            hover_color=DarkTheme.COPPER_BRONZE,
            text_color=DarkTheme.CHARCOAL_BLACK,
            width=110,
            height=35,
            corner_radius=DarkTheme.RADIUS_NORMAL,
            font=("Inter", 11, "bold")
        )
        self.refresh_btn.pack(side='left', padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.export_btn = ctk.CTkButton(
            left_frame,
            text="üì§ –≠–∫—Å–ø–æ—Ä—Ç",
            command=self.export_licenses,
            fg_color=DarkTheme.BG_TERTIARY,
            hover_color=DarkTheme.BG_HOVER,
            text_color=DarkTheme.WARM_GRAY,
            width=100,
            height=35,
            corner_radius=DarkTheme.RADIUS_NORMAL,
            font=("Inter", 11)
        )
        self.export_btn.pack(side='left')
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
        right_frame = ctk.CTkFrame(control_container, fg_color='transparent')
        right_frame.pack(side='right', fill='y', padx=15, pady=10)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        self.status_filter = ctk.CTkOptionMenu(
            right_frame,
            values=['–í—Å–µ', '–ê–∫—Ç–∏–≤–Ω—ã–µ', '–ò—Å—Ç–µ–∫—à–∏–µ', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', '–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'],
            command=self._on_filter_change,
            fg_color=DarkTheme.BG_TERTIARY,
            button_color=DarkTheme.DEEP_EMERALD,
            button_hover_color=DarkTheme.JADE_GREEN,
            dropdown_fg_color=DarkTheme.BG_TERTIARY,
            dropdown_hover_color=DarkTheme.BG_HOVER,
            text_color=DarkTheme.PURE_WHITE,
            dropdown_text_color=DarkTheme.WARM_GRAY,
            width=180,
            height=35,
            corner_radius=DarkTheme.RADIUS_NORMAL,
            font=("Inter", 11)
        )
        self.status_filter.set('–í—Å–µ')
        self.status_filter.pack(side='right', padx=5)
        
        # –ü–æ–∏—Å–∫ —Å –º—è—Ç–Ω—ã–º –∞–∫—Ü–µ–Ω—Ç–æ–º
        self.search_entry = ctk.CTkEntry(
            right_frame,
            placeholder_text="üîç –ü–æ–∏—Å–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏...",
            width=250,
            height=35,
            fg_color=DarkTheme.BG_TERTIARY,
            border_color=DarkTheme.SOFT_MINT,
            border_width=1,
            text_color=DarkTheme.PURE_WHITE,
            placeholder_text_color=DarkTheme.WARM_GRAY,
            corner_radius=DarkTheme.RADIUS_NORMAL,
            font=("Inter", 11)
        )
        self.search_entry.pack(side='right', padx=5)
        self.search_entry.bind('<KeyRelease>', self._on_search)
    
    def _build_license_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏—Ü–µ–Ω–∑–∏–π —Å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_container = ctk.CTkFrame(
            self.main_container,
            fg_color=DarkTheme.GRAPHITE_GRAY,
            corner_radius=DarkTheme.RADIUS_LARGE
        )
        table_container.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        table_header = ctk.CTkFrame(table_container, fg_color='transparent')
        table_header.pack(fill='x', padx=15, pady=(15, 5))
        
        table_title = ctk.CTkLabel(
            table_header,
            text="üìã –°–ø–∏—Å–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–π",
            font=("Montserrat", 16, "bold"),
            text_color=DarkTheme.PURE_WHITE
        )
        table_title.pack(side='left')
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        self.license_count = ctk.CTkLabel(
            table_header,
            text="–í—Å–µ–≥–æ: 0",
            font=("Inter", 12),
            text_color=DarkTheme.CHAMPAGNE_GOLD
        )
        self.license_count.pack(side='right')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        self.license_table = LicenseTable(table_container)
        self.license_table.pack(fill='both', expand=True, padx=15, pady=(5, 15))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callbacks –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        self.license_table.set_callbacks(
            select=self._on_license_select,
            double_click=self.show_license_details,
            context_menu=self._show_context_menu
        )
    
    def _build_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º"""
        status_container = ctk.CTkFrame(
            self.main_container,
            fg_color=DarkTheme.BG_TERTIARY,
            height=30
        )
        status_container.pack(fill='x', side='bottom')
        
        # –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        self.status_bar = ctk.CTkLabel(
            status_container,
            text="‚ö° –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            font=("Inter", 10),
            text_color=DarkTheme.WARM_GRAY,
            anchor='w'
        )
        self.status_bar.pack(side='left', padx=15, pady=5)
        
        # –í–µ—Ä—Å–∏—è
        version_label = ctk.CTkLabel(
            status_container,
            text="v2.2 Premium",
            font=("Inter", 9),
            text_color=DarkTheme.TEXT_SECONDARY
        )
        version_label.pack(side='right', padx=15, pady=5)
    
    # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================
    
    def _on_filter_change(self, choice):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
        if self.license_table:
            self.license_table.set_filter(choice)
            self._update_license_count()
    
    def _on_search(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        query = self.search_entry.get()
        if self.license_table:
            self.license_table.set_search(query)
            self._update_license_count()
    
    def _on_license_select(self, license):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
        pass
    
    def _show_context_menu(self, license, event):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        menu = ctk.CTkToplevel(self)
        menu.overrideredirect(True)
        menu.configure(fg_color=DarkTheme.GRAPHITE_GRAY)
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        x = self.winfo_pointerx()
        y = self.winfo_pointery()
        menu.geometry(f"160x200+{x}+{y}")
        
        # –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é
        menu_items = [
            ("üîç –î–µ—Ç–∞–ª–∏", lambda: self.show_license_details(license)),
            ("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", lambda: self.edit_license_dialog(license)),
            ("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å", lambda: self.extend_license_dialog(license)),
            ("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", lambda: self.block_license(license)),
            ("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", lambda: self.delete_license(license))
        ]
        
        for text, command in menu_items:
            btn = ctk.CTkButton(
                menu,
                text=text,
                command=lambda cmd=command: [cmd(), menu.destroy()],
                fg_color="transparent",
                hover_color=DarkTheme.JADE_GREEN,
                text_color=DarkTheme.PURE_WHITE,
                anchor="w",
                width=150,
                height=30,
                font=("Inter", 11)
            )
            btn.pack(fill='x', padx=5, pady=2)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–µ–Ω—é
        menu.bind("<FocusOut>", lambda e: menu.destroy())
        menu.focus_force()
    
    # ==================== –ú–ï–¢–û–î–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø UI ====================
    
    def update_statistics(self, stats: Dict[str, Any] = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        if stats is None:
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑ –ª–∏—Ü–µ–Ω–∑–∏–π
            stats = self._calculate_statistics()
        
        if self.stats_panel:
            self.stats_panel.update_stats(stats)
    
    def _calculate_statistics(self) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π"""
        stats = {
            'total': len(self.licenses),
            'active': 0,
            'expired': 0,
            'blocked': 0,
            'inactive': 0,
            'balance': 0.0
        }
        
        for license in self.licenses:
            if hasattr(license, '__dict__'):
                status = getattr(license, 'status', 'created')
                balance = getattr(license, 'last_balance', 0)
                account_type = getattr(license, 'account_type', 'Real')
            else:
                status = license.get('status', 'created')
                balance = license.get('last_balance', 0)
                account_type = license.get('account_type', 'Real')
            
            if status == 'active':
                stats['active'] += 1
            elif status == 'expired':
                stats['expired'] += 1
            elif status == 'blocked':
                stats['blocked'] += 1
            else:
                stats['inactive'] += 1
            
            # –°—á–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
            if account_type == 'Real':
                try:
                    stats['balance'] += float(balance)
                except:
                    pass
        
        return stats
    
    def _update_license_count(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ª–∏—Ü–µ–Ω–∑–∏–π"""
        if hasattr(self, 'license_count') and self.license_table:
            filtered = len(self.license_table.filtered_licenses)
            total = len(self.license_table.licenses)
            
            if filtered < total:
                text = f"–ü–æ–∫–∞–∑–∞–Ω–æ: {filtered} –∏–∑ {total}"
            else:
                text = f"–í—Å–µ–≥–æ: {total}"
            
            self.license_count.configure(text=text)
    
    def _enable_controls(self, enabled: bool):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        state = 'normal' if enabled else 'disabled'
        
        controls = ['refresh_btn', 'create_btn', 'export_btn']
        for control_name in controls:
            if hasattr(self, control_name):
                control = getattr(self, control_name)
                if hasattr(control, 'configure'):
                    try:
                        control.configure(state=state)
                    except:
                        pass
    
    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    def center_window(self, width: int, height: int):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        
        self.geometry(f"{width}x{height}+{x}+{y}")
    
    def set_status(self, text: str, status_type: str = "info"):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_type: –¢–∏–ø —Å—Ç–∞—Ç—É—Å–∞ (info, success, error, loading)
        """
        if hasattr(self, 'status_bar'):
            # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø—É
            color_map = {
                'info': DarkTheme.WARM_GRAY,
                'success': DarkTheme.JADE_GREEN,
                'error': '#FF6B6B',
                'warning': DarkTheme.COPPER_BRONZE,
                'loading': DarkTheme.SOFT_MINT
            }
            
            color = color_map.get(status_type, DarkTheme.WARM_GRAY)
            self.status_bar.configure(text=text, text_color=color)
        
        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"[STATUS] {text}")
    
    def show_loading(self, show: bool):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        
        Args:
            show: True –¥–ª—è –ø–æ–∫–∞–∑–∞, False –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è
        """
        self.is_loading = show
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(self, 'header') and self.header:
            if hasattr(self.header, 'set_loading_state'):
                self.header.set_loading_state(show)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä
        if show:
            self.configure(cursor="wait")
        else:
            self.configure(cursor="")
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._enable_controls(not show)
    
    def show_notification(self, title: str, message: str, notif_type: str = "info"):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            notif_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (info, success, error, warning)
        """
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ messagebox
        # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if notif_type == "error":
            messagebox.showerror(title, message)
        elif notif_type == "warning":
            messagebox.showwarning(title, message)
        elif notif_type == "success":
            messagebox.showinfo(f"‚úÖ {title}", message)
        else:
            messagebox.showinfo(title, message)
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        if hasattr(self, 'config'):
            width = self.winfo_width()
            height = self.winfo_height()
            self.config.set_window_size(width, height)
            self.config.save()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if hasattr(self, 'license_service') and self.license_service:
            if hasattr(self.license_service, 'disconnect'):
                self.license_service.disconnect()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        self.destroy()
        
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        import sys
        sys.exit(0)