"""
–î–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å –ø—Ä–µ–º–∏—É–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
–ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–æ–ª–ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
"""

import customtkinter as ctk
import tkinter as tk
from datetime import datetime, timedelta
from app.dialogs.base_dialog import CustomDialog
from themes.dark_theme import DarkTheme


class ExtendLicenseDialog(CustomDialog):
    """–î–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
    
    def __init__(self, parent, license):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            license: –î–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        """
        self.license = license
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if hasattr(license, '__dict__'):
            self.license_data = license.__dict__
        else:
            self.license_data = license
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        key = self.license_data.get('license_key', 'Unknown')
        short_key = f"{key[:20]}..." if len(key) > 20 else key
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        super().__init__(parent, f"‚è∞ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ: {short_key}", 450, 550)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤)
        self.result = None
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self._create_ui()
    
    def _create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        main_frame = ctk.CTkFrame(
            self,
            fg_color=DarkTheme.BG_SECONDARY,
            corner_radius=12
        )
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º
        scroll_frame = ctk.CTkScrollableFrame(
            main_frame,
            fg_color='transparent',
            scrollbar_button_color=DarkTheme.SCROLLBAR_THUMB,
            scrollbar_button_hover_color=DarkTheme.SCROLLBAR_THUMB_HOVER
        )
        scroll_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–µ–Ω–∑–∏–∏
        self._create_license_info(scroll_frame)
        
        # –í—ã–±–æ—Ä —Å—Ä–æ–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        self._create_extension_options(scroll_frame)
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–π –¥–∞—Ç—ã
        self._create_preview_section(scroll_frame)
        
        # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É (–Ω–µ –≤ —Å–∫—Ä–æ–ª–ª–µ)
        self._create_buttons(main_frame)
    
    def _create_license_info(self, parent):
        """–°–æ–∑–¥–∞—Ç—å –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        info_frame = ctk.CTkFrame(
            parent,
            fg_color=DarkTheme.BG_TERTIARY,
            corner_radius=10
        )
        info_frame.pack(fill='x', padx=10, pady=(10, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞
        header = ctk.CTkFrame(info_frame, fg_color='transparent')
        header.pack(fill='x', padx=15, pady=(12, 8))
        
        ctk.CTkLabel(
            header,
            text="üìã",
            font=(DarkTheme.FONT_FAMILY, 20)
        ).pack(side='left', padx=(0, 8))
        
        ctk.CTkLabel(
            header,
            text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–µ–Ω–∑–∏–∏",
            text_color=DarkTheme.NEON_BLUE,
            font=(DarkTheme.FONT_FAMILY, 13, "bold")
        ).pack(side='left')
        
        # –î–µ—Ç–∞–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏
        details_frame = ctk.CTkFrame(info_frame, fg_color='transparent')
        details_frame.pack(fill='x', padx=15, pady=(0, 12))
        
        # –ö–ª–∏–µ–Ω—Ç
        self._create_info_row(details_frame, "–ö–ª–∏–µ–Ω—Ç:",
                             self.license_data.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω'))
        
        # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        status = self.license_data.get('status', 'unknown')
        status_text = {
            'active': '–ê–∫—Ç–∏–≤–Ω–∞',
            'expired': '–ò—Å—Ç–µ–∫–ª–∞',
            'blocked': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞',
            'created': '–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'
        }.get(status, status.upper())
        
        status_color = {
            'active': DarkTheme.STATUS_ACTIVE,
            'expired': DarkTheme.STATUS_WARNING,
            'blocked': DarkTheme.STATUS_EXPIRED,
            'created': DarkTheme.TEXT_SECONDARY
        }.get(status, DarkTheme.TEXT_PRIMARY)
        
        self._create_info_row(details_frame, "–°—Ç–∞—Ç—É—Å:", status_text, status_color)
        
        # –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expiry_date = self.license_data.get('expiry_date', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
        if expiry_date and expiry_date != '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞':
            try:
                exp_dt = datetime.fromisoformat(expiry_date.replace('Z', '+00:00'))
                days_left = (exp_dt - datetime.now()).days
                
                if days_left > 0:
                    expiry_text = f"{expiry_date[:10]} (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)"
                    color = DarkTheme.STATUS_ACTIVE if days_left > 30 else DarkTheme.STATUS_WARNING
                else:
                    expiry_text = f"{expiry_date[:10]} (–∏—Å—Ç–µ–∫–ª–∞ {abs(days_left)} –¥–Ω. –Ω–∞–∑–∞–¥)"
                    color = DarkTheme.STATUS_EXPIRED
            except:
                expiry_text = expiry_date[:10] if len(expiry_date) > 10 else expiry_date
                color = DarkTheme.TEXT_PRIMARY
        else:
            expiry_text = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            color = DarkTheme.TEXT_SECONDARY
        
        self._create_info_row(details_frame, "–ò—Å—Ç–µ–∫–∞–µ—Ç:", expiry_text, color)
    
    def _create_info_row(self, parent, label: str, value: str, value_color=None):
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        row = ctk.CTkFrame(parent, fg_color='transparent')
        row.pack(fill='x', pady=2)
        
        ctk.CTkLabel(
            row,
            text=label,
            text_color=DarkTheme.TEXT_SECONDARY,
            font=(DarkTheme.FONT_FAMILY, 11),
            width=80,
            anchor='w'
        ).pack(side='left')
        
        ctk.CTkLabel(
            row,
            text=value,
            text_color=value_color or DarkTheme.TEXT_PRIMARY,
            font=(DarkTheme.FONT_FAMILY, 11, "bold")
        ).pack(side='left')
    
    def _create_extension_options(self, parent):
        """–°–æ–∑–¥–∞—Ç—å –æ–ø—Ü–∏–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        ctk.CTkLabel(
            parent,
            text="‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è",
            text_color=DarkTheme.NEON_GREEN,
            font=(DarkTheme.FONT_FAMILY, 13, "bold")
        ).pack(pady=(15, 10))
        
        # –û–ø—Ü–∏–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        options_frame = ctk.CTkFrame(parent, fg_color='transparent')
        options_frame.pack(fill='x', padx=10)
        
        self.months_var = tk.IntVar(value=1)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏-–æ–ø—Ü–∏–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        options = [
            (1, "1 –º–µ—Å—è—Ü", DarkTheme.NEON_BLUE),
            (3, "3 –º–µ—Å—è—Ü–∞", DarkTheme.NEON_GREEN),
            (6, "6 –º–µ—Å—è—Ü–µ–≤", DarkTheme.NEON_YELLOW),
            (12, "12 –º–µ—Å—è—Ü–µ–≤", DarkTheme.NEON_PURPLE)
        ]
        
        for months, text, color in options:
            btn_frame = ctk.CTkFrame(options_frame, fg_color='transparent')
            btn_frame.pack(fill='x', pady=4)
            
            radio = ctk.CTkRadioButton(
                btn_frame,
                text="",
                variable=self.months_var,
                value=months,
                fg_color=color,
                hover_color=color,
                command=self._update_preview,
                width=20
            )
            radio.pack(side='left', padx=(0, 10))
            
            label = ctk.CTkButton(
                btn_frame,
                text=text,
                fg_color=DarkTheme.BG_TERTIARY,
                hover_color=DarkTheme.BG_PRIMARY,
                text_color=DarkTheme.TEXT_PRIMARY,
                anchor='w',
                corner_radius=6,
                command=lambda m=months: self._select_months(m)
            )
            label.pack(side='left', fill='x', expand=True)
    
    def _select_months(self, months: int):
        """–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤"""
        self.months_var.set(months)
        self._update_preview()
    
    def _create_preview_section(self, parent):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        preview_frame = ctk.CTkFrame(
            parent,
            fg_color=DarkTheme.BG_TERTIARY,
            corner_radius=10,
            border_width=2,
            border_color=DarkTheme.NEON_GREEN_DIM
        )
        preview_frame.pack(fill='x', padx=10, pady=(15, 10))
        
        ctk.CTkLabel(
            preview_frame,
            text="üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:",
            text_color=DarkTheme.TEXT_SECONDARY,
            font=(DarkTheme.FONT_FAMILY, 11)
        ).pack(pady=(10, 5))
        
        self.preview_label = ctk.CTkLabel(
            preview_frame,
            text="",
            text_color=DarkTheme.NEON_GREEN,
            font=(DarkTheme.FONT_FAMILY, 16, "bold")
        )
        self.preview_label.pack(pady=(0, 10))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        self._update_preview()
    
    def _update_preview(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–π –¥–∞—Ç—ã"""
        months = self.months_var.get()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∞—Ç—É
        current_expiry = self.license_data.get('expiry_date')
        if current_expiry:
            try:
                base_date = datetime.fromisoformat(current_expiry.replace('Z', '+00:00'))
                # –ï—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Å–µ–≥–æ–¥–Ω—è
                if base_date < datetime.now():
                    base_date = datetime.now()
            except:
                base_date = datetime.now()
        else:
            base_date = datetime.now()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
        new_date = base_date + timedelta(days=months * 30)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = new_date.strftime("%d.%m.%Y")
        days_total = months * 30
        
        self.preview_label.configure(
            text=f"{formatted_date}\n(+{days_total} –¥–Ω–µ–π)"
        )
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        self._pulse_widget(self.preview_label)
    
    def _pulse_widget(self, widget):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–∞"""
        original_color = widget.cget('text_color')
        
        def pulse(step=0):
            if step < 3:
                if step % 2 == 0:
                    widget.configure(text_color=DarkTheme.NEON_GREEN)
                else:
                    widget.configure(text_color=DarkTheme.NEON_GREEN_DIM)
                self.after(150, lambda: pulse(step + 1))
            else:
                widget.configure(text_color=original_color)
        
        pulse()
    
    def _create_buttons(self, parent):
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∫–Ω–æ–ø–∫–∏ —Ç–µ–ø–µ—Ä—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ—Ä–µ–π–º–µ, –∞ –Ω–µ –≤ —Å–∫—Ä–æ–ª–ª–µ
        btn_frame = ctk.CTkFrame(parent, fg_color='transparent')
        btn_frame.pack(side='bottom', fill='x', pady=(10, 0))
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        button_container = ctk.CTkFrame(btn_frame, fg_color='transparent')
        button_container.pack()
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        extend_btn = ctk.CTkButton(
            button_container,
            text="‚úÖ –ü—Ä–æ–¥–ª–∏—Ç—å",
            command=self._on_extend,
            fg_color=DarkTheme.NEON_GREEN,
            hover_color=DarkTheme.NEON_GREEN_DIM,
            text_color=DarkTheme.CHARCOAL_BLACK,
            width=120,
            height=35,
            corner_radius=8,
            font=(DarkTheme.FONT_FAMILY, 12, "bold")
        )
        extend_btn.grid(row=0, column=0, padx=5)
        
        # –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        self._add_glow_effect(extend_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = ctk.CTkButton(
            button_container,
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            command=self._on_cancel,
            fg_color=DarkTheme.BUTTON_SECONDARY,
            hover_color=DarkTheme.BUTTON_SECONDARY_HOVER,
            text_color=DarkTheme.TEXT_PRIMARY,
            width=120,
            height=35,
            corner_radius=8,
            font=(DarkTheme.FONT_FAMILY, 12)
        )
        cancel_btn.grid(row=0, column=1, padx=5)
    
    def _add_glow_effect(self, button):
        """–î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –∫–Ω–æ–ø–∫–µ"""
        def on_enter(e):
            button.configure(border_width=2, border_color=DarkTheme.NEON_GREEN)
        
        def on_leave(e):
            button.configure(border_width=0)
        
        button.bind("<Enter>", on_enter)
        button.bind("<Leave>", on_leave)
    
    def _on_extend(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
        self.result = self.months_var.get()
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        self._animate_out()
    
    def _on_cancel(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        self.result = None
        self._animate_out()