"""
–î–∏–∞–ª–æ–≥ –¥–µ—Ç–∞–ª–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å –ø—Ä–µ–º–∏—É–º –¥–∏–∑–∞–π–Ω–æ–º
–ü–û–õ–ù–´–ô –§–ê–ô–õ –î–õ–Ø –ó–ê–ú–ï–ù–´: FoxterAI_Desktop/app/dialogs/details_dialog.py
–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—á–∞—Ç–∏, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—á–µ—Ç–∞ –∏ –¥–Ω–µ–π
"""

import customtkinter as ctk
from datetime import datetime
import json
from tkinter import filedialog
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from app.dialogs.base_dialog import CustomDialog
from themes.dark_theme import DarkTheme


class LicenseDetailsDialog(CustomDialog):
    """–î–∏–∞–ª–æ–≥ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    
    def __init__(self, parent, license):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            license: –î–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è
        if hasattr(license, '__dict__'):
            self.license_data = license.__dict__
        else:
            self.license_data = license
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        key = self.license_data.get('license_key', 'Unknown')
        short_key = f"{key[:20]}..." if len(key) > 20 else key
        
        super().__init__(parent, f"üìã –î–µ—Ç–∞–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {short_key}", 700, 600)
        
        self._create_ui()
    
    def _create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —Ç–∞–±–∞–º–∏"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self, fg_color=DarkTheme.BG_SECONDARY)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–ª—é—á–æ–º
        self._create_header(main_frame)
        
        # –¢–∞–±—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self._create_tabs(main_frame)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self._create_action_buttons(main_frame)
    
    def _create_header(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –∫–ª—é—á–æ–º –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        header_frame = ctk.CTkFrame(
            parent,
            fg_color=DarkTheme.BG_TERTIARY,
            corner_radius=10
        )
        header_frame.pack(fill='x', padx=15, pady=(15, 10))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–ª—é—á–∞
        key_container = ctk.CTkFrame(header_frame, fg_color='transparent')
        key_container.pack(fill='x', padx=15, pady=15)
        
        # –ö–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏
        key_label = ctk.CTkLabel(
            key_container,
            text="üîë –ö–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏:",
            font=(DarkTheme.FONT_FAMILY, 12),
            text_color=DarkTheme.TEXT_SECONDARY
        )
        key_label.pack(side='left', padx=(0, 10))
        
        key_value = ctk.CTkLabel(
            key_container,
            text=self.license_data.get('license_key', 'N/A'),
            font=(DarkTheme.FONT_FAMILY_MONO, 14, 'bold'),
            text_color=DarkTheme.CHAMPAGNE_GOLD
        )
        key_value.pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        copy_btn = ctk.CTkButton(
            key_container,
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
            width=100,
            height=28,
            fg_color=DarkTheme.BUTTON_SECONDARY,
            hover_color=DarkTheme.BUTTON_SECONDARY_HOVER,
            command=lambda: self._copy_to_clipboard(self.license_data.get('license_key'))
        )
        copy_btn.pack(side='right', padx=(10, 0))
        
        # –°—Ç–∞—Ç—É—Å
        status = self.license_data.get('status', 'unknown')
        status_colors = {
            'active': DarkTheme.STATUS_ACTIVE,
            'expired': DarkTheme.STATUS_EXPIRED,
            'blocked': DarkTheme.STATUS_BLOCKED,
            'created': DarkTheme.STATUS_PENDING
        }
        
        status_display = self._get_status_display(status)
        status_label = ctk.CTkLabel(
            key_container,
            text=status_display,
            font=(DarkTheme.FONT_FAMILY, 12, 'bold'),
            text_color=status_colors.get(status, DarkTheme.TEXT_SECONDARY)
        )
        status_label.pack(side='right', padx=(10, 10))
    
    def _create_tabs(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–æ–≤
        tab_view = ctk.CTkTabview(
            parent,
            fg_color=DarkTheme.BG_SECONDARY,
            segmented_button_fg_color=DarkTheme.BG_TERTIARY,
            segmented_button_selected_color=DarkTheme.JADE_GREEN,
            segmented_button_unselected_color=DarkTheme.BG_TERTIARY,
            segmented_button_selected_hover_color=DarkTheme.SOFT_MINT,
            segmented_button_unselected_hover_color=DarkTheme.BG_HOVER,
            text_color=DarkTheme.TEXT_SECONDARY,
            text_color_disabled=DarkTheme.TEXT_DISABLED
        )
        tab_view.pack(fill='both', expand=True, padx=15, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã
        tab_general = tab_view.add("üìä –û—Å–Ω–æ–≤–Ω–æ–µ")
        tab_client = tab_view.add("üë§ –ö–ª–∏–µ–Ω—Ç")
        tab_technical = tab_view.add("‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ")
        tab_history = tab_view.add("üìù –ò—Å—Ç–æ—Ä–∏—è")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±—ã
        self._fill_general_tab(tab_general)
        self._fill_client_tab(tab_client)
        self._fill_technical_tab(tab_technical)
        self._fill_history_tab(tab_history)
    
    def _fill_general_tab(self, parent):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º
        scroll_frame = ctk.CTkScrollableFrame(
            parent,
            fg_color='transparent',
            scrollbar_button_color=DarkTheme.SCROLLBAR_THUMB,
            scrollbar_button_hover_color=DarkTheme.SCROLLBAR_THUMB_HOVER
        )
        scroll_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
        days_left_display = self._get_proper_days_left_display()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_items = [
            ("üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", self._format_date(self.license_data.get('created_date'))),
            ("‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", f"{self.license_data.get('months', 1)} –º–µ—Å."),
            ("üìÜ –î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", self._format_date(self.license_data.get('activation_date', '-'))),
            ("üìÜ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è", self._format_date(self.license_data.get('expiry_date', '-'))),
            ("‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π", days_left_display),  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            ("ü§ñ –†–æ–±–æ—Ç", self.license_data.get('robot_name') or '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'),
            ("üìà –í–µ—Ä—Å–∏—è —Ä–æ–±–æ—Ç–∞", self.license_data.get('robot_version') or '-'),
            ("üíº –¢–∏–ø —Å—á–µ—Ç–∞", self.license_data.get('account_type', 'Real')),
            ("üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å", self._format_balance(self.license_data.get('last_balance', 0))),
            ("üî¢ –ú–∞–∫—Å. —Å—á–µ—Ç–æ–≤", str(self.license_data.get('max_accounts', 1)))
        ]
        
        for label, value in info_items:
            self._add_info_row(scroll_frame, label, value)
    
    def _fill_client_tab(self, parent):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        scroll_frame = ctk.CTkScrollableFrame(
            parent,
            fg_color='transparent',
            scrollbar_button_color=DarkTheme.SCROLLBAR_THUMB,
            scrollbar_button_hover_color=DarkTheme.SCROLLBAR_THUMB_HOVER
        )
        scroll_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—á–µ—Ç–∞
        account_owner = self._get_proper_account_owner()
        
        client_items = [
            ("üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞", self.license_data.get('client_name') or '-'),
            ("üìû –¢–µ–ª–µ—Ñ–æ–Ω", self.license_data.get('client_contact') or '-'),
            ("üí¨ Telegram", self.license_data.get('client_telegram') or '-'),
            ("üè¶ –í–ª–∞–¥–µ–ª–µ—Ü —Å—á–µ—Ç–∞", account_owner),  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            ("üî¢ –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞", str(self.license_data.get('account_number')) if self.license_data.get('account_number') else '-'),
            ("üè¢ –ë—Ä–æ–∫–µ—Ä", self.license_data.get('broker_name') or '-')
        ]
        
        for label, value in client_items:
            self._add_info_row(scroll_frame, label, value)
        
        # –ó–∞–º–µ—Ç–∫–∏
        notes = self.license_data.get('notes')
        if notes and notes != 'None':
            notes_label = ctk.CTkLabel(
                scroll_frame,
                text="üìù –ó–∞–º–µ—Ç–∫–∏:",
                font=(DarkTheme.FONT_FAMILY, 12, 'bold'),
                text_color=DarkTheme.TEXT_SECONDARY
            )
            notes_label.pack(anchor='w', pady=(15, 5), padx=10)
            
            notes_text = ctk.CTkTextbox(
                scroll_frame,
                height=100,
                fg_color=DarkTheme.BG_TERTIARY,
                text_color=DarkTheme.TEXT_PRIMARY,
                font=(DarkTheme.FONT_FAMILY, 11),
                corner_radius=8
            )
            notes_text.pack(fill='x', pady=(0, 10), padx=10)
            notes_text.insert('1.0', notes)
            notes_text.configure(state='disabled')
    
    def _fill_technical_tab(self, parent):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        scroll_frame = ctk.CTkScrollableFrame(
            parent,
            fg_color='transparent',
            scrollbar_button_color=DarkTheme.SCROLLBAR_THUMB,
            scrollbar_button_hover_color=DarkTheme.SCROLLBAR_THUMB_HOVER
        )
        scroll_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –û—Ç–ø–µ—á–∞—Ç–æ–∫
        fingerprint = self.license_data.get('fingerprint')
        if fingerprint and fingerprint != 'None':
            fp_label = ctk.CTkLabel(
                scroll_frame,
                text="üîê –û—Ç–ø–µ—á–∞—Ç–æ–∫ —Å–∏—Å—Ç–µ–º—ã:",
                font=(DarkTheme.FONT_FAMILY, 12, 'bold'),
                text_color=DarkTheme.TEXT_SECONDARY
            )
            fp_label.pack(anchor='w', pady=(10, 5), padx=10)
            
            fp_text = ctk.CTkTextbox(
                scroll_frame,
                height=60,
                fg_color=DarkTheme.BG_TERTIARY,
                text_color=DarkTheme.TEXT_PRIMARY,
                font=(DarkTheme.FONT_FAMILY_MONO, 10),
                corner_radius=8
            )
            fp_text.pack(fill='x', pady=(0, 15), padx=10)
            fp_text.insert('1.0', self._format_fingerprint(fingerprint))
            fp_text.configure(state='disabled')
        
        tech_items = [
            ("üîè –•–µ—à –æ—Ç–ø–µ—á–∞—Ç–∫–∞", self.license_data.get('fingerprint_hash') or '-'),
            ("üíª –í–µ—Ä—Å–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞", self.license_data.get('terminal_version') or '-'),
            ("üñ•Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", self.license_data.get('os_info') or '-'),
            ("üåê –ü–æ—Å–ª–µ–¥–Ω–∏–π IP –∞–¥—Ä–µ—Å", self.license_data.get('last_ip') or '-'),
            ("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫", str(self.license_data.get('check_count', 0))),
            ("üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", self._format_date(self.license_data.get('last_check'))),
            ("üì° –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", self._format_date(self.license_data.get('last_update'))),
            ("‚ö° –°—á–µ—Ç—á–∏–∫ heartbeat", str(self.license_data.get('heartbeat_count', 0))),
            ("‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫", str(self.license_data.get('failed_checks', 0)))
        ]
        
        for label, value in tech_items:
            self._add_info_row(scroll_frame, label, value)
    
    def _fill_history_tab(self, parent):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π"""
        scroll_frame = ctk.CTkScrollableFrame(
            parent,
            fg_color='transparent',
            scrollbar_button_color=DarkTheme.SCROLLBAR_THUMB,
            scrollbar_button_hover_color=DarkTheme.SCROLLBAR_THUMB_HOVER
        )
        scroll_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞—Ç—ã
        history_items = [
            ("üÜï –°–æ–∑–¥–∞–Ω–∞", self._format_date(self.license_data.get('created_date'))),
            ("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", self._format_date(self.license_data.get('activation_date', '-'))),
            ("üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞", self._format_date(self.license_data.get('last_check', '-'))),
            ("üìç –ü–æ—Å–ª–µ–¥–Ω–∏–π IP", self.license_data.get('last_ip') or '-'),
            ("üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å", self._format_balance(self.license_data.get('last_balance', 0)))
        ]
        
        for label, value in history_items:
            self._add_info_row(scroll_frame, label, value)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        stats_frame = ctk.CTkFrame(
            scroll_frame,
            fg_color=DarkTheme.BG_TERTIARY,
            corner_radius=8
        )
        stats_frame.pack(fill='x', pady=20, padx=10)
        
        stats_label = ctk.CTkLabel(
            stats_frame,
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            font=(DarkTheme.FONT_FAMILY, 12, 'bold'),
            text_color=DarkTheme.CHAMPAGNE_GOLD
        )
        stats_label.pack(pady=(10, 10))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        check_count = self.license_data.get('check_count', 0)
        heartbeat_count = self.license_data.get('heartbeat_count', 0)
        failed_checks = self.license_data.get('failed_checks', 0)
        
        stats_text = f"–ü—Ä–æ–≤–µ—Ä–æ–∫: {check_count} | Heartbeat: {heartbeat_count} | –û—à–∏–±–æ–∫: {failed_checks}"
        
        stats_info = ctk.CTkLabel(
            stats_frame,
            text=stats_text,
            font=(DarkTheme.FONT_FAMILY, 11),
            text_color=DarkTheme.TEXT_SECONDARY
        )
        stats_info.pack(pady=(0, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_label = ctk.CTkLabel(
            scroll_frame,
            text="‚ÑπÔ∏è –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞",
            font=(DarkTheme.FONT_FAMILY, 10),
            text_color=DarkTheme.TEXT_SECONDARY
        )
        info_label.pack(pady=10)
    
    def _add_info_row(self, parent, label, value):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        row_frame = ctk.CTkFrame(parent, fg_color='transparent', height=30)
        row_frame.pack(fill='x', pady=3, padx=10)
        row_frame.pack_propagate(False)
        
        # –ú–µ—Ç–∫–∞
        label_widget = ctk.CTkLabel(
            row_frame,
            text=label,
            font=(DarkTheme.FONT_FAMILY, 11),
            text_color=DarkTheme.TEXT_SECONDARY,
            width=200,
            anchor='w'
        )
        label_widget.pack(side='left')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        value_color = DarkTheme.TEXT_PRIMARY
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if value in ['-', 'N/A', '–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω', None, 'None', '']:
            value_color = DarkTheme.TEXT_SECONDARY
            if value in [None, 'None', '']:
                value = '-'
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ
        elif isinstance(value, str) and '–ò—Å—Ç–µ–∫' in value:
            value_color = DarkTheme.STATUS_EXPIRED
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
        elif '‚àû' in str(value):
            value_color = DarkTheme.STATUS_SUCCESS
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        elif '‚ö†Ô∏è' in str(value):
            value_color = DarkTheme.STATUS_WARNING
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_widget = ctk.CTkLabel(
            row_frame,
            text=str(value),
            font=(DarkTheme.FONT_FAMILY, 11, 'bold'),
            text_color=value_color,
            anchor='w'
        )
        value_widget.pack(side='left', expand=True, fill='x')
    
    def _create_action_buttons(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        button_frame = ctk.CTkFrame(parent, fg_color='transparent')
        button_frame.pack(fill='x', padx=15, pady=(10, 15))
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å
        close_btn = ctk.CTkButton(
            button_frame,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            width=120,
            height=35,
            fg_color=DarkTheme.BUTTON_SECONDARY,
            hover_color=DarkTheme.BUTTON_SECONDARY_HOVER,
            font=(DarkTheme.FONT_FAMILY, 12),
            command=self.destroy
        )
        close_btn.pack(side='right')
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_btn = ctk.CTkButton(
            button_frame,
            text="üì§ –≠–∫—Å–ø–æ—Ä—Ç",
            width=120,
            height=35,
            fg_color=DarkTheme.BUTTON_SECONDARY,
            hover_color=DarkTheme.BUTTON_SECONDARY_HOVER,
            font=(DarkTheme.FONT_FAMILY, 12),
            command=self._export_license
        )
        export_btn.pack(side='right', padx=(0, 10))
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—á–∞—Ç–∏
        
        # –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        status = self.license_data.get('status', 'unknown')
        
        if status == 'created':
            # –î–ª—è –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π - –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            edit_btn = ctk.CTkButton(
                button_frame,
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                width=140,
                height=35,
                fg_color=DarkTheme.BUTTON_PRIMARY,
                hover_color=DarkTheme.BUTTON_PRIMARY_HOVER,
                font=(DarkTheme.FONT_FAMILY, 12),
                command=self._open_edit_dialog
            )
            edit_btn.pack(side='left')
        
        elif status == 'active':
            # –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å
            extend_btn = ctk.CTkButton(
                button_frame,
                text="‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å",
                width=140,
                height=35,
                fg_color=DarkTheme.JADE_GREEN,
                hover_color=DarkTheme.SOFT_MINT,
                text_color=DarkTheme.CHARCOAL_BLACK,
                font=(DarkTheme.FONT_FAMILY, 12),
                command=self._open_extend_dialog
            )
            extend_btn.pack(side='left')
            
            # –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            block_btn = ctk.CTkButton(
                button_frame,
                text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                width=140,
                height=35,
                fg_color=DarkTheme.BUTTON_DANGER,
                hover_color=DarkTheme.BUTTON_DANGER_HOVER,
                font=(DarkTheme.FONT_FAMILY, 12),
                command=self._block_license
            )
            block_btn.pack(side='left', padx=(10, 0))
        
        elif status == 'blocked':
            # –î–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö - –º–æ–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
            unblock_btn = ctk.CTkButton(
                button_frame,
                text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                width=140,
                height=35,
                fg_color=DarkTheme.BUTTON_SUCCESS,
                hover_color=DarkTheme.BUTTON_SUCCESS_HOVER,
                font=(DarkTheme.FONT_FAMILY, 12),
                command=self._unblock_license
            )
            unblock_btn.pack(side='left')
    
    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    def _get_proper_days_left_display(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π"""
        status = self.license_data.get('status', 'unknown')
        
        # –ï—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
        if status == 'created':
            return '‚àû (–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞)'
        
        # –ï—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        if status == 'blocked':
            return '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º days_left_text –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'days_left_text' in self.license_data:
            return self.license_data['days_left_text']
        
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º days_left
        days_left = self.license_data.get('days_left')
        if days_left is not None:
            if days_left == 999 or days_left == -1:
                return '‚àû (–Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞)'
            elif days_left < 0:
                return f'–ò—Å—Ç–µ–∫–ª–∞ {abs(days_left)} –¥–Ω. –Ω–∞–∑–∞–¥'
            elif days_left == 0:
                return '‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!'
            elif days_left <= 7:
                return f'‚ö†Ô∏è {days_left} –¥–Ω.'
            else:
                return f'{days_left} –¥–Ω.'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return '-'
    
    def _get_proper_account_owner(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—á–µ—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º account_owner –∏–∑ –º–æ–¥–µ–ª–∏ License
        account_owner = self.license_data.get('account_owner')
        
        if account_owner and account_owner not in ['None', 'null', '', None]:
            return account_owner
        
        # –ï—Å–ª–∏ —Å—á–µ—Ç –µ—Å—Ç—å –Ω–æ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        account_number = self.license_data.get('account_number')
        if account_number and account_number not in ['None', '', None]:
            return f"–°—á–µ—Ç {account_number}"
        
        # –ï—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
        status = self.license_data.get('status', 'unknown')
        if status == 'created':
            return '–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'
        
        return '-'
    
    def _format_date(self, date_str):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
        if not date_str or date_str in ['-', 'None', None, '']:
            return '-'
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            formats = [
                '%Y-%m-%d %H:%M:%S',
                '%Y-%m-%dT%H:%M:%S.%fZ',
                '%Y-%m-%dT%H:%M:%S',
                '%Y-%m-%d',
                '%d.%m.%Y %H:%M',
                '%d.%m.%Y'
            ]
            
            for fmt in formats:
                try:
                    dt = datetime.strptime(str(date_str), fmt)
                    return dt.strftime('%d.%m.%Y %H:%M')
                except:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return str(date_str)
        except:
            return str(date_str)
    
    def _format_balance(self, balance):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            if balance is None or balance == 'None':
                return '$0.00'
            return f'${float(balance):.2f}'
        except:
            return '$0.00'
    
    def _format_fingerprint(self, fingerprint):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∞"""
        if not fingerprint or fingerprint in ['-', 'None', None]:
            return '-'
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        fp_str = str(fingerprint)
        if len(fp_str) > 80:
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 80 —Å–∏–º–≤–æ–ª–æ–≤
            lines = []
            for i in range(0, len(fp_str), 80):
                lines.append(fp_str[i:i+80])
            return '\n'.join(lines)
        
        return fp_str
    
    def _get_status_display(self, status):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å"""
        status_map = {
            'active': '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞',
            'expired': '‚è∞ –ò—Å—Ç–µ–∫–ª–∞',
            'blocked': 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞',
            'created': '‚è≥ –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'
        }
        return status_map.get(status, f'‚ùì {status}')
    
    def _copy_to_clipboard(self, text):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        if text:
            try:
                self.clipboard_clear()
                self.clipboard_append(text)
                self.update()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ)
                print(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä: {text}")
                
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
                if hasattr(self.master, 'set_status'):
                    self.master.set_status("üìã –ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", "success")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def _export_license(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".json",
                filetypes=[
                    ("JSON —Ñ–∞–π–ª", "*.json"),
                    ("–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", "*.txt"),
                    ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
                ],
                initialfile=f"license_{self.license_data.get('license_key', 'unknown')}.json"
            )
            
            if filename:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                export_data = self.license_data.copy()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
                for key, value in export_data.items():
                    if isinstance(value, datetime):
                        export_data[key] = value.isoformat()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, ensure_ascii=False, indent=2, default=str)
                
                print(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {filename}")
                
                if hasattr(self.master, 'set_status'):
                    self.master.set_status(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {filename}", "success")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            
            if hasattr(self.master, 'show_notification'):
                self.master.show_notification(
                    "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é:\n{str(e)}",
                    "error"
                )
    
    def _open_edit_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
        self.destroy()
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if hasattr(self.master, 'edit_license_dialog'):
            self.master.edit_license_dialog(self.license_data)
    
    def _open_extend_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
        self.destroy()
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        if hasattr(self.master, 'extend_license_dialog'):
            self.master.extend_license_dialog(self.license_data)
    
    def _block_license(self):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é"""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
        self.destroy()
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if hasattr(self.master, 'block_license'):
            self.master.block_license(self.license_data)
    
    def _unblock_license(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é"""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
        self.destroy()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        license_copy = self.license_data.copy()
        license_copy['is_blocked'] = True  # –§–ª–∞–≥ —á—Ç–æ –ª–∏—Ü–µ–Ω–∑–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if hasattr(self.master, 'block_license'):
            self.master.block_license(license_copy)