"""
–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å –ø—Ä–µ–º–∏—É–º –¥–∏–∑–∞–π–Ω–æ–º
"""

import customtkinter as ctk
from app.dialogs.base_dialog import CustomDialog
from themes.dark_theme import DarkTheme


class EditLicenseDialog(CustomDialog):
    """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    
    def __init__(self, parent, license):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            license: –î–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        self.license = license
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if hasattr(license, '__dict__'):
            self.license_data = license.__dict__
        else:
            self.license_data = license
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        key = self.license_data.get('license_key', 'Unknown')
        short_key = f"{key[:20]}..." if len(key) > 20 else key
        
        super().__init__(parent, f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {short_key}", 500, 550)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ª–æ–≥–∞
        self.result = None
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É
        self._create_form()
    
    def _create_form(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self, fg_color=DarkTheme.BG_SECONDARY, corner_radius=10)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content = ctk.CTkScrollableFrame(
            main_frame,
            fg_color='transparent',
            scrollbar_button_color=DarkTheme.BORDER_PRIMARY,
            scrollbar_button_hover_color=DarkTheme.NEON_BLUE_DIM
        )
        content.pack(fill='both', expand=True, padx=15, pady=15)
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        self.fields = {}
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è)
        self._create_info_section(content)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è
        self._create_editable_section(content)
        
        # –ó–∞–º–µ—Ç–∫–∏
        self._create_notes_section(content)
        
        # –ö–Ω–æ–ø–∫–∏
        self._create_buttons()
    
    def _create_info_section(self, parent):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        info_frame = ctk.CTkFrame(parent, fg_color=DarkTheme.BG_TERTIARY, corner_radius=8)
        info_frame.pack(fill='x', pady=(0, 15))
        
        ctk.CTkLabel(
            info_frame,
            text="üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–µ–Ω–∑–∏–∏",
            text_color=DarkTheme.NEON_BLUE,
            font=(DarkTheme.FONT_FAMILY, 13, "bold")
        ).pack(anchor='w', padx=15, pady=(10, 5))
        
        # –ö–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏
        key_frame = ctk.CTkFrame(info_frame, fg_color='transparent')
        key_frame.pack(fill='x', padx=15, pady=5)
        
        ctk.CTkLabel(
            key_frame,
            text="–ö–ª—é—á:",
            text_color=DarkTheme.TEXT_SECONDARY,
            font=(DarkTheme.FONT_FAMILY, 11),
            width=100,
            anchor='w'
        ).pack(side='left')
        
        ctk.CTkLabel(
            key_frame,
            text=self.license_data.get('license_key', 'N/A'),
            text_color=DarkTheme.TEXT_PRIMARY,
            font=(DarkTheme.FONT_FAMILY, 11, "bold")
        ).pack(side='left')
        
        # –°—Ç–∞—Ç—É—Å
        status_frame = ctk.CTkFrame(info_frame, fg_color='transparent')
        status_frame.pack(fill='x', padx=15, pady=5)
        
        ctk.CTkLabel(
            status_frame,
            text="–°—Ç–∞—Ç—É—Å:",
            text_color=DarkTheme.TEXT_SECONDARY,
            font=(DarkTheme.FONT_FAMILY, 11),
            width=100,
            anchor='w'
        ).pack(side='left')
        
        status = self.license_data.get('status', 'unknown')
        status_colors = {
            'active': DarkTheme.STATUS_ACTIVE,
            'expired': DarkTheme.STATUS_WARNING,
            'blocked': DarkTheme.STATUS_EXPIRED,
            'created': DarkTheme.TEXT_SECONDARY
        }
        
        ctk.CTkLabel(
            status_frame,
            text=status.upper(),
            text_color=status_colors.get(status, DarkTheme.TEXT_PRIMARY),
            font=(DarkTheme.FONT_FAMILY, 11, "bold")
        ).pack(side='left')
        
        # –î–∞—Ç—ã
        dates_frame = ctk.CTkFrame(info_frame, fg_color='transparent')
        dates_frame.pack(fill='x', padx=15, pady=(5, 10))
        
        ctk.CTkLabel(
            dates_frame,
            text="–°–æ–∑–¥–∞–Ω–∞:",
            text_color=DarkTheme.TEXT_SECONDARY,
            font=(DarkTheme.FONT_FAMILY, 11),
            width=100,
            anchor='w'
        ).pack(side='left')
        
        ctk.CTkLabel(
            dates_frame,
            text=self.license_data.get('created_date', 'N/A')[:10],
            text_color=DarkTheme.TEXT_PRIMARY,
            font=(DarkTheme.FONT_FAMILY, 11)
        ).pack(side='left')
    
    def _create_editable_section(self, parent):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏"""
        ctk.CTkLabel(
            parent,
            text="üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞",
            text_color=DarkTheme.NEON_GREEN,
            font=(DarkTheme.FONT_FAMILY, 13, "bold")
        ).pack(anchor='w', pady=(10, 10))
        
        # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
        self._create_field(parent, "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:", "client_name",
                          self.license_data.get('client_name', ''))
        
        # –¢–µ–ª–µ—Ñ–æ–Ω
        self._create_field(parent, "–¢–µ–ª–µ—Ñ–æ–Ω:", "client_contact",
                          self.license_data.get('client_contact', ''))
        
        # Telegram
        self._create_field(parent, "Telegram:", "client_telegram",
                          self.license_data.get('client_telegram', ''))
        
        # –í–ª–∞–¥–µ–ª–µ—Ü —Å—á–µ—Ç–∞
        self._create_field(parent, "–í–ª–∞–¥–µ–ª–µ—Ü —Å—á–µ—Ç–∞:", "account_owner",
                          self.license_data.get('account_owner', ''))
    
    def _create_field(self, parent, label: str, key: str, value: str):
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞"""
        ctk.CTkLabel(
            parent,
            text=label,
            text_color=DarkTheme.TEXT_SECONDARY,
            font=(DarkTheme.FONT_FAMILY, 11)
        ).pack(anchor='w', pady=(8, 3))
        
        entry = ctk.CTkEntry(
            parent,
            fg_color=DarkTheme.BG_TERTIARY,
            border_color=DarkTheme.BORDER_PRIMARY,
            text_color=DarkTheme.TEXT_PRIMARY,
            height=32
        )
        entry.pack(fill='x', pady=(0, 5))
        entry.insert(0, value or '')
        
        self.fields[key] = entry
    
    def _create_notes_section(self, parent):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é –∑–∞–º–µ—Ç–æ–∫"""
        ctk.CTkLabel(
            parent,
            text="üìù –ó–∞–º–µ—Ç–∫–∏",
            text_color=DarkTheme.NEON_YELLOW,
            font=(DarkTheme.FONT_FAMILY, 13, "bold")
        ).pack(anchor='w', pady=(15, 8))
        
        self.notes_text = ctk.CTkTextbox(
            parent,
            fg_color=DarkTheme.BG_TERTIARY,
            height=80,
            border_width=1,
            border_color=DarkTheme.BORDER_PRIMARY,
            text_color=DarkTheme.TEXT_PRIMARY
        )
        self.notes_text.pack(fill='x', pady=(0, 10))
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–º–µ—Ç–∫–∏
        current_notes = self.license_data.get('notes', '')
        if current_notes:
            self.notes_text.insert('1.0', current_notes)
    
    def _create_buttons(self):
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        btn_frame = ctk.CTkFrame(self, fg_color='transparent')
        btn_frame.pack(side='bottom', pady=15)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–≤–µ—á–µ–Ω–∏—è
        save_btn = ctk.CTkButton(
            btn_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=self._on_save,
            fg_color=DarkTheme.NEON_GREEN,
            hover_color=DarkTheme.NEON_GREEN_DIM,
            width=120,
            height=35,
            corner_radius=8
        )
        save_btn.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = ctk.CTkButton(
            btn_frame,
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            command=self._on_cancel,
            fg_color=DarkTheme.BUTTON_SECONDARY,
            hover_color=DarkTheme.BUTTON_SECONDARY_HOVER,
            width=120,
            height=35,
            corner_radius=8
        )
        cancel_btn.pack(side='left', padx=5)
    
    def _validate_form(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω
        phone = self.fields['client_contact'].get().strip()
        if phone and not self._validate_phone(phone):
            self._show_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω
        telegram = self.fields['client_telegram'].get().strip()
        if telegram and not self._validate_telegram(telegram):
            self._show_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram!")
            return False
        
        return True
    
    def _validate_phone(self, phone: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        clean = ''.join(c for c in phone if c.isdigit())
        return len(clean) >= 10 or len(clean) == 0
    
    def _validate_telegram(self, telegram: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram username"""
        if not telegram:
            return True
        if telegram.startswith('@'):
            telegram = telegram[1:]
        return len(telegram) >= 3 and telegram.replace('_', '').isalnum()
    
    def _show_error(self, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        error_label = ctk.CTkLabel(
            self,
            text=f"‚ö†Ô∏è {message}",
            text_color=DarkTheme.STATUS_EXPIRED,
            font=(DarkTheme.FONT_FAMILY, 12, "bold"),
            fg_color=DarkTheme.BG_TERTIARY,
            corner_radius=6
        )
        error_label.place(relx=0.5, rely=0.92, anchor='center')
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        self.after(3000, error_label.destroy)
    
    def _on_save(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if not self._validate_form():
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.result = {}
        
        for key, entry in self.fields.items():
            new_value = entry.get().strip()
            old_value = self.license_data.get(key, '')
            
            if new_value != old_value:
                self.result[key] = new_value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–µ—Ç–∫–∏
        new_notes = self.notes_text.get('1.0', 'end-1c').strip()
        old_notes = self.license_data.get('notes', '').strip()
        
        if new_notes != old_notes:
            self.result['notes'] = new_notes
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ
        if not self.result:
            self.result = None
        
        self.destroy()
    
    def _on_cancel(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        self.result = None
        self.destroy()