"""
–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏
–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–±–æ—á–∏–π api_client –≤–º–µ—Å—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
"""

from typing import List, Dict, Optional, Callable, Any
import threading
from datetime import datetime

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô API –∫–ª–∏–µ–Ω—Ç –∏–∑ modules
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

try:
    from modules.api_client import APIClient
except ImportError:
    print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω modules.api_client, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å...")
    try:
        from api_client import APIClient
    except ImportError:
        print("‚ùå APIClient –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        APIClient = None


class LicenseService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LicenseService...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = self._load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç
        self._init_api_client()
        
        # –î–∞–Ω–Ω—ã–µ
        self.licenses: List[Dict] = []
        self.statistics = {}
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_connected = False
        self.last_error = None
        
        # Callbacks
        self.on_connected: Optional[Callable] = None
        self.on_disconnected: Optional[Callable] = None
        self.on_licenses_loaded: Optional[Callable] = None
        self.on_error: Optional[Callable] = None
        
        print("‚úÖ LicenseService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        import configparser
        
        print("üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.ini...")
        
        config = configparser.ConfigParser()
        config.read('config.ini', encoding='utf-8')
        
        conf_dict = {
            'host': config.get('SERVER', 'host', fallback='localhost'),
            'port': config.getint('SERVER', 'port', fallback=3000),
            'protocol': config.get('SERVER', 'protocol', fallback='http'),
            'timeout': config.getint('SERVER', 'timeout', fallback=10),
            'api_key': config.get('SERVER', 'api_key', fallback='')
        }
        
        print(f"üìå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {conf_dict['protocol']}://{conf_dict['host']}:{conf_dict['port']}")
        print(f"üìå API Key: {conf_dict['api_key'][:10]}..." if conf_dict['api_key'] else "‚ö†Ô∏è API Key –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        
        return conf_dict
    
    def _init_api_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API –∫–ª–∏–µ–Ω—Ç"""
        if not APIClient:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: APIClient –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            self.api_client = None
            return
        
        try:
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
            self.api_client = APIClient(
                self.config['host'],
                self.config['port'],
                self.config['protocol'],
                self.config['timeout']
            )
            
            print(f"‚úÖ API –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è {self.config['protocol']}://{self.config['host']}:{self.config['port']}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            self.api_client = None
    
    def set_callbacks(self, on_connected=None, on_disconnected=None,
                      on_licenses_loaded=None, on_error=None):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback —Ñ—É–Ω–∫—Ü–∏–∏
        
        Args:
            on_connected: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            on_disconnected: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            on_licenses_loaded: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–π
            on_error: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        print("üìé –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callbacks...")
        self.on_connected = on_connected
        self.on_disconnected = on_disconnected
        self.on_licenses_loaded = on_licenses_loaded
        self.on_error = on_error
    
    def connect(self) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        print("\nüîå === –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –°–ï–†–í–ï–†–£ ===")
        
        if not self.api_client:
            print("‚ùå API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            self.is_connected = False
            self.last_error = "API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            if self.on_error:
                self.on_error(self.last_error)
            
            return False
        
        try:
            print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
            print(f"üì° URL: {self.config['protocol']}://{self.config['host']}:{self.config['port']}")
            print(f"üîë API Key: {self.config['api_key'][:20]}..." if len(self.config['api_key']) > 20 else f"üîë API Key: {self.config['api_key']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            connection_result = self.api_client.test_connection()
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç test_connection: {connection_result}")
            
            if connection_result:
                print("‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!")
                self.is_connected = True
                self.last_error = None
                
                if self.on_connected:
                    print("üîî –í—ã–∑—ã–≤–∞–µ–º on_connected callback")
                    self.on_connected()
                
                return True
            else:
                print("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø")
                print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   1. –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                print("   2. –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                print("   3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å/–ø–æ—Ä—Ç")
                
                self.is_connected = False
                self.last_error = "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á"
                
                if self.on_disconnected:
                    print("üîî –í—ã–∑—ã–≤–∞–µ–º on_disconnected callback")
                    self.on_disconnected()
                
                return False
            
        except Exception as e:
            print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            
            self.is_connected = False
            self.last_error = str(e)
            
            if self.on_error:
                print("üîî –í—ã–∑—ã–≤–∞–µ–º on_error callback")
                self.on_error(str(e))
            
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
        self.is_connected = False
        
        if self.on_disconnected:
            self.on_disconnected()
    
    def get_licenses(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Ü–µ–Ω–∑–∏–π
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–π
        """
        print("\nüìã === –ü–û–õ–£–ß–ï–ù–ò–ï –õ–ò–¶–ï–ù–ó–ò–ô ===")
        
        if not self.api_client:
            print("‚ùå API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
        
        if not self.is_connected:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
            if not self.connect():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                return []
        
        try:
            print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–π...")
            print(f"üåê Endpoint: {self.config['protocol']}://{self.config['host']}:{self.config['port']}/api/licenses")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏ —á–µ—Ä–µ–∑ API
            licenses = self.api_client.get_licenses()
            
            print(f"üì¶ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(licenses)}")
            
            if licenses is not None:
                print(f"‚úÖ –ü–û–õ–£–ß–ï–ù–û {len(licenses)} –õ–ò–¶–ï–ù–ó–ò–ô!")
                
                # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if len(licenses) > 0:
                    print(f"üìù –ü—Ä–∏–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏: {licenses[0]}")
                
                self.licenses = licenses
                
                # –í—ã–∑—ã–≤–∞–µ–º callback
                if self.on_licenses_loaded:
                    print("üîî –í—ã–∑—ã–≤–∞–µ–º on_licenses_loaded callback")
                    self.on_licenses_loaded(licenses)
                
                return licenses
            else:
                print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω None –æ—Ç API")
                return []
            
        except Exception as e:
            print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–π: {e}")
            import traceback
            traceback.print_exc()
            
            if self.on_error:
                self.on_error(str(e))
            
            return []
    
    def get_statistics(self) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏—Ü–µ–Ω–∑–∏—è–º
        """
        if not self.api_client or not self.is_connected:
            return {}
        
        try:
            print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            stats = self.api_client.get_statistics()
            self.statistics = stats
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
            return stats
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def create_license(self, data: Dict) -> Dict:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
        """
        if not self.api_client or not self.is_connected:
            return {'success': False, 'error': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'}
        
        try:
            print(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è {data.get('client_name', 'Unknown')}")
            
            # –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            # owner_name –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–æ–±–æ—Ç–æ–º
            result = self.api_client.create_license(
                client_name=data.get('client_name', ''),
                client_contact=data.get('phone', ''),
                client_telegram=data.get('telegram', ''),
                months=data.get('months', 1),
                notes=data.get('notes', '')
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            )
            
            print(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è: {result}")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def update_license(self, license_key: str, updates: Dict) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é
        
        Args:
            license_key: –ö–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏
            updates: –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.api_client or not self.is_connected:
            return False
        
        try:
            print(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ {license_key[:12]}...")
            result = self.api_client.update_license(license_key, **updates)
            success = result.get('success', False)
            print(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç: {success}")
            return success
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
            return False
    
    def delete_license(self, license_key: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é
        
        Args:
            license_key: –ö–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.api_client or not self.is_connected:
            return False
        
        try:
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ {license_key[:12]}...")
            result = self.api_client.delete_license(license_key)
            success = result.get('success', False)
            print(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç: {success}")
            return success
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
            return False
    
    def extend_license(self, license_key: str, months: int) -> bool:
        """
        –ü—Ä–æ–¥–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é
        
        Args:
            license_key: –ö–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏
            months: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.api_client or not self.is_connected:
            return False
        
        try:
            print(f"‚è∞ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ {license_key[:12]}... –Ω–∞ {months} –º–µ—Å.")
            result = self.api_client.extend_license(license_key, months)
            success = result.get('success', False)
            print(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç: {success}")
            return success
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
            return False
    
    def block_license(self, license_key: str) -> bool:
        """
        –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é
        
        Args:
            license_key: –ö–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        print(f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ {license_key[:12]}...")
        return self.update_license(license_key, {'status': 'blocked'})
    
    def unblock_license(self, license_key: str) -> bool:
        """
        –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é
        
        Args:
            license_key: –ö–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        print(f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ {license_key[:12]}...")
        return self.update_license(license_key, {'status': 'active'})
    
    def get_license_by_key(self, license_key: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –ø–æ –∫–ª—é—á—É
        
        Args:
            license_key: –ö–ª—é—á –ª–∏—Ü–µ–Ω–∑–∏–∏
            
        Returns:
            Optional[Dict]: –î–∞–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏–ª–∏ None
        """
        for license in self.licenses:
            if license.get('license_key') == license_key:
                return license
        return None
    
    def refresh(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        self.get_licenses()
        self.get_statistics()