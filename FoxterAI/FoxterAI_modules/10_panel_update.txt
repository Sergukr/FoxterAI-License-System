//+------------------------------------------------------------------+
//|                                           10_panel_update.mqh   |
//|                    Обновление панели для FoxterAI v1.6          |
//|                        ИСПРАВЛЕННАЯ ВЕРСИЯ БЕЗ ДУБЛИКАТОВ       |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| ОБНОВЛЕНИЕ ИНТЕРАКТИВНОЙ ПАНЕЛИ С ДИАГНОСТИКОЙ                  |
//+------------------------------------------------------------------+
void UpdateInteractivePanel() {
    //--- Получаем масштаб DPI
    double dpiScale = GetDPIScale();
    
    //--- Обновление статуса лицензии
    string licenseText = "Лиц: " + GetLicenseStatusText();
    color licenseColor = GetLicenseStatusColor();
    ObjectSetString(0, PANEL_PREFIX + "LicenseStatus", OBJPROP_TEXT, licenseText);
    ObjectSetInteger(0, PANEL_PREFIX + "LicenseStatus", OBJPROP_COLOR, licenseColor);
    
    //--- Обновление информации о тренде
    string trendText = "Тренд: ";
    color trendColor;
    if(g_TrendState == TREND_BUY) {
        trendText += "BUY";
        trendColor = C'76,175,80';  // Зеленый
    } else if(g_TrendState == TREND_SELL) {
        trendText += "SELL";
        trendColor = C'244,67,54';  // Красный
    } else {
        trendText += "НЕТ";
        trendColor = C'158,158,158';  // Серый
    }
    ObjectSetString(0, PANEL_PREFIX + "TrendInfo", OBJPROP_TEXT, trendText);
    ObjectSetInteger(0, PANEL_PREFIX + "TrendInfo", OBJPROP_COLOR, trendColor);
    
    //--- Обновление статуса (с учетом лицензии)
    string statusText = g_BotEnabled ? "Активен" : "Остановлен";
    color statusColor = g_BotEnabled ? C'76,175,80' : C'244,67,54';
    
    //--- Если лицензия невалидна, меняем статус
    if(!IsLicenseValidForTrading()) {
        statusText = "Заблокирован";
        statusColor = C'244,67,54';
    }
    
    ObjectSetString(0, PANEL_PREFIX + "Status", OBJPROP_TEXT, statusText);
    ObjectSetInteger(0, PANEL_PREFIX + "Status", OBJPROP_COLOR, statusColor);
    
    //--- Обновление кнопки Start/Stop
    ObjectSetString(0, PANEL_PREFIX + "BtnStartStop", OBJPROP_TEXT, 
                   g_BotEnabled ? "STOP" : "START");
    ObjectSetInteger(0, PANEL_PREFIX + "BtnStartStop", OBJPROP_BGCOLOR, 
                    g_BotEnabled ? C'198,40,40' : C'46,125,50');
    
    //--- ИНФОРМАЦИЯ О BUY СЕРИИ
    string buyText = FormatSeriesInfo(OP_BUY);
    color buyColor = GetSeriesColor(OP_BUY);
    ObjectSetString(0, PANEL_PREFIX + "InfoBuy", OBJPROP_TEXT, buyText);
    ObjectSetInteger(0, PANEL_PREFIX + "InfoBuy", OBJPROP_COLOR, buyColor);
    
    //--- ТП Buy серии в деньгах (НОВАЯ СТРОКА!)
    if(g_BuySeries.active && g_BuySeries.count > 0) {
        string buyTPText = "Цель Buy: " + FormatTargetProfit(OP_BUY);
        color buyTPColor = C'76,175,80';  // Зеленый для целевого TP
        ObjectSetString(0, PANEL_PREFIX + "InfoBuyTP", OBJPROP_TEXT, buyTPText);
        ObjectSetInteger(0, PANEL_PREFIX + "InfoBuyTP", OBJPROP_COLOR, buyTPColor);
    } else {
        ObjectSetString(0, PANEL_PREFIX + "InfoBuyTP", OBJPROP_TEXT, "");
    }
    
    //--- ИНФОРМАЦИЯ О SELL СЕРИИ
    string sellText = FormatSeriesInfo(OP_SELL);
    color sellColor = GetSeriesColor(OP_SELL);
    ObjectSetString(0, PANEL_PREFIX + "InfoSell", OBJPROP_TEXT, sellText);
    ObjectSetInteger(0, PANEL_PREFIX + "InfoSell", OBJPROP_COLOR, sellColor);
    
    //--- ТП Sell серии в деньгах (НОВАЯ СТРОКА!)
    if(g_SellSeries.active && g_SellSeries.count > 0) {
        string sellTPText = "Цель Sell: " + FormatTargetProfit(OP_SELL);
        color sellTPColor = C'244,67,54';  // Красный для целевого TP
        ObjectSetString(0, PANEL_PREFIX + "InfoSellTP", OBJPROP_TEXT, sellTPText);
        ObjectSetInteger(0, PANEL_PREFIX + "InfoSellTP", OBJPROP_COLOR, sellTPColor);
    } else {
        ObjectSetString(0, PANEL_PREFIX + "InfoSellTP", OBJPROP_TEXT, "");
    }
    
    //--- Обновление статистики прибыли
    UpdateProfitStatistics();
    
    //--- Обновление информации о счете
    double balance = AccountBalance();
    double equity = AccountEquity();
    string accountText = "Баланс/Эквити: $" + DoubleToString(balance, 2) + 
                        " / $" + DoubleToString(equity, 2);
    ObjectSetString(0, PANEL_PREFIX + "AccountInfo", OBJPROP_TEXT, accountText);
    
    //--- Обновление просадки
    double drawdown = 0;
    double drawdownPercent = 0;
    if(balance > equity) {
        drawdown = balance - equity;
        drawdownPercent = (drawdown / balance) * 100;
    }
    
    string drawdownText = "Просадка: ";
    if(drawdown > 0) {
        drawdownText += "$" + DoubleToString(drawdown, 2) + 
                       " (" + DoubleToString(drawdownPercent, 1) + "%)";
        ObjectSetInteger(0, PANEL_PREFIX + "DrawdownInfo", OBJPROP_COLOR, C'244,67,54');
    } else {
        drawdownText += "$0.00 (0.0%)";
        ObjectSetInteger(0, PANEL_PREFIX + "DrawdownInfo", OBJPROP_COLOR, C'224,224,224');
    }
    ObjectSetString(0, PANEL_PREFIX + "DrawdownInfo", OBJPROP_TEXT, drawdownText);
}

//+------------------------------------------------------------------+
//| ФОРМАТИРОВАНИЕ ИНФОРМАЦИИ О СЕРИИ                               |
//+------------------------------------------------------------------+
string FormatSeriesInfo(int orderType) {
    bool isActive = (orderType == OP_BUY) ? g_BuySeries.active : g_SellSeries.active;
    int count = (orderType == OP_BUY) ? g_BuySeries.count : g_SellSeries.count;
    double totalLot = (orderType == OP_BUY) ? g_BuySeries.totalLot : g_SellSeries.totalLot;
    double lastPrice = (orderType == OP_BUY) ? g_BuySeries.lastPrice : g_SellSeries.lastPrice;
    
    string prefix = (orderType == OP_BUY) ? "Buy: " : "Sell: ";
    
    if(!isActive || count == 0) {
        return prefix + "нет позиций";
    }
    
    //--- Считаем прибыль серии
    double seriesProfit = 0;
    for(int i = 0; i < OrdersTotal(); i++) {
        if(!OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) continue;
        if(OrderSymbol() != Symbol()) continue;
        if(OrderMagicNumber() != MagicNumber) continue;
        if(OrderType() == orderType) {
            seriesProfit += OrderProfit() + OrderSwap() + OrderCommission();
        }
    }
    
    //--- Основная информация (компактно)
    string result = prefix + IntegerToString(count) + " орд";
    
    //--- Добавляем лот
    result += " | " + DoubleToString(totalLot, 2) + " лот";
    
    //--- Добавляем прибыль/убыток
    if(seriesProfit >= 0) {
        result += " | +$" + DoubleToString(seriesProfit, 2);
    } else {
        result += " | -$" + DoubleToString(MathAbs(seriesProfit), 2);
    }
    
    //--- Диагностика lastPrice только если есть проблема
    if(lastPrice <= 0 && count > 0) {
        result += " | ERR!";
    }
    
    return result;
}

//+------------------------------------------------------------------+
//| ФОРМАТИРОВАНИЕ ЦЕЛЕВОЙ ПРИБЫЛИ - НОВАЯ ФУНКЦИЯ                  |
//+------------------------------------------------------------------+
string FormatTargetProfit(int orderType) {
    double balanceAtStart = (orderType == OP_BUY) ? 
                            g_BuySeries.balanceAtStart : 
                            g_SellSeries.balanceAtStart;
    
    //--- Рассчитываем целевую прибыль
    double targetProfit = balanceAtStart * (g_BasketProfitPercent / 100.0);
    
    //--- Рассчитываем текущую прибыль серии
    double currentProfit = 0;
    for(int i = 0; i < OrdersTotal(); i++) {
        if(!OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) continue;
        if(OrderSymbol() != Symbol()) continue;
        if(OrderMagicNumber() != MagicNumber) continue;
        if(OrderType() != orderType) continue;
        
        currentProfit += OrderProfit() + OrderSwap() + OrderCommission();
    }
    
    //--- Возвращаем форматированную строку
    string result = "$" + DoubleToString(targetProfit, 2);
    
    //--- Добавляем процент достижения цели
    if(targetProfit > 0) {
        double progress = (currentProfit / targetProfit) * 100;
        result += " (" + DoubleToString(progress, 0) + "%)";
    }
    
    return result;
}

//+------------------------------------------------------------------+
//| ПОЛУЧЕНИЕ ЦВЕТА СЕРИИ                                            |
//+------------------------------------------------------------------+
color GetSeriesColor(int orderType) {
    bool isActive = (orderType == OP_BUY) ? g_BuySeries.active : g_SellSeries.active;
    double lastPrice = (orderType == OP_BUY) ? g_BuySeries.lastPrice : g_SellSeries.lastPrice;
    
    if(!isActive) {
        return C'224,224,224'; // Серый для неактивной
    }
    
    if(lastPrice <= 0) {
        return C'255,152,0'; // Оранжевый при ошибке
    }
    
    //--- Считаем прибыль
    double profit = 0;
    for(int i = 0; i < OrdersTotal(); i++) {
        if(!OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) continue;
        if(OrderSymbol() != Symbol()) continue;
        if(OrderMagicNumber() != MagicNumber) continue;
        if(OrderType() == orderType) {
            profit += OrderProfit() + OrderSwap() + OrderCommission();
        }
    }
    
    return profit >= 0 ? C'76,175,80' : C'244,67,54';
}

//+------------------------------------------------------------------+
//| ОБНОВЛЕНИЕ СТАТИСТИКИ ПРИБЫЛИ                                    |
//+------------------------------------------------------------------+
void UpdateProfitStatistics() {
    //--- Текущее время
    datetime now = TimeCurrent();
    MqlDateTime dt;
    TimeToStruct(now, dt);
    
    //--- Начало периодов
    datetime todayStart = StringToTime(TimeToString(now, TIME_DATE) + " 00:00");
    datetime yesterdayStart = todayStart - 86400;
    datetime yesterdayEnd = todayStart - 1;
    
    //--- Начало недели (понедельник)
    int dayOfWeek = dt.day_of_week;
    if(dayOfWeek == 0) dayOfWeek = 7; // Воскресенье = 7
    datetime weekStart = todayStart - (dayOfWeek - 1) * 86400;
    
    //--- Начало месяца
    datetime monthStart = StringToTime(IntegerToString(dt.year) + "." + 
                                      IntegerToString(dt.mon) + ".01 00:00");
    
    //--- Считаем прибыль по периодам
    double profitToday = 0;
    double profitYesterday = 0;
    double profitWeek = 0;
    double profitMonth = 0;
    
    //--- Проходим по истории
    for(int i = OrdersHistoryTotal() - 1; i >= 0; i--) {
        if(!OrderSelect(i, SELECT_BY_POS, MODE_HISTORY)) continue;
        if(OrderSymbol() != Symbol()) continue;
        if(OrderMagicNumber() != MagicNumber) continue;
        if(OrderType() != OP_BUY && OrderType() != OP_SELL) continue;
        
        datetime closeTime = OrderCloseTime();
        double profit = OrderProfit() + OrderSwap() + OrderCommission();
        
        //--- Прибыль за месяц
        if(closeTime >= monthStart) {
            profitMonth += profit;
            
            //--- Прибыль за неделю
            if(closeTime >= weekStart) {
                profitWeek += profit;
                
                //--- Прибыль за сегодня
                if(closeTime >= todayStart) {
                    profitToday += profit;
                }
                //--- Прибыль за вчера
                else if(closeTime >= yesterdayStart && closeTime <= yesterdayEnd) {
                    profitYesterday += profit;
                }
            }
        }
        
        //--- Не идем слишком далеко в историю
        if(closeTime < monthStart) break;
    }
    
    //--- Обновляем метки
    string todayText = "Сегодня: " + FormatProfit(profitToday);
    ObjectSetString(0, PANEL_PREFIX + "ProfitToday", OBJPROP_TEXT, todayText);
    ObjectSetInteger(0, PANEL_PREFIX + "ProfitToday", OBJPROP_COLOR, 
                    profitToday >= 0 ? C'76,175,80' : C'244,67,54');
    
    string yesterdayText = "Вчера: " + FormatProfit(profitYesterday);
    ObjectSetString(0, PANEL_PREFIX + "ProfitYesterday", OBJPROP_TEXT, yesterdayText);
    ObjectSetInteger(0, PANEL_PREFIX + "ProfitYesterday", OBJPROP_COLOR, 
                    profitYesterday >= 0 ? C'76,175,80' : C'244,67,54');
    
    string weekText = "Неделя: " + FormatProfit(profitWeek);
    ObjectSetString(0, PANEL_PREFIX + "ProfitWeek", OBJPROP_TEXT, weekText);
    ObjectSetInteger(0, PANEL_PREFIX + "ProfitWeek", OBJPROP_COLOR, 
                    profitWeek >= 0 ? C'76,175,80' : C'244,67,54');
    
    string monthText = "Месяц: " + FormatProfit(profitMonth);
    ObjectSetString(0, PANEL_PREFIX + "ProfitMonth", OBJPROP_TEXT, monthText);
    ObjectSetInteger(0, PANEL_PREFIX + "ProfitMonth", OBJPROP_COLOR, 
                    profitMonth >= 0 ? C'76,175,80' : C'244,67,54');
}

//+------------------------------------------------------------------+
//| ФОРМАТИРОВАНИЕ ПРИБЫЛИ                                           |
//+------------------------------------------------------------------+
string FormatProfit(double profit) {
    if(profit >= 0) {
        return "+$" + DoubleToString(profit, 2);
    } else {
        return "-$" + DoubleToString(MathAbs(profit), 2);
    }
}

//+------------------------------------------------------------------+
//| ПЕРЕМЕЩЕНИЕ ПАНЕЛИ                                               |
//+------------------------------------------------------------------+
void MovePanel(int newX, int newY) {
    int deltaX = newX - g_PanelPosX;
    int deltaY = newY - g_PanelPosY;
    
    g_PanelPosX = newX;
    g_PanelPosY = newY;
    
    //--- Перемещаем все объекты панели
    for(int i = 0; i < ObjectsTotal(); i++) {
        string objName = ObjectName(i);
        if(StringFind(objName, PANEL_PREFIX) == 0) {
            int objX = (int)ObjectGetInteger(0, objName, OBJPROP_XDISTANCE);
            int objY = (int)ObjectGetInteger(0, objName, OBJPROP_YDISTANCE);
            ObjectSetInteger(0, objName, OBJPROP_XDISTANCE, objX + deltaX);
            ObjectSetInteger(0, objName, OBJPROP_YDISTANCE, objY + deltaY);
        }
    }
    
    ChartRedraw();
}

//+------------------------------------------------------------------+
//| ПРОВЕРКА ПОПАДАНИЯ МЫШИ НА ПАНЕЛЬ                               |
//+------------------------------------------------------------------+
bool IsMouseOverPanel(int mouseX, int mouseY) {
    double dpiScale = GetDPIScale();
    int panelWidth = (int)(PANEL_WIDTH * dpiScale);
    int panelHeight = (int)(PANEL_HEIGHT * dpiScale);
    
    return (mouseX >= g_PanelPosX && mouseX <= g_PanelPosX + panelWidth &&
            mouseY >= g_PanelPosY && mouseY <= g_PanelPosY + panelHeight);
}

//+------------------------------------------------------------------+
//| ПОЛУЧИТЬ РАССТОЯНИЕ ДО СЛЕДУЮЩЕГО УРОВНЯ                        |
//+------------------------------------------------------------------+
double GetPointsToNextLevel(int orderType) {
    // ВАЖНО: Вызываем функцию из 4_series_functions.mqh, а не дублируем её здесь!
    double distance = GetDistanceToNextGrid(orderType);
    if(distance < 0) return 0; // Ошибка данных
    return distance / Point;
}

//+------------------------------------------------------------------+
//| ОБНОВЛЕНИЕ СТАТИСТИКИ                                            |
//+------------------------------------------------------------------+
void UpdateStatistics() {
    //--- Обновляется автоматически через UpdateProfitStatistics()
}

//+------------------------------------------------------------------+
//| ПРОВЕРКА НАЛИЧИЯ НАШИХ ОРДЕРОВ                                  |
//+------------------------------------------------------------------+
bool HasOurOrders() {
    for(int i = 0; i < OrdersTotal(); i++) {
        if(!OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) continue;
        if(OrderSymbol() != Symbol()) continue;
        if(OrderMagicNumber() != MagicNumber) continue;
        if(OrderType() == OP_BUY || OrderType() == OP_SELL) {
            return true;
        }
    }
    return false;
}

//+------------------------------------------------------------------+
//| СОХРАНЕНИЕ НАСТРОЕК                                              |
//+------------------------------------------------------------------+
void SaveSettings() {
    //--- В ТЕСТЕРЕ НЕ СОХРАНЯЕМ НАСТРОЙКИ - ИСПОЛЬЗУЕМ ТОЛЬКО ВХОДНЫЕ ПАРАМЕТРЫ
    if(IsTesting() || IsOptimization() || IsVisualMode()) {
        Print("Работа в тестере - настройки не сохраняются, используются входные параметры");
        return;
    }
    
    //--- Дополнительная проверка по времени (на случай если функции выше не сработали)
    datetime currentTime = TimeCurrent();
    datetime localTime = TimeLocal();
    if(MathAbs(currentTime - localTime) > 31536000) {
        return; // Вероятно тестер
    }
    
    //--- Создаем уникальный префикс для текущей пары и магика
    string pairPrefix = "FX_" + Symbol() + "_" + IntegerToString(MagicNumber) + "_";
    
    //--- Сохраняем флаг что настройки уже были сохранены
    GlobalVariableSet(pairPrefix + "SettingsExist", 1);
    
    //--- Сохраняем все настройки
    GlobalVariableSet(pairPrefix + "BotEnabled", g_BotEnabled ? 1 : 0);
    GlobalVariableSet(pairPrefix + "TradeDirection", g_TradeDirection);
    GlobalVariableSet(pairPrefix + "MaxOrdersBuy", g_MaxOrdersBuy);
    GlobalVariableSet(pairPrefix + "MaxOrdersSell", g_MaxOrdersSell);
    GlobalVariableSet(pairPrefix + "BasketProfitPercent", g_BasketProfitPercent);
    GlobalVariableSet(pairPrefix + "BasketType", g_BasketType);
    GlobalVariableSet(pairPrefix + "BasketAfterN", g_BasketAfterN);
    
    //--- НЕ сохраняем эти параметры - они остаются из входных
    // FirstLot, MartinCoeff, GridStepPercent, UseImpulse
}

//+------------------------------------------------------------------+
//| ЗАГРУЗКА НАСТРОЕК С УМНОЙ ЛОГИКОЙ                               |
//+------------------------------------------------------------------+
void LoadSettings() {
    //--- В ТЕСТЕРЕ ВСЕГДА ИСПОЛЬЗУЕМ ВХОДНЫЕ ПАРАМЕТРЫ
    if(IsTesting() || IsOptimization() || IsVisualMode()) {
        Print("РАБОТА В ТЕСТЕРЕ - используются только входные параметры советника");
        // Берем настройки из входных параметров (они уже загружены в глобальные переменные)
        // g_BotEnabled уже установлен из EnableTrading
        // g_TradeDirection уже установлен из TradeDirection
        // g_MaxOrdersBuy уже установлен из MaxOrdersBuy
        // g_MaxOrdersSell уже установлен из MaxOrdersSell
        // g_BasketProfitPercent уже установлен из BasketProfitPercent
        // g_BasketType уже установлен из BasketType
        // g_BasketAfterN уже установлен из BasketAfterN
        
        // Для тестера всегда включаем робота если это указано во входных параметрах
        // Это позволит начать торговлю сразу без необходимости нажимать кнопки
        Print("Настройки тестера: BotEnabled=", g_BotEnabled, 
              ", Direction=", g_TradeDirection,
              ", MaxBuy=", g_MaxOrdersBuy,
              ", MaxSell=", g_MaxOrdersSell,
              ", Profit%=", g_BasketProfitPercent,
              ", BasketType=", g_BasketType);
        return;
    }
    
    //--- ДЛЯ РЕАЛЬНОГО РЕЖИМА - ОБЫЧНАЯ ЛОГИКА
    string pairPrefix = "FX_" + Symbol() + "_" + IntegerToString(MagicNumber) + "_";
    
    //--- 1. Если есть открытые ордера - это восстановление после сбоя
    if(HasOurOrders()) {
        Print("ОБНАРУЖЕНЫ ОТКРЫТЫЕ ОРДЕРА - режим восстановления после сбоя!");
        
        //--- Загружаем сохраненные настройки если они есть
        if(GlobalVariableCheck(pairPrefix + "SettingsExist")) {
            Print("Загружаем сохраненные настройки для управления существующими ордерами");
            Print("Пара: ", Symbol(), ", MagicNumber: ", MagicNumber);
            
            if(GlobalVariableCheck(pairPrefix + "BotEnabled"))
                g_BotEnabled = GlobalVariableGet(pairPrefix + "BotEnabled") > 0;
            if(GlobalVariableCheck(pairPrefix + "TradeDirection"))
                g_TradeDirection = (ENUM_TRADE_DIRECTION)GlobalVariableGet(pairPrefix + "TradeDirection");
            if(GlobalVariableCheck(pairPrefix + "MaxOrdersBuy"))
                g_MaxOrdersBuy = (int)GlobalVariableGet(pairPrefix + "MaxOrdersBuy");
            if(GlobalVariableCheck(pairPrefix + "MaxOrdersSell"))
                g_MaxOrdersSell = (int)GlobalVariableGet(pairPrefix + "MaxOrdersSell");
            if(GlobalVariableCheck(pairPrefix + "BasketProfitPercent"))
                g_BasketProfitPercent = GlobalVariableGet(pairPrefix + "BasketProfitPercent");
            if(GlobalVariableCheck(pairPrefix + "BasketType"))
                g_BasketType = (ENUM_BASKET_TYPE)GlobalVariableGet(pairPrefix + "BasketType");
            if(GlobalVariableCheck(pairPrefix + "BasketAfterN"))
                g_BasketAfterN = (int)GlobalVariableGet(pairPrefix + "BasketAfterN");
        }
        else {
            Print("ВНИМАНИЕ: Нет сохраненных настроек для пары ", Symbol(), ", используем входные параметры для управления ордерами");
            g_BotEnabled = true; // Включаем робота при наличии ордеров
            SaveSettings(); // Сохраняем текущие для будущего
        }
    }
    //--- 2. Нет ордеров - проверяем, первый ли это запуск
    else if(!GlobalVariableCheck(pairPrefix + "SettingsExist")) {
        //--- Первый запуск - используем входные параметры
        Print("ПЕРВЫЙ ЗАПУСК на паре ", Symbol(), " - используем входные параметры из настроек советника");
        g_BotEnabled = true; // Робот включен при первом запуске!
        SaveSettings(); // Сохраняем для будущих запусков
    }
    //--- 3. Нет ордеров, но есть сохраненные настройки
    else {
        Print("Загружаем сохраненные настройки с панели для ", Symbol(), " (обычный перезапуск)");
        
        if(GlobalVariableCheck(pairPrefix + "BotEnabled"))
            g_BotEnabled = GlobalVariableGet(pairPrefix + "BotEnabled") > 0;
        if(GlobalVariableCheck(pairPrefix + "TradeDirection"))
            g_TradeDirection = (ENUM_TRADE_DIRECTION)GlobalVariableGet(pairPrefix + "TradeDirection");
        if(GlobalVariableCheck(pairPrefix + "MaxOrdersBuy"))
            g_MaxOrdersBuy = (int)GlobalVariableGet(pairPrefix + "MaxOrdersBuy");
        if(GlobalVariableCheck(pairPrefix + "MaxOrdersSell"))
            g_MaxOrdersSell = (int)GlobalVariableGet(pairPrefix + "MaxOrdersSell");
        if(GlobalVariableCheck(pairPrefix + "BasketProfitPercent"))
            g_BasketProfitPercent = GlobalVariableGet(pairPrefix + "BasketProfitPercent");
        if(GlobalVariableCheck(pairPrefix + "BasketType"))
            g_BasketType = (ENUM_BASKET_TYPE)GlobalVariableGet(pairPrefix + "BasketType");
        if(GlobalVariableCheck(pairPrefix + "BasketAfterN"))
            g_BasketAfterN = (int)GlobalVariableGet(pairPrefix + "BasketAfterN");
    }
}