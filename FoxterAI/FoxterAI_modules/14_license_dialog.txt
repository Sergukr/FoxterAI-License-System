//+------------------------------------------------------------------+
//|                                            14_license_dialog.mqh |
//|                   –î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è FoxterAI v2.0       |
//|                      –ß–ï–†–ï–ó WINDOWS DLL –° –ë–õ–û–ö–ù–û–¢–û–ú               |
//+------------------------------------------------------------------+

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Windows —Ñ—É–Ω–∫—Ü–∏–∏
#import "user32.dll"
    int MessageBoxW(int hWnd, string text, string caption, int flags);
    int GetForegroundWindow();
#import

#import "shell32.dll"
    int ShellExecuteW(int hwnd, string operation, string file, string parameters, string directory, int showCmd);
#import

#define LICENSE_DIALOG_PREFIX "FX_LIC_"
#define DIALOG_WIDTH 450
#define DIALOG_HEIGHT 200

bool g_LicenseDialogOpen = false;
string g_EnteredLicenseKey = "";
string g_InputFileName = "";

//+------------------------------------------------------------------+
//| –ü–û–ö–ê–ó–ê–¢–¨ –î–ò–ê–õ–û–ì - –ß–ï–†–ï–ó –ë–õ–û–ö–ù–û–¢                                 |
//+------------------------------------------------------------------+
void ShowLicenseDialog() {
    int chartWidth = (int)ChartGetInteger(0, CHART_WIDTH_IN_PIXELS);
    int chartHeight = (int)ChartGetInteger(0, CHART_HEIGHT_IN_PIXELS);
    
    int dialogX = (chartWidth - DIALOG_WIDTH) / 2;
    int dialogY = (chartHeight - DIALOG_HEIGHT) / 2;
    
    // –§–æ–Ω –¥–∏–∞–ª–æ–≥–∞
    string bgName = LICENSE_DIALOG_PREFIX + "Background";
    if(ObjectFind(0, bgName) >= 0) ObjectDelete(0, bgName);
    
    ObjectCreate(0, bgName, OBJ_RECTANGLE_LABEL, 0, 0, 0);
    ObjectSetInteger(0, bgName, OBJPROP_CORNER, CORNER_LEFT_UPPER);
    ObjectSetInteger(0, bgName, OBJPROP_XDISTANCE, dialogX);
    ObjectSetInteger(0, bgName, OBJPROP_YDISTANCE, dialogY);
    ObjectSetInteger(0, bgName, OBJPROP_XSIZE, DIALOG_WIDTH);
    ObjectSetInteger(0, bgName, OBJPROP_YSIZE, DIALOG_HEIGHT);
    ObjectSetInteger(0, bgName, OBJPROP_BGCOLOR, C'43,45,48');
    ObjectSetInteger(0, bgName, OBJPROP_BORDER_TYPE, BORDER_RAISED);
    ObjectSetInteger(0, bgName, OBJPROP_COLOR, C'212,175,55');
    ObjectSetInteger(0, bgName, OBJPROP_WIDTH, 2);
    ObjectSetInteger(0, bgName, OBJPROP_SELECTABLE, false);
    ObjectSetInteger(0, bgName, OBJPROP_ZORDER, 9000);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ - –û–ë–ù–û–í–õ–ï–ù–û –Ω–∞ v2.0!
    CreateDialogLabel(LICENSE_DIALOG_PREFIX + "Title", 
               "–ê–ö–¢–ò–í–ê–¶–ò–Ø FOXTERAI v2.0", 
               dialogX + 20, dialogY + 20, 
               C'212,175,55', 14, "Arial Bold");
    
    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    CreateDialogLabel(LICENSE_DIALOG_PREFIX + "Info1", 
               "–î–ª—è –≤–≤–æ–¥–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞:", 
               dialogX + 20, dialogY + 55, 
               C'224,224,224', 11);
    
    CreateDialogLabel(LICENSE_DIALOG_PREFIX + "Info2", 
               "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–í–ï–°–¢–ò –ö–õ–Æ–ß'", 
               dialogX + 20, dialogY + 75, 
               C'224,224,224', 10);
               
    CreateDialogLabel(LICENSE_DIALOG_PREFIX + "Info3", 
               "2. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±–ª–æ–∫–Ω–æ—Ç–µ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á (Ctrl+V)", 
               dialogX + 20, dialogY + 92, 
               C'224,224,224', 10);
               
    CreateDialogLabel(LICENSE_DIALOG_PREFIX + "Info4", 
               "3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ (Ctrl+S) –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –±–ª–æ–∫–Ω–æ—Ç", 
               dialogX + 20, dialogY + 109, 
               C'224,224,224', 10);
               
    CreateDialogLabel(LICENSE_DIALOG_PREFIX + "Info5", 
               "4. –ù–∞–∂–º–∏—Ç–µ '–ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨'", 
               dialogX + 20, dialogY + 126, 
               C'224,224,224', 10);
    
    // –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
    CreateDialogLabel(LICENSE_DIALOG_PREFIX + "Format", 
               "–§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: UNIV-XX-XXXXXXXX-XXXXXXXXXXXXXXXX", 
               dialogX + 20, dialogY + 145, 
               C'255,193,7', 9);
    
    // –ö–Ω–æ–ø–∫–∏
    CreateDialogButton(LICENSE_DIALOG_PREFIX + "BtnInput", 
                "–í–í–ï–°–¢–ò –ö–õ–Æ–ß", 
                dialogX + 80, dialogY + 165, 120, 25, 
                C'33,150,243');
    
    CreateDialogButton(LICENSE_DIALOG_PREFIX + "BtnActivate", 
                "–ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨", 
                dialogX + 210, dialogY + 165, 100, 25, 
                C'46,125,50');
    
    CreateDialogButton(LICENSE_DIALOG_PREFIX + "BtnCancel", 
                "–û–¢–ú–ï–ù–ê", 
                dialogX + 320, dialogY + 165, 70, 25, 
                C'198,40,40');
    
    g_LicenseDialogOpen = true;
    ChartRedraw();
    
    Print("========================================");
    Print("–î–ò–ê–õ–û–ì –õ–ò–¶–ï–ù–ó–ò–ò –û–¢–ö–†–´–¢ v2.0");
    Print("–ù–∞–∂–º–∏—Ç–µ '–í–í–ï–°–¢–ò –ö–õ–Æ–ß' –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–ª–æ–∫–Ω–æ—Ç–∞");
    Print("========================================");
}

//+------------------------------------------------------------------+
//| –ó–ê–ö–†–´–¢–¨ –î–ò–ê–õ–û–ì                                                   |
//+------------------------------------------------------------------+
void CloseLicenseDialog() {
    string objects[] = {"Background", "Title", "Info1", "Info2", "Info3", 
                       "Info4", "Info5", "Format", "BtnInput", "BtnActivate", "BtnCancel"};
    
    for(int i = 0; i < ArraySize(objects); i++) {
        ObjectDelete(0, LICENSE_DIALOG_PREFIX + objects[i]);
    }
    
    g_LicenseDialogOpen = false;
    ChartRedraw();
}

//+------------------------------------------------------------------+
//| –û–¢–ö–†–´–¢–¨ –ë–õ–û–ö–ù–û–¢ –î–õ–Ø –í–í–û–î–ê –ö–õ–Æ–ß–ê                                |
//+------------------------------------------------------------------+
void OpenNotepadForKey() {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–ª—é—á–∞
    g_InputFileName = "FoxterAI_temp_key.txt";
    int handle = FileOpen(g_InputFileName, FILE_WRITE | FILE_TXT);
    
    if(handle != INVALID_HANDLE) {
        FileWriteString(handle, "–í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® –õ–ò–¶–ï–ù–ó–ò–û–ù–ù–´–ô –ö–õ–Æ–ß\n");
        FileWriteString(handle, "–§–æ—Ä–º–∞—Ç: UNIV-XX-XXXXXXXX-XXXXXXXXXXXXXXXX\n");
        FileWriteString(handle, "\n–ö–ª—é—á: ");
        FileClose(handle);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        string terminal_path = TerminalInfoString(TERMINAL_DATA_PATH);
        string full_path = terminal_path + "\\MQL4\\Files\\" + g_InputFileName;
        
        Print("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª: ", full_path);
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±–ª–æ–∫–Ω–æ—Ç–µ
        int result = ShellExecuteW(0, "open", "notepad.exe", full_path, "", 1);
        
        if(result > 32) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Windows –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            MessageBoxW(GetForegroundWindow(),
                "–ë–ª–æ–∫–Ω–æ—Ç –æ—Ç–∫—Ä—ã—Ç!\n\n" +
                "1. –£–¥–∞–ª–∏—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç\n" +
                "2. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á (Ctrl+V)\n" +
                "3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª (Ctrl+S)\n" +
                "4. –ó–∞–∫—Ä–æ–π—Ç–µ –±–ª–æ–∫–Ω–æ—Ç\n" +
                "5. –ù–∞–∂–º–∏—Ç–µ –ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨",
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                0x00000040);  // MB_ICONINFORMATION
        } else {
            MessageBoxW(GetForegroundWindow(),
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–ª–æ–∫–Ω–æ—Ç\n\n" +
                "–û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é —Ñ–∞–π–ª:\n" + full_path,
                "–û—à–∏–±–∫–∞",
                0x00000010);  // MB_ICONERROR
        }
    }
}

//+------------------------------------------------------------------+
//| –ü–†–û–ß–ò–¢–ê–¢–¨ –ö–õ–Æ–ß –ò–ó –í–†–ï–ú–ï–ù–ù–û–ì–û –§–ê–ô–õ–ê                             |
//+------------------------------------------------------------------+
string ReadKeyFromTempFile() {
    if(g_InputFileName == "") {
        Print("‚ùå –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ");
        return "";
    }
    
    int handle = FileOpen(g_InputFileName, FILE_READ | FILE_TXT);
    if(handle == INVALID_HANDLE) {
        Print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: ", g_InputFileName);
        return "";
    }
    
    string content = "";
    while(!FileIsEnding(handle)) {
        string line = FileReadString(handle);
        content = content + line + " "; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
    }
    FileClose(handle);
    
    Print("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: [", content, "]");
    
    // –ò—â–µ–º –∫–ª—é—á UNIV –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    int pos = StringFind(content, "UNIV-");
    if(pos >= 0) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –Ω–∞—á–∏–Ω–∞—è —Å UNIV-
        string key = "";
        for(int i = pos; i < StringLen(content); i++) {
            ushort charCode = StringGetCharacter(content, i);
            
            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–ª—é—á–∞ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å)
            if((charCode >= 'A' && charCode <= 'Z') || 
               (charCode >= 'a' && charCode <= 'z') ||
               (charCode >= '0' && charCode <= '9') || 
               charCode == '-') {
                // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                if(charCode >= 'a' && charCode <= 'z') {
                    charCode = charCode - 32; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ
                }
                key = key + CharToString((uchar)charCode);
            } else {
                // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Å–∏–º–≤–æ–ª–µ
                break;
            }
        }
        
        Print("üîë –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–ª—é—á: [", key, "]");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if(ValidateKeyFormat(key)) {
            Print("‚úÖ –ö–ª—é—á –≤–∞–ª–∏–¥–µ–Ω!");
            return key;
        } else {
            Print("‚ùå –ö–ª—é—á –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é");
        }
    } else {
        Print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å UNIV- –≤ —Ñ–∞–π–ª–µ");
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –∫–∞–∫ –∫–ª—é—á (–æ—á–∏—Å—Ç–∏–≤ –æ—Ç –º—É—Å–æ—Ä–∞)
    string cleanContent = TrimLicenseString(content);
    Print("üßπ –û—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: [", cleanContent, "]");
    
    if(ValidateKeyFormat(cleanContent)) {
        Print("‚úÖ –í–µ—Å—å —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–æ–º!");
        return cleanContent;
    }
    
    Print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ");
    return "";
}

//+------------------------------------------------------------------+
//| –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ê –ö–õ–Æ–ß–ê - –¢–û–õ–¨–ö–û UNIV                            |
//+------------------------------------------------------------------+
bool ValidateKeyFormat(string key) {
    if(StringLen(key) < 10) {
        Print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (", StringLen(key), " —Å–∏–º–≤–æ–ª–æ–≤)");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å UNIV-
    if(StringSubstr(key, 0, 5) != "UNIV-") {
        Print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å (–æ–∂–∏–¥–∞–µ—Ç—Å—è UNIV-)");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–∏—Å–æ–≤ (–º–∏–Ω–∏–º—É–º 3 –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ UNIV-XX-XXXX-XXXX)
    int dashCount = 0;
    for(int i = 0; i < StringLen(key); i++) {
        if(StringGetCharacter(key, i) == '-') {
            dashCount++;
        }
    }
    
    if(dashCount < 3) {
        Print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ñ–∏—Å–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ ", dashCount, ", –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3)");
        return false;
    }
    
    Print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: UNIV –∫–ª—é—á —Å ", dashCount, " –¥–µ—Ñ–∏—Å–∞–º–∏");
    return true;
}

//+------------------------------------------------------------------+
//| –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ö–û–í                                                |
//+------------------------------------------------------------------+
bool HandleLicenseDialogClick(string objName) {
    if(StringFind(objName, LICENSE_DIALOG_PREFIX) != 0) return false;
    
    // –í–í–ï–°–¢–ò –ö–õ–Æ–ß
    if(objName == LICENSE_DIALOG_PREFIX + "BtnInput") {
        ObjectSetInteger(0, objName, OBJPROP_STATE, false);
        OpenNotepadForKey();
        return true;
    }
    
    // –ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨
    if(objName == LICENSE_DIALOG_PREFIX + "BtnActivate") {
        ObjectSetInteger(0, objName, OBJPROP_STATE, false);
        
        Print("========================================");
        Print("üîÑ –ù–ê–ß–ê–õ–û –ê–ö–¢–ò–í–ê–¶–ò–ò v2.0");
        Print("========================================");
        
        // –ß–∏—Ç–∞–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        g_EnteredLicenseKey = ReadKeyFromTempFile();
        
        Print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–µ–Ω–∏—è: [", g_EnteredLicenseKey, "]");
        Print("üìè –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: ", StringLen(g_EnteredLicenseKey));
        
        if(StringLen(g_EnteredLicenseKey) == 0 || !ValidateKeyFormat(g_EnteredLicenseKey)) {
            int choice = MessageBoxW(GetForegroundWindow(),
                "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n" +
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n" +
                "1. –í—ã –Ω–∞–∂–∞–ª–∏ '–í–í–ï–°–¢–ò –ö–õ–Æ–ß'\n" +
                "2. –í—Å—Ç–∞–≤–∏–ª–∏ –∫–ª—é—á –≤ –±–ª–æ–∫–Ω–æ—Ç\n" +
                "3. –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ñ–∞–π–ª (Ctrl+S)\n" +
                "4. –ó–∞–∫—Ä—ã–ª–∏ –±–ª–æ–∫–Ω–æ—Ç\n\n" +
                "–§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: UNIV-XX-XXXXXXXX-XXXXXXXXXXXXXXXX\n\n" +
                "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?",
                "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞",
                0x00000004 | 0x00000030);  // MB_YESNO | MB_ICONEXCLAMATION
            
            if(choice == 6) { // IDYES = 6
                OpenNotepadForKey();
            }
            
            return true;
        }
        
        Print("‚úÖ –ö–ª—é—á –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ v2.0...");
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è 15!
        SaveLicenseKeyLocal(g_EnteredLicenseKey);
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if(g_InputFileName != "") {
            FileDelete(g_InputFileName);
            g_InputFileName = "";
        }
        
        CloseLicenseDialog();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏
        MessageBoxW(GetForegroundWindow(),
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ v2.0...\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
            "–ê–∫—Ç–∏–≤–∞—Ü–∏—è",
            0x00000040);  // MB_ICONINFORMATION
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º
        if(InitializeLicense(g_EnteredLicenseKey)) {
            MessageBoxW(GetForegroundWindow(),
                "–£–°–ü–ï–•!\n\n–õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n–°–æ–≤–µ—Ç–Ω–∏–∫ FoxterAI v2.0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.",
                "–ê–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
                0x00000040);  // MB_ICONINFORMATION
            
            g_BotEnabled = true;
            LoadPanelSettings();  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é!
            DetectInitialTrend();
            if(ShowPanel) {
                CreateInteractivePanel();
            }
        } else {
            string errorMsg = "–û–®–ò–ë–ö–ê –ê–ö–¢–ò–í–ê–¶–ò–ò:\n\n" + g_LicenseMessage + 
                            "\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
                            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á\n" +
                            "‚Ä¢ –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n" +
                            "‚Ä¢ –ö–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É —Å—á–µ—Ç—É\n" +
                            "‚Ä¢ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
            
            MessageBoxW(GetForegroundWindow(),
                errorMsg,
                "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", 
                0x00000010);  // MB_ICONERROR
            
            ShowLicenseDialog();
        }
        
        return true;
    }
    
    // –û–¢–ú–ï–ù–ê
    if(objName == LICENSE_DIALOG_PREFIX + "BtnCancel") {
        ObjectSetInteger(0, objName, OBJPROP_STATE, false);
        
        if(g_InputFileName != "") {
            FileDelete(g_InputFileName);
            g_InputFileName = "";
        }
        
        CloseLicenseDialog();
        
        if(!IsLicenseValidForTrading()) {
            MessageBoxW(GetForegroundWindow(),
                "–ë–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å–æ–≤–µ—Ç–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å!",
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                0x00000030);  // MB_ICONEXCLAMATION
            g_BotEnabled = false;
        }
        
        return true;
    }
    
    return false;
}

//+------------------------------------------------------------------+
//| –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò                                         |
//+------------------------------------------------------------------+
void CreateDialogLabel(string name, string text, int x, int y, color col, int size = 10, string font = "Arial") {
    if(ObjectFind(0, name) >= 0) ObjectDelete(0, name);
    
    ObjectCreate(0, name, OBJ_LABEL, 0, 0, 0);
    ObjectSetInteger(0, name, OBJPROP_CORNER, CORNER_LEFT_UPPER);
    ObjectSetInteger(0, name, OBJPROP_XDISTANCE, x);
    ObjectSetInteger(0, name, OBJPROP_YDISTANCE, y);
    ObjectSetString(0, name, OBJPROP_TEXT, text);
    ObjectSetString(0, name, OBJPROP_FONT, font);
    ObjectSetInteger(0, name, OBJPROP_FONTSIZE, size);
    ObjectSetInteger(0, name, OBJPROP_COLOR, col);
    ObjectSetInteger(0, name, OBJPROP_SELECTABLE, false);
    ObjectSetInteger(0, name, OBJPROP_ZORDER, 9001);
}

void CreateDialogButton(string name, string text, int x, int y, int width, int height, color bg) {
    if(ObjectFind(0, name) >= 0) ObjectDelete(0, name);
    
    ObjectCreate(0, name, OBJ_BUTTON, 0, 0, 0);
    ObjectSetInteger(0, name, OBJPROP_CORNER, CORNER_LEFT_UPPER);
    ObjectSetInteger(0, name, OBJPROP_XDISTANCE, x);
    ObjectSetInteger(0, name, OBJPROP_YDISTANCE, y);
    ObjectSetInteger(0, name, OBJPROP_XSIZE, width);
    ObjectSetInteger(0, name, OBJPROP_YSIZE, height);
    ObjectSetString(0, name, OBJPROP_TEXT, text);
    ObjectSetString(0, name, OBJPROP_FONT, "Arial Bold");
    ObjectSetInteger(0, name, OBJPROP_FONTSIZE, 9);
    ObjectSetInteger(0, name, OBJPROP_COLOR, clrWhite);
    ObjectSetInteger(0, name, OBJPROP_BGCOLOR, bg);
    ObjectSetInteger(0, name, OBJPROP_STATE, false);
    ObjectSetInteger(0, name, OBJPROP_SELECTABLE, false);
    ObjectSetInteger(0, name, OBJPROP_ZORDER, 9002);
}

//+------------------------------------------------------------------+
//| –û–ë–†–ï–ó–ö–ê –°–¢–†–û–ö–ò –û–¢ –ü–†–û–ë–ï–õ–û–í –ò –ù–ï–í–ò–î–ò–ú–´–• –°–ò–ú–í–û–õ–û–í                |
//+------------------------------------------------------------------+
string TrimLicenseString(string str) {
    string result = "";
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
    for(int i = 0; i < StringLen(str); i++) {
        ushort charCode = StringGetCharacter(str, i);
        
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å)
        if((charCode >= 'A' && charCode <= 'Z') || 
           (charCode >= 'a' && charCode <= 'z') ||
           (charCode >= '0' && charCode <= '9') || 
           charCode == '-') {
            // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            if(charCode >= 'a' && charCode <= 'z') {
                charCode = charCode - 32;
            }
            result = result + CharToString((uchar)charCode);
        }
    }
    
    return result;
}