//+------------------------------------------------------------------+
//|                                                   13_license.mqh |
//|                     Модуль лицензирования для FoxterAI v2.0     |
//|              ПОЛНАЯ ПЕРЕДАЧА ДАННЫХ + 3 ДНЯ АВТОНОМНОЙ РАБОТЫ  |
//+------------------------------------------------------------------+

#import "wininet.dll"
    int InternetOpenW(string agent, int accessType, string proxyName, string proxyBypass, int flags);
    int InternetConnectW(int internet, string serverName, int port, string userName, string password, 
                        int service, int flags, int context);
    int HttpOpenRequestW(int connect, string verb, string objectName, string version, string referer, 
                        int &acceptTypes, int flags, int context);
    bool HttpSendRequestW(int request, string headers, int headersLength, uchar &buffer[], int bufferLength);
    int InternetReadFile(int request, uchar &buffer[], int bufferSize, int &bytesRead[]);
    int InternetCloseHandle(int handle);
#import

//--- Состояния лицензии
#define LICENSE_UNCHECKED 0     // Не проверена
#define LICENSE_VALID 1         // Действительна
#define LICENSE_EXPIRED 2       // Истекла
#define LICENSE_INVALID 3       // Недействительна
#define LICENSE_BLOCKED 4       // Заблокирована
#define LICENSE_NO_CONNECTION 5 // Нет связи с сервером
#define LICENSE_GRACE_PERIOD 6  // Грейс-период (работа без связи)

//--- Глобальные переменные лицензии
int g_LicenseState = LICENSE_UNCHECKED;
string g_LicenseKey = "";
datetime g_LicenseExpiry = 0;
datetime g_LastSuccessfulCheck = 0;
datetime g_LastCheckAttempt = 0;
int g_FailedChecks = 0;
bool g_LicenseActivated = false;
string g_LicenseMessage = "";

//--- КОНСТАНТЫ РОБОТА (реальные данные)
#define ROBOT_NAME "FoxterAI"           // Реальное название робота
#define ROBOT_VERSION "1.6"              // Реальная версия робота

//--- ЖЕСТКО ЗАШИТЫЕ НАСТРОЙКИ СЕРВЕРА
#define LICENSE_SERVER_URL "178.130.43.120"
#define LICENSE_SERVER_PORT 3000

//--- Константы флагов WinInet (исправлены для MQL4)
#define INTERNET_FLAG_RELOAD            -2147483648  // 0x80000000 как signed int
#define INTERNET_FLAG_NO_CACHE_WRITE    67108864     // 0x04000000
#define INTERNET_FLAG_PRAGMA_NOCACHE    256          // 0x00000100  
#define INTERNET_FLAG_NO_UI             512          // 0x00000200

//--- ИЗМЕНЕНО: УМЕНЬШЕНЫ ВРЕМЕННЫЕ ИНТЕРВАЛЫ
#define LICENSE_CHECK_INTERVAL 86400      // Проверка раз в СУТКИ (24 часа)
#define LICENSE_HEARTBEAT_INTERVAL 43200  // Heartbeat раз в 12 ЧАСОВ
#define LICENSE_GRACE_PERIOD_HOURS 72     // 3 ДНЯ работы без связи (ИЗМЕНЕНО С 10!)
#define MAX_FAILED_CHECKS 3               // 3 неудачных попытки = 3 дня (ИЗМЕНЕНО С 10!)
#define LICENSE_WARNING_DAYS 7            // Предупреждение за 7 дней до истечения

//+------------------------------------------------------------------+
//| ПРОВЕРКА НА ТЕСТЕР                                              |
//+------------------------------------------------------------------+
bool IsTestMode() {
    return (IsTesting() || IsOptimization() || IsVisualMode());
}

//+------------------------------------------------------------------+
//| ОПРЕДЕЛЕНИЕ ТИПА СЧЕТА (ДЕМО/РЕАЛ)                             |
//+------------------------------------------------------------------+
string GetAccountType() {
    if(IsTestMode()) return "Tester";
    
    // Способ 1: Проверка через IsDemo()
    if(IsDemo()) return "Demo";
    
    // Способ 2: Дополнительная проверка через название сервера
    string broker = AccountCompany();
    string brokerLower = broker;
    StringToLower(brokerLower);
    
    if(StringFind(brokerLower, "demo") >= 0 || 
       StringFind(brokerLower, "contest") >= 0 ||
       StringFind(brokerLower, "virtual") >= 0) {
        return "Demo";
    }
    
    return "Real";
}

//+------------------------------------------------------------------+
//| БЕЗОПАСНОЕ ПОЛУЧЕНИЕ ИМЕНИ ВЛАДЕЛЬЦА СЧЕТА - ИСПРАВЛЕНО        |
//+------------------------------------------------------------------+
string GetAccountOwnerSafe() {
    if(IsTestMode()) return "Tester";
    
    string owner = AccountName();
    
    // Если имя пустое или содержит только пробелы
    if(StringLen(owner) == 0 || StringTrimLeft(StringTrimRight(owner)) == "") {
        return "Account_" + IntegerToString(AccountNumber());
    }
    
    // ИСПРАВЛЕНО: Проверяем, не является ли строка набором Unicode-кодов
    if(StringFind(owner, "[") == 0 && StringFind(owner, "]") > 0) {
        // Это коды символов - возвращаем номер счета
        Print("Обнаружены Unicode-коды в имени владельца, используем номер счета");
        return "Account_" + IntegerToString(AccountNumber());
    }
    
    // Проверяем на наличие только ASCII символов
    bool hasValidChars = false;
    string safeOwner = "";
    
    for(int i = 0; i < StringLen(owner) && i < 30; i++) {  // Ограничиваем 30 символами
        ushort charCode = StringGetCharacter(owner, i);
        
        // Принимаем только безопасные символы
        if((charCode >= 'A' && charCode <= 'Z') || 
           (charCode >= 'a' && charCode <= 'z') ||
           (charCode >= '0' && charCode <= '9') ||
           charCode == ' ' || charCode == '.' || charCode == '-' || charCode == '_') {
            safeOwner = safeOwner + CharToString((uchar)charCode);
            hasValidChars = true;
        }
        else if(charCode > 127) {
            // Кириллица или другие не-ASCII символы - заменяем на X
            safeOwner = safeOwner + "X";
            hasValidChars = true;
        }
    }
    
    // Если после фильтрации получили валидные символы
    if(hasValidChars && StringLen(safeOwner) > 0) {
        string trimmed = StringTrimLeft(StringTrimRight(safeOwner));
        if(StringLen(trimmed) > 0) {
            return trimmed;
        }
    }
    
    // Если ничего не получилось - используем номер счета
    return "Account_" + IntegerToString(AccountNumber());
}

//+------------------------------------------------------------------+
//| ПОЛУЧЕНИЕ ОТПЕЧАТКА СИСТЕМЫ                                      |
//+------------------------------------------------------------------+
string GetSystemFingerprint() {
    if(IsTestMode()) {
        return "TESTER_MODE";
    }
    
    // Создаем отпечаток на основе: счет + робот + версия
    string fingerprint = "";
    fingerprint = fingerprint + IntegerToString(AccountNumber());
    fingerprint = fingerprint + "_" + ROBOT_NAME;
    fingerprint = fingerprint + "_" + ROBOT_VERSION;
    
    // Простое хэширование
    int hash = 0;
    for(int i = 0; i < StringLen(fingerprint); i++) {
        hash = hash * 31 + StringGetCharacter(fingerprint, i);
    }
    
    return IntegerToString(MathAbs(hash));
}

//+------------------------------------------------------------------+
//| ОТПРАВКА HTTP ЗАПРОСА С ПОЛНОЙ ДИАГНОСТИКОЙ                     |
//+------------------------------------------------------------------+
string SendHTTPRequest(string endpoint, string postData) {
    if(IsTestMode()) {
        return "{\"success\":true,\"message\":\"Test mode\"}";
    }
    
    Print("===== ОТПРАВКА HTTP ЗАПРОСА =====");
    Print("URL: http://", LICENSE_SERVER_URL, ":", LICENSE_SERVER_PORT, endpoint);
    Print("Данные: ", StringLen(postData) > 200 ? StringSubstr(postData, 0, 200) + "..." : postData);
    
    //--- Открываем интернет соединение
    int hInternet = InternetOpenW("FoxterAI/1.6", 1, "", "", 0);
    if(hInternet == 0) {
        int error = GetLastError();
        Print("❌ Ошибка InternetOpen: ", error);
        
        hInternet = InternetOpenW("Mozilla/5.0", 0, "", "", 0);
        if(hInternet == 0) {
            Print("❌ Не удается открыть интернет соединение");
            return "";
        }
    }
    
    //--- Подключаемся к серверу
    int hConnect = InternetConnectW(hInternet, LICENSE_SERVER_URL, LICENSE_SERVER_PORT, 
                                   "", "", 3, 0, 0);
    if(hConnect == 0) {
        InternetCloseHandle(hInternet);
        Print("❌ Не удается подключиться к серверу лицензий");
        return "";
    }
    
    //--- Создаем HTTP запрос
    int flags = INTERNET_FLAG_RELOAD | INTERNET_FLAG_NO_CACHE_WRITE | 
                INTERNET_FLAG_PRAGMA_NOCACHE | INTERNET_FLAG_NO_UI;
    
    int acceptTypes = 0;
    int hRequest = HttpOpenRequestW(hConnect, "POST", endpoint, "HTTP/1.1", "", 
                                   acceptTypes, flags, 0);
    if(hRequest == 0) {
        InternetCloseHandle(hConnect);
        InternetCloseHandle(hInternet);
        return "";
    }
    
    //--- Конвертируем данные в массив байт
    uchar postDataArray[];
    int dataLen = StringLen(postData);
    ArrayResize(postDataArray, dataLen);
    StringToCharArray(postData, postDataArray, 0, dataLen);
    
    //--- Отправляем запрос
    string headers = "Content-Type: application/json\r\nConnection: close\r\n";
    
    if(!HttpSendRequestW(hRequest, headers, StringLen(headers), postDataArray, ArraySize(postDataArray))) {
        InternetCloseHandle(hRequest);
        InternetCloseHandle(hConnect);
        InternetCloseHandle(hInternet);
        return "";
    }
    
    //--- Читаем ответ
    uchar buffer[4096];
    int bytesRead[1];
    string response = "";
    int totalBytes = 0;
    
    while(true) {
        if(!InternetReadFile(hRequest, buffer, ArraySize(buffer) - 1, bytesRead)) {
            break;
        }
        
        if(bytesRead[0] <= 0) {
            break;
        }
        
        string chunk = CharArrayToString(buffer, 0, bytesRead[0]);
        response = response + chunk;
        totalBytes = totalBytes + bytesRead[0];
        
        if(totalBytes > 100000) {
            break;
        }
    }
    
    //--- Закрываем все хэндлы
    InternetCloseHandle(hRequest);
    InternetCloseHandle(hConnect);
    InternetCloseHandle(hInternet);
    
    Print("Ответ сервера: ", StringLen(response) > 200 ? StringSubstr(response, 0, 200) + "..." : response);
    
    return response;
}

//+------------------------------------------------------------------+
//| АКТИВАЦИЯ ЛИЦЕНЗИИ - ПОЛНАЯ ПЕРЕДАЧА ДАННЫХ                    |
//+------------------------------------------------------------------+
bool ActivateLicense() {
    if(IsTestMode()) {
        g_LicenseState = LICENSE_VALID;
        g_LicenseActivated = true;
        g_LastSuccessfulCheck = TimeCurrent();
        g_LicenseMessage = "Тестовый режим - лицензия не требуется";
        return true;
    }
    
    //--- НОВОЕ: Собираем ВСЕ данные для активации
    string accountOwner = GetAccountOwnerSafe();
    string accountType = GetAccountType();
    double balance = AccountBalance();
    
    //--- Подготавливаем расширенные данные для отправки
    string postData = "{";
    postData = postData + "\"key\":\"" + g_LicenseKey + "\",";
    postData = postData + "\"account\":\"" + IntegerToString(AccountNumber()) + "\",";
    postData = postData + "\"account_owner\":\"" + accountOwner + "\",";  // НОВОЕ
    postData = postData + "\"broker\":\"" + AccountCompany() + "\",";
    postData = postData + "\"robot_name\":\"" + ROBOT_NAME + "\",";       // НОВОЕ: реальное название
    postData = postData + "\"robot_version\":\"" + ROBOT_VERSION + "\","; // НОВОЕ: реальная версия
    postData = postData + "\"balance\":" + DoubleToString(balance, 2) + ","; // НОВОЕ
    postData = postData + "\"account_type\":\"" + accountType + "\",";    // НОВОЕ
    postData = postData + "\"fingerprint\":\"" + GetSystemFingerprint() + "\"";
    postData = postData + "}";
    
    Print("=====================================");
    Print("       АКТИВАЦИЯ ЛИЦЕНЗИИ v2.0");
    Print("=====================================");
    Print("Счет: ", AccountNumber());
    Print("Владелец: ", accountOwner);
    Print("Тип: ", accountType);
    Print("Баланс: ", balance);
    Print("Робот: ", ROBOT_NAME, " v", ROBOT_VERSION);
    Print("=====================================");
    
    //--- Отправляем запрос
    string response = SendHTTPRequest("/activate", postData);
    
    if(response == "") {
        g_LicenseState = LICENSE_NO_CONNECTION;
        g_LicenseMessage = "Нет связи с сервером лицензий";
        return false;
    }
    
    //--- Парсим ответ
    if(StringFind(response, "\"success\":true") >= 0) {
        Print("✅ Сервер подтвердил активацию");
        
        g_LicenseState = LICENSE_VALID;
        g_LicenseActivated = true;
        g_LastSuccessfulCheck = TimeCurrent();
        g_FailedChecks = 0;
        g_LicenseMessage = "Лицензия активирована успешно";
        
        GlobalVariableSet("FX_LastCheck_" + IntegerToString(AccountNumber()), TimeCurrent());
        
        return true;
    }
    else if(StringFind(response, "не найден") >= 0 || StringFind(response, "not found") >= 0) {
        g_LicenseState = LICENSE_INVALID;
        g_LicenseMessage = "Лицензионный ключ не найден на сервере";
        Print("❌ Ключ не существует на сервере!");
        return false;
    }
    else if(StringFind(response, "уже активирована на другом счете") >= 0 || 
            StringFind(response, "привязана к другому счету") >= 0 ||
            StringFind(response, "wrong_account") >= 0) {
        g_LicenseState = LICENSE_INVALID;
        g_LicenseMessage = "Лицензия привязана к другому счету";
        Print("❌ Лицензия привязана к другому счету!");
        return false;
    }
    else if(StringFind(response, "другому роботу") >= 0 || StringFind(response, "wrong_robot") >= 0) {
        g_LicenseState = LICENSE_INVALID;
        g_LicenseMessage = "Лицензия привязана к другому роботу";
        Print("❌ Лицензия привязана к другому роботу!");
        return false;
    }
    else if(StringFind(response, "заблокирована") >= 0 || StringFind(response, "blocked") >= 0) {
        g_LicenseState = LICENSE_BLOCKED;
        g_LicenseMessage = "Лицензия заблокирована";
        return false;
    }
    else if(StringFind(response, "истекла") >= 0 || StringFind(response, "expired") >= 0) {
        g_LicenseState = LICENSE_EXPIRED;
        g_LicenseMessage = "Срок действия лицензии истек";
        return false;
    }
    
    g_LicenseState = LICENSE_INVALID;
    g_LicenseMessage = "Ошибка активации";
    return false;
}

//+------------------------------------------------------------------+
//| ПРОВЕРКА ЛИЦЕНЗИИ - С ПЕРЕДАЧЕЙ РОБОТА                         |
//+------------------------------------------------------------------+
bool CheckLicense(bool isInitialCheck = false) {
    if(IsTestMode()) {
        if(g_LicenseState != LICENSE_VALID) {
            g_LicenseState = LICENSE_VALID;
            g_LicenseActivated = true;
            g_LicenseMessage = "Тестовый режим";
        }
        return true;
    }
    
    //--- При первом запуске всегда проверяем
    if(isInitialCheck) {
        Print("🔍 Первичная проверка лицензии...");
        
        bool result = ActivateLicense();
        g_LastCheckAttempt = TimeCurrent();
        return result;
    }
    
    //--- Проверяем интервал между проверками
    if(TimeCurrent() - g_LastCheckAttempt < LICENSE_CHECK_INTERVAL) {
        return (g_LicenseState == LICENSE_VALID);
    }
    
    g_LastCheckAttempt = TimeCurrent();
    
    Print("📡 Ежедневная проверка лицензии на сервере...");
    
    //--- НОВОЕ: Передаем название робота при проверке
    string postData = "{";
    postData = postData + "\"key\":\"" + g_LicenseKey + "\",";
    postData = postData + "\"account\":\"" + IntegerToString(AccountNumber()) + "\",";
    postData = postData + "\"broker\":\"" + AccountCompany() + "\",";
    postData = postData + "\"robot_name\":\"" + ROBOT_NAME + "\",";       // НОВОЕ
    postData = postData + "\"fingerprint\":\"" + GetSystemFingerprint() + "\"";
    postData = postData + "}";
    
    //--- Отправляем запрос
    string response = SendHTTPRequest("/check", postData);
    
    if(response == "") {
        g_FailedChecks++;
        Print("⚠️ Нет связи с сервером, неудачных проверок: ", g_FailedChecks, " из ", MAX_FAILED_CHECKS);
        
        // ИЗМЕНЕНО: Даем только 3 ДНЯ работы без связи
        if(g_FailedChecks >= MAX_FAILED_CHECKS) {
            g_LicenseState = LICENSE_NO_CONNECTION;
            g_LicenseMessage = "Потеряна связь с сервером лицензий более 3 дней";
            Alert("КРИТИЧНО: Нет связи с сервером лицензий более 3 дней!\nРобот будет остановлен!");
            return false;
        }
        
        // Предупреждения
        if(g_LicenseActivated) {
            if(g_FailedChecks == 1) {
                Print("ℹ️ Работаем в автономном режиме (день 1 из 3)");
            } else if(g_FailedChecks == 2) {
                Alert("ВНИМАНИЕ: Нет связи с сервером 2 дня!\nОсталось 1 день до блокировки!");
            }
        }
        
        // Временно разрешаем работу
        return (g_LicenseState == LICENSE_VALID || g_LicenseActivated);
    }
    
    // Сбрасываем счетчик при успешной связи
    g_FailedChecks = 0;
    
    //--- Парсим ответ
    if(StringFind(response, "\"success\":true") >= 0) {
        g_LicenseState = LICENSE_VALID;
        g_LastSuccessfulCheck = TimeCurrent();
        g_LicenseMessage = "Лицензия действительна";
        Print("✅ Лицензия действительна (ежедневная проверка пройдена)");
        return true;
    }
    else if(StringFind(response, "не найден") >= 0 || StringFind(response, "not found") >= 0) {
        g_LicenseState = LICENSE_INVALID;
        g_LicenseMessage = "Лицензия удалена с сервера";
        Print("❌ Лицензия не найдена на сервере!");
        Alert("Лицензия удалена с сервера!\nРобот остановлен.");
        return false;
    }
    else if(StringFind(response, "истекла") >= 0 || StringFind(response, "expired") >= 0) {
        g_LicenseState = LICENSE_EXPIRED;
        g_LicenseMessage = "Срок действия лицензии истек";
        Print("⚠️ Лицензия истекла!");
        Alert("Срок действия лицензии истек!\nОбратитесь за продлением.");
        return false;
    }
    else if(StringFind(response, "заблокирована") >= 0 || StringFind(response, "blocked") >= 0) {
        g_LicenseState = LICENSE_BLOCKED;
        g_LicenseMessage = "Лицензия заблокирована администратором";
        Print("❌ Лицензия заблокирована!");
        Alert("Лицензия заблокирована администратором!");
        return false;
    }
    else if(StringFind(response, "другому счету") >= 0 || StringFind(response, "wrong_account") >= 0) {
        g_LicenseState = LICENSE_INVALID;
        g_LicenseMessage = "Лицензия привязана к другому счету";
        Print("❌ Лицензия привязана к другому счету!");
        return false;
    }
    else if(StringFind(response, "другому роботу") >= 0 || StringFind(response, "wrong_robot") >= 0) {
        g_LicenseState = LICENSE_INVALID;
        g_LicenseMessage = "Лицензия привязана к другому роботу";
        Print("❌ Лицензия привязана к другому роботу!");
        return false;
    }
    
    g_LicenseState = LICENSE_INVALID;
    g_LicenseMessage = "Лицензия недействительна";
    Print("❌ Лицензия недействительна");
    return false;
}

//+------------------------------------------------------------------+
//| ОТПРАВКА HEARTBEAT - РАСШИРЕННАЯ ВЕРСИЯ                        |
//+------------------------------------------------------------------+
void SendHeartbeat() {
    if(IsTestMode()) return;
    
    static datetime lastHeartbeat = 0;
    
    if(TimeCurrent() - lastHeartbeat < LICENSE_HEARTBEAT_INTERVAL) return;
    
    if(g_LicenseState != LICENSE_VALID && !g_LicenseActivated) return;
    
    lastHeartbeat = TimeCurrent();
    
    Print("💓 Отправка heartbeat с расширенными данными...");
    
    //--- НОВОЕ: Передаем расширенную статистику
    string accountType = GetAccountType();
    double balance = AccountBalance();
    double equity = AccountEquity();
    double profit = equity - balance;
    
    string postData = "{";
    postData = postData + "\"key\":\"" + g_LicenseKey + "\",";
    postData = postData + "\"account\":\"" + IntegerToString(AccountNumber()) + "\",";
    postData = postData + "\"broker\":\"" + AccountCompany() + "\",";
    postData = postData + "\"robot_name\":\"" + ROBOT_NAME + "\",";       // НОВОЕ
    postData = postData + "\"version\":\"" + ROBOT_VERSION + "\",";       // Версия робота
    postData = postData + "\"account_type\":\"" + accountType + "\",";    // НОВОЕ: тип счета
    postData = postData + "\"balance\":" + DoubleToString(balance, 2) + ",";
    postData = postData + "\"equity\":" + DoubleToString(equity, 2) + ","; // НОВОЕ
    postData = postData + "\"profit\":" + DoubleToString(profit, 2);      // НОВОЕ
    postData = postData + "}";
    
    SendHTTPRequest("/heartbeat", postData);
}

//+------------------------------------------------------------------+
//| ПРОВЕРКА РАЗРЕШЕНИЯ НА ТОРГОВЛЮ                                 |
//+------------------------------------------------------------------+
bool IsLicenseValidForTrading() {
    if(IsTestMode()) return true;
    
    // ИЗМЕНЕНО: Разрешаем работу максимум 3 дня без связи
    return (g_LicenseState == LICENSE_VALID || 
            (g_LicenseActivated && g_FailedChecks < MAX_FAILED_CHECKS));
}

//+------------------------------------------------------------------+
//| ПОЛУЧЕНИЕ СТАТУСА ЛИЦЕНЗИИ ДЛЯ ОТОБРАЖЕНИЯ                     |
//+------------------------------------------------------------------+
string GetLicenseStatusText() {
    if(IsTestMode()) {
        return "ТЕСТЕР";
    }
    
    if(g_LicenseState == LICENSE_VALID) {
        if(g_FailedChecks > 0) {
            return "Автоном " + IntegerToString(g_FailedChecks) + "/3д";
        }
        return "Активна";
    }
    else if(g_LicenseState == LICENSE_EXPIRED) {
        return "Истекла";
    }
    else if(g_LicenseState == LICENSE_INVALID) {
        return "Недействит.";
    }
    else if(g_LicenseState == LICENSE_BLOCKED) {
        return "Заблокир.";
    }
    else if(g_LicenseState == LICENSE_NO_CONNECTION) {
        return "Нет связи";
    }
    else if(g_LicenseActivated && g_FailedChecks > 0) {
        return "Автоном " + IntegerToString(g_FailedChecks) + "/3д";
    }
    else {
        return "Не проверена";
    }
}

//+------------------------------------------------------------------+
//| ПОЛУЧЕНИЕ ЦВЕТА СТАТУСА                                          |
//+------------------------------------------------------------------+
color GetLicenseStatusColor() {
    if(IsTestMode()) {
        return C'33,150,243';  // Синий для тестера
    }
    
    if(g_LicenseState == LICENSE_VALID && g_FailedChecks == 0) {
        return C'76,175,80';  // Зеленый
    }
    else if(g_FailedChecks == 1) {
        return C'255,193,7';  // Желтый - день 1
    }
    else if(g_FailedChecks == 2) {
        return C'255,152,0';  // Оранжевый - день 2
    }
    else if(g_FailedChecks >= 3 || g_LicenseState == LICENSE_NO_CONNECTION) {
        return C'244,67,54';  // Красный - критично
    }
    else {
        return C'244,67,54';  // Красный для всех невалидных
    }
}

//+------------------------------------------------------------------+
//| СОХРАНИТЬ КЛЮЧ В ФАЙЛ - ВСЕГДА В FILE_COMMON                   |
//+------------------------------------------------------------------+
void SaveLicenseKeyToFile(string key) {
    if(IsTestMode()) return;
    
    string filename = "FoxterAI_" + IntegerToString(AccountNumber()) + ".key";
    
    // ВСЕГДА используем FILE_COMMON для доступа между символами
    int handle = FileOpen(filename, FILE_WRITE | FILE_TXT | FILE_COMMON);
    
    if(handle != INVALID_HANDLE) {
        FileWriteString(handle, key);
        FileClose(handle);
        Print("✅ Ключ сохранен в общую папку: Terminal/Common/Files/", filename);
    } else {
        // Запасной вариант
        handle = FileOpen(filename, FILE_WRITE | FILE_TXT);
        if(handle != INVALID_HANDLE) {
            FileWriteString(handle, key);
            FileClose(handle);
            Print("⚠️ Ключ сохранен в локальную папку MQL4/Files/");
        } else {
            Print("❌ ОШИБКА: Не удалось сохранить ключ!");
        }
    }
}

//+------------------------------------------------------------------+
//| ПОЛУЧИТЬ СОХРАНЕННЫЙ КЛЮЧ - ПОДДЕРЖКА ТОЛЬКО UNIV              |
//+------------------------------------------------------------------+
string GetSavedLicenseKey() {
    if(IsTestMode()) {
        return "UNIV-TEST-MODE-KEY";
    }
    
    string filename = "FoxterAI_" + IntegerToString(AccountNumber()) + ".key";
    
    // Сначала ищем в FILE_COMMON
    int handle = FileOpen(filename, FILE_READ | FILE_TXT | FILE_COMMON);
    
    if(handle != INVALID_HANDLE) {
        string key = FileReadString(handle);
        FileClose(handle);
        
        // Очищаем от пробелов и невидимых символов
        string cleanKey = "";
        for(int i = 0; i < StringLen(key); i++) {
            ushort charCode = StringGetCharacter(key, i);
            if(charCode > 32 && charCode < 127) {
                cleanKey = cleanKey + CharToString((uchar)charCode);
            }
        }
        
        // ИСПРАВЛЕНО: Проверяем только UNIV ключи
        if(StringLen(cleanKey) >= 10 && StringSubstr(cleanKey, 0, 5) == "UNIV-") {
            Print("✅ UNIV ключ найден в общей папке: ", cleanKey);
            return cleanKey;
        }
    }
    
    // Если не нашли в FILE_COMMON, пробуем локальную папку
    handle = FileOpen(filename, FILE_READ | FILE_TXT);
    
    if(handle != INVALID_HANDLE) {
        string key = FileReadString(handle);
        FileClose(handle);
        
        string cleanKey = "";
        for(int i = 0; i < StringLen(key); i++) {
            ushort charCode = StringGetCharacter(key, i);
            if(charCode > 32 && charCode < 127) {
                cleanKey = cleanKey + CharToString((uchar)charCode);
            }
        }
        
        // ИСПРАВЛЕНО: Проверяем только UNIV ключи
        if(StringLen(cleanKey) >= 10 && StringSubstr(cleanKey, 0, 5) == "UNIV-") {
            Print("⚠️ UNIV ключ найден в локальной папке, перемещаем в общую...");
            SaveLicenseKeyToFile(cleanKey);
            return cleanKey;
        }
    }
    
    Print("❌ Лицензионный ключ не найден");
    return "";
}

//+------------------------------------------------------------------+
//| ИНИЦИАЛИЗАЦИЯ ЛИЦЕНЗИИ                                           |
//+------------------------------------------------------------------+
bool InitializeLicense(string licenseKey) {
    if(IsTestMode()) {
        g_LicenseKey = "UNIV-TEST-MODE-KEY";
        g_LicenseState = LICENSE_VALID;
        g_LicenseActivated = true;
        g_LicenseMessage = "Тестовый режим - лицензия не требуется";
        
        Print("=====================================");
        Print("    РЕЖИМ ТЕСТЕРА СТРАТЕГИЙ");
        Print("=====================================");
        Print("Лицензия автоматически активирована");
        Print("=====================================");
        
        return true;
    }
    
    g_LicenseKey = licenseKey;
    
    Print("=====================================");
    Print("    ИНИЦИАЛИЗАЦИЯ ЛИЦЕНЗИИ v2.0");
    Print("=====================================");
    Print("Ключ: ", licenseKey);
    Print("Счет: ", AccountNumber());
    Print("Владелец: ", GetAccountOwnerSafe());
    Print("Брокер: ", AccountCompany());
    Print("Тип счета: ", GetAccountType());
    Print("Робот: ", ROBOT_NAME, " v", ROBOT_VERSION);
    Print("=====================================");
    
    // Сбрасываем состояние
    g_LicenseState = LICENSE_UNCHECKED;
    g_LicenseActivated = false;
    g_LastSuccessfulCheck = 0;
    g_FailedChecks = 0;
    
    //--- Проверяем лицензию на сервере
    bool result = CheckLicense(true);
    
    Print("=====================================");
    Print("Результат инициализации: ", result ? "УСПЕХ" : "ОШИБКА");
    if(!result) {
        Print("Причина: ", g_LicenseMessage);
    } else {
        Print("Следующая проверка через 24 часа");
        Print("Heartbeat будет отправляться каждые 12 часов");
        Print("Автономная работа: максимум 3 дня");
    }
    Print("=====================================");
    
    return result;
}

//+------------------------------------------------------------------+
//| ПОЛНАЯ ОЧИСТКА ДАННЫХ ЛИЦЕНЗИИ                                  |
//+------------------------------------------------------------------+
void ClearAllLicenseData() {
    if(IsTestMode()) return;
    
    string filename = "FoxterAI_" + IntegerToString(AccountNumber()) + ".key";
    
    // Удаляем из обеих локаций
    FileDelete(filename, FILE_COMMON);
    FileDelete(filename);
    
    // Удаляем глобальные переменные
    GlobalVariableDel("FX_LastCheck_" + IntegerToString(AccountNumber()));
    
    // Сбрасываем переменные в памяти
    g_LicenseState = LICENSE_UNCHECKED;
    g_LicenseKey = "";
    g_LicenseExpiry = 0;
    g_LastSuccessfulCheck = 0;
    g_LastCheckAttempt = 0;
    g_FailedChecks = 0;
    g_LicenseActivated = false;
    g_LicenseMessage = "";
    
    Print("✅ Все данные лицензии очищены");
    Print("Удалены файлы из:");
    Print("- Terminal/Common/Files/", filename);
    Print("- MQL4/Files/", filename);
}