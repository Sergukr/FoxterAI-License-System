//+------------------------------------------------------------------+
//|                                                     FoxterAI.mq4 |
//|                                    –¢–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç —Å ATR-—Ç—Ä–µ–Ω–¥–æ–º  |
//|                                                    –í–µ—Ä—Å–∏—è 1.6    |
//+------------------------------------------------------------------+
#property copyright "FoxterX"
#property version   "1.60"
#property strict

//--- –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
#include "../FoxterAI_modules/1_enums.mqh"
#include "../FoxterAI_modules/2_inputs.mqh"
#include "../FoxterAI_modules/3_globals.mqh"
#include "../FoxterAI_modules/4_series_functions.mqh"
#include "../FoxterAI_modules/5_trend_functions.mqh"
#include "../FoxterAI_modules/6_filter_functions.mqh"
#include "../FoxterAI_modules/7_trading_functions.mqh"
#include "../FoxterAI_modules/8_position_management.mqh"
#include "../FoxterAI_modules/9_panel_create.mqh"
#include "../FoxterAI_modules/10_panel_update.mqh"
#include "../FoxterAI_modules/11_panel_handlers.mqh"
#include "../FoxterAI_modules/12_visualization.mqh"
#include "../FoxterAI_modules/13_license.mqh"
#include "../FoxterAI_modules/14_license_dialog.mqh"

//+------------------------------------------------------------------+
//| –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–û–í–ï–¢–ù–ò–ö–ê                                          |
//+------------------------------------------------------------------+
int OnInit() {
    Print("========================================");
    Print("    –ó–ê–ü–£–°–ö FOXTERAI v1.6");
    Print("========================================");
    Print("–°—á–µ—Ç: ", AccountNumber());
    Print("–ë—Ä–æ–∫–µ—Ä: ", AccountCompany());
    Print("–ë–∞–ª–∞–Ω—Å: ", AccountBalance());
    Print("–°–∏–º–≤–æ–ª: ", Symbol());
    Print("========================================");
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–µ—Ä–∞
    if(IsTestMode()) {
        Print("üîß –†–ï–ñ–ò–ú –¢–ï–°–¢–ï–†–ê –°–¢–†–ê–¢–ï–ì–ò–ô –ê–ö–¢–ò–í–ï–ù");
        Print("–õ–∏—Ü–µ–Ω–∑–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–Ω–∞ –≤ —Ç–µ—Å—Ç–µ—Ä–µ");
    }
    
    //--- –í–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –Ω–µ –≤ —Ç–µ—Å—Ç–µ—Ä–µ)
    if(!IsTestMode()) {
        ChartSetInteger(0, CHART_EVENT_MOUSE_MOVE, true);
        ChartSetInteger(0, CHART_EVENT_OBJECT_CREATE, true);
        ChartSetInteger(0, CHART_EVENT_OBJECT_DELETE, true);
    }
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    string licenseKey = GetSavedLicenseKey();
    
    //--- –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç –∏ –ù–ï —Ç–µ—Å—Ç–µ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞
    if(StringLen(licenseKey) == 0 && !IsTestMode()) {
        Print("‚ùó –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω");
        Print("‚ûú –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞...");
        
        ShowLicenseDialog();
        
        // –ù–ï –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–∫–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω –∫–ª—é—á
        g_BotEnabled = false;
        
        // –ù–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö —á—Ç–æ–±—ã —Å–æ–≤–µ—Ç–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–ª –∏ –∂–¥–∞–ª –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
        return(INIT_SUCCEEDED);
    }
    
    //--- –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ç–µ—Å—Ç–µ—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º
    if(IsTestMode()) {
        Print("‚úì –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é");
    } else {
        Print("‚úì –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–ª—é—á: ", licenseKey);
        Print("‚ûú –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...");
    }
    
    if(!InitializeLicense(licenseKey)) {
        // –í —Ç–µ—Å—Ç–µ—Ä–µ —ç—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
        Print("‚ùå –û–®–ò–ë–ö–ê: ", g_LicenseMessage);
        Alert("–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!\n\n", g_LicenseMessage, "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.");
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        ClearAllLicenseData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
        ShowLicenseDialog();
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
        g_BotEnabled = false;
        
        return(INIT_SUCCEEDED);
    }
    
    Print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞: ", GetLicenseStatusText());
    
    //--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    g_UseImpulse = UseImpulse;
    g_FirstLot = FirstLot;
    g_MaxOrdersBuy = MaxOrdersBuy;
    g_MaxOrdersSell = MaxOrdersSell;
    g_MartinCoeff = MartinCoeff;
    g_BasketProfitPercent = BasketProfitPercent;
    g_GridStepPercent = Grid_StepPercent;
    g_BasketType = BasketType;
    g_BasketAfterN = BasketAfterNOrders;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É—á–µ—Ç–∞ –∏–∑–¥–µ—Ä–∂–µ–∫
    g_IncludeCommissionSwap = IncludeCommissionSwap;
    g_EstimatedCommissionPerLot = EstimatedCommissionPerLot;
    g_SlippagePercent = SlippagePercent;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–∞–Ω–µ–ª–∏ –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    g_PanelPosX = PanelX;
    g_PanelPosY = PanelY;
    
    Print("–ü–æ–∑–∏—Ü–∏—è –ø–∞–Ω–µ–ª–∏: X=", g_PanelPosX, " Y=", g_PanelPosY);
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if(g_FirstLot < MarketInfo(Symbol(), MODE_MINLOT)) {
        Alert("–ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ!");
        return(INIT_PARAMETERS_INCORRECT);
    }
    
    //--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä —Å–µ—Ä–∏–π
    ResetSeriesInfo(g_BuySeries);
    ResetSeriesInfo(g_SellSeries);
    
    //--- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    LoadSettings();
    
    //--- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
    DetectInitialTrend();
    
    //--- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if(ShowPanel) {
        Print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...");
        CreateInteractivePanel();
        if(!IsTestMode()) {
            ChartSetInteger(0, CHART_EVENT_MOUSE_MOVE, true);
        }
    } else {
        Print("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");
    }
    
    Print("========================================");
    Print("‚úÖ –°–û–í–ï–¢–ù–ò–ö –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï");
    Print("–†–æ–±–æ—Ç: ", g_BotEnabled ? "–í–ö–õ–Æ–ß–ï–ù" : "–í–´–ö–õ–Æ–ß–ï–ù (–Ω–∞–∂–º–∏—Ç–µ START –Ω–∞ –ø–∞–Ω–µ–ª–∏)");
    Print("–ò–º–ø—É–ª—å—Å: ", g_UseImpulse ? "–í–ö–õ–Æ–ß–ï–ù (–∂–¥–µ–º –∏–º–ø—É–ª—å—Å)" : "–í–´–ö–õ–Æ–ß–ï–ù (–≤—Ö–æ–¥ –ø–æ —Ç—Ä–µ–Ω–¥—É)");
    Print("–¢—Ä–µ–Ω–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: ", g_TrendState == TREND_BUY ? "BUY ‚Üë" : 
          (g_TrendState == TREND_SELL ? "SELL ‚Üì" : "–ù–ï –û–ü–†–ï–î–ï–õ–ï–ù"));
    if(IsTestMode()) {
        Print("üîß –†–ï–ñ–ò–ú –¢–ï–°–¢–ï–†–ê: –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è");
    } else {
        Print("üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏: —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏");
        Print("üíì Heartbeat: —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤");
    }
    Print("========================================");
    
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| –î–ï–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø                                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason) {
    //--- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–Ω–µ –≤ —Ç–µ—Å—Ç–µ—Ä–µ)
    if(!IsTestMode()) {
        SaveSettings();
    }
    
    //--- –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
    DeletePanel();
    
    //--- –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
    if(g_LicenseDialogOpen) {
        CloseLicenseDialog();
    }
    
    //--- –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    DeleteVisualObjects();
    
    string reasonText = "";
    switch(reason) {
        case REASON_PROGRAM:     reasonText = "–°–æ–≤–µ—Ç–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; break;
        case REASON_REMOVE:      reasonText = "–°–æ–≤–µ—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω —Å –≥—Ä–∞—Ñ–∏–∫–∞"; break;
        case REASON_RECOMPILE:   reasonText = "–ü–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—è"; break;
        case REASON_CHARTCHANGE: reasonText = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∞"; break;
        case REASON_CHARTCLOSE:  reasonText = "–ì—Ä–∞—Ñ–∏–∫ –∑–∞–∫—Ä—ã—Ç"; break;
        case REASON_PARAMETERS:  reasonText = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"; break;
        case REASON_ACCOUNT:     reasonText = "–°–º–µ–Ω–∞ —Å—á–µ—Ç–∞"; break;
        default:                 reasonText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞";
    }
    
    Print("========================================");
    Print("–°–û–í–ï–¢–ù–ò–ö –û–°–¢–ê–ù–û–í–õ–ï–ù");
    Print("–ü—Ä–∏—á–∏–Ω–∞: ", reasonText);
    Print("========================================");
}

//+------------------------------------------------------------------+
//| –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ò–ö–ê - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø                           |
//+------------------------------------------------------------------+
void OnTick() {
    //--- –í –¢–ï–°–¢–ï–†–ï –ù–ï –ü–†–û–í–ï–†–Ø–ï–ú –î–ò–ê–õ–û–ì –ò –õ–ò–¶–ï–ù–ó–ò–Æ
    if(!IsTestMode()) {
        //--- –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –ª–∏—Ü–µ–Ω–∑–∏–∏ –æ—Ç–∫—Ä—ã—Ç - –∂–¥–µ–º –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
        if(g_LicenseDialogOpen) {
            return; // –ù–µ —Ç–æ—Ä–≥—É–µ–º –ø–æ–∫–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω –∫–ª—é—á
        }
        
        //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –†–ê–ó –í –°–£–¢–ö–ò (–ù–ï –í –¢–ï–°–¢–ï–†–ï!)
        static datetime lastLicenseCheck = 0;
        if(TimeCurrent() - lastLicenseCheck > 86400) { // –†–ê–ó –í –°–£–¢–ö–ò (24 —á–∞—Å–∞)
            lastLicenseCheck = TimeCurrent();
            
            Print("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏...");
            
            if(!CheckLicense()) {
                // –ï—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è —Å—Ç–∞–ª–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π
                g_BotEnabled = false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–±–æ—Ç–∞
                
                // –ï—Å–ª–∏ –∫–ª—é—á —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
                if(g_LicenseState == LICENSE_INVALID && 
                   (StringFind(g_LicenseMessage, "—É–¥–∞–ª–µ–Ω") >= 0 || StringFind(g_LicenseMessage, "–Ω–µ –Ω–∞–π–¥–µ–Ω") >= 0)) {
                    Alert("–õ–∏—Ü–µ–Ω–∑–∏—è —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.");
                    ClearAllLicenseData(); // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                    ShowLicenseDialog();   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
                } else {
                    Alert("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞! –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n" + g_LicenseMessage);
                }
                
                Print("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: ", g_LicenseMessage);
            } else {
                Print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: ", GetLicenseStatusText());
            }
        }
        
        //--- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat —Ä–∞–∑ –≤ 12 –ß–ê–°–û–í (–ù–ï –í –¢–ï–°–¢–ï–†–ï!)
        static datetime lastHeartbeat = 0;
        if(TimeCurrent() - lastHeartbeat > 43200) { // 12 –ß–ê–°–û–í
            lastHeartbeat = TimeCurrent();
            if(IsLicenseValidForTrading()) {
                SendHeartbeat();
            }
        }
    }
    
    //--- –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
    g_ButtonClicked = false;
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–æ–±–æ—Ç –ò –ª–∏—Ü–µ–Ω–∑–∏—è –≤–∞–ª–∏–¥–Ω–∞
    if(!g_BotEnabled || !IsLicenseValidForTrading()) {
        if(ShowPanel) UpdateInteractivePanel();
        
        //--- –ü—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –º–æ–∂–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏
        if(!IsLicenseValidForTrading() && (g_BuySeries.active || g_SellSeries.active)) {
            ManagePositions(); // –¢–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TP –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        }
        return;
    }
    
    //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–∏–π
    UpdateSeriesInfo();
    
    //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    UpdateStatistics();
    
    //--- –®–í–ï–ô–¶–ê–†–°–ö–ê–Ø –õ–û–ì–ò–ö–ê –í–•–û–î–ê –í –†–´–ù–û–ö
    //--- –†–∞–∑–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —Å –∏–º–ø—É–ª—å—Å–æ–º –∏ –±–µ–∑
    
    if(g_UseImpulse) {
        //========================================
        // –†–ï–ñ–ò–ú –° –ò–ú–ü–£–õ–¨–°–û–ú - —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±–∞—Ä–∞–º
        //========================================
        
        //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –±–∞—Ä–∞ –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ —Ç—Ä–µ–Ω–¥–∞
        static datetime lastTrendBar = 0;
        datetime currentTrendBar = iTime(Symbol(), TrendTimeframe, 0);
        if(lastTrendBar != currentTrendBar) {
            lastTrendBar = currentTrendBar;
            
            //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            UpdateTrend();
        }
        
        //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –±–∞—Ä–∞ –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ –∏–º–ø—É–ª—å—Å–∞
        static datetime lastImpulseBar = 0;
        datetime currentImpulseBar = iTime(Symbol(), ImpulseTimeframe, 0);
        if(lastImpulseBar != currentImpulseBar) {
            lastImpulseBar = currentImpulseBar;
            
            //--- –ü–æ–∏—Å–∫ –∏–º–ø—É–ª—å—Å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            CheckImpulseSignal();
        }
    }
    else {
        //========================================
        // –†–ï–ñ–ò–ú –ë–ï–ó –ò–ú–ü–£–õ–¨–°–ê - —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ —Ç–∏–∫–∞–º
        //========================================
        
        //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–æ–≤–æ–º –±–∞—Ä–µ
        static datetime lastTrendBarNoImpulse = 0;
        datetime currentTrendBarNoImpulse = iTime(Symbol(), TrendTimeframe, 0);
        if(lastTrendBarNoImpulse != currentTrendBarNoImpulse) {
            lastTrendBarNoImpulse = currentTrendBarNoImpulse;
            
            //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            UpdateTrend();
        }
        
        //--- –ü–†–û–í–ï–†–ö–ê –í–•–û–î–ê –ù–ê –ö–ê–ñ–î–û–ú –¢–ò–ö–ï (–±–µ–∑ –∏–º–ø—É–ª—å—Å–∞)
        CheckEntryWithoutImpulse();
    }
    
    //--- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ (–≤—Å–µ–≥–¥–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–∏–∫–µ)
    ManagePositions();
    
    //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ TP
    if(ShowVisualObjects && ShowTPLevels) {
        DrawTPLevels();
    }
    
    //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
    if(ShowPanel) {
        UpdateInteractivePanel();
    }
}

//+------------------------------------------------------------------+
//| –ü–†–û–í–ï–†–ö–ê –í–•–û–î–ê –ë–ï–ó –ò–ú–ü–£–õ–¨–°–ê - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø                    |
//+------------------------------------------------------------------+
void CheckEntryWithoutImpulse() {
    //--- –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ö–ê–ñ–î–û–ú —Ç–∏–∫–µ –∫–æ–≥–¥–∞ –∏–º–ø—É–ª—å—Å –≤—ã–∫–ª—é—á–µ–Ω
    
    //--- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
    bool canBuy = (g_TradeDirection == TRADE_BOTH || g_TradeDirection == TRADE_BUY_ONLY);
    bool canSell = (g_TradeDirection == TRADE_BOTH || g_TradeDirection == TRADE_SELL_ONLY);
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è BUY
    if(g_TrendState == TREND_BUY && canBuy) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –Ω–∞–ª–∏—á–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
        if(!HasActiveOrders(OP_BUY)) {
            //--- –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Ñ–∏–ª—å—Ç—Ä—ã –≤–∫–ª—é—á–∞—è —Å–ø—Ä–µ–¥
            if(CheckFilters()) {
                Print("üí´ –í—Ö–æ–¥ –ø–æ —Ç—Ä–µ–Ω–¥—É BUY (–∏–º–ø—É–ª—å—Å –í–´–ö–õ) - –æ—Ç–∫—Ä—ã–≤–∞–µ–º!");
                OpenPosition(OP_BUY);
            } else {
                //--- –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
                static datetime lastLogBuy = 0;
                if(TimeCurrent() - lastLogBuy > 60) {
                    lastLogBuy = TimeCurrent();
                    double currentSpread = MarketInfo(Symbol(), MODE_SPREAD);
                    double marginLevel = AccountInfoDouble(ACCOUNT_MARGIN_LEVEL);
                    Print("‚è∏ BUY –≤—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–ø—Ä–µ–¥: ", currentSpread, "/", MaxSpread, 
                          " –ø—É–Ω–∫—Ç–æ–≤, –£—Ä–æ–≤–µ–Ω—å –º–∞—Ä–∂–∏: ", marginLevel, "%");
                }
            }
        }
    }
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è SELL
    if(g_TrendState == TREND_SELL && canSell) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –Ω–∞–ª–∏—á–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
        if(!HasActiveOrders(OP_SELL)) {
            //--- –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Ñ–∏–ª—å—Ç—Ä—ã –≤–∫–ª—é—á–∞—è —Å–ø—Ä–µ–¥
            if(CheckFilters()) {
                Print("üí´ –í—Ö–æ–¥ –ø–æ —Ç—Ä–µ–Ω–¥—É SELL (–∏–º–ø—É–ª—å—Å –í–´–ö–õ) - –æ—Ç–∫—Ä—ã–≤–∞–µ–º!");
                OpenPosition(OP_SELL);
            } else {
                //--- –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
                static datetime lastLogSell = 0;
                if(TimeCurrent() - lastLogSell > 60) {
                    lastLogSell = TimeCurrent();
                    double currentSpread = MarketInfo(Symbol(), MODE_SPREAD);
                    double marginLevel = AccountInfoDouble(ACCOUNT_MARGIN_LEVEL);
                    Print("‚è∏ SELL –≤—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–ø—Ä–µ–¥: ", currentSpread, "/", MaxSpread, 
                          " –ø—É–Ω–∫—Ç–æ–≤, –£—Ä–æ–≤–µ–Ω—å –º–∞—Ä–∂–∏: ", marginLevel, "%");
                }
            }
        }
    }
}

//+------------------------------------------------------------------+
//| –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô –ì–†–ê–§–ò–ö–ê - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø                       |
//+------------------------------------------------------------------+
void OnChartEvent(const int id, const long &lparam, const double &dparam, const string &sparam) {
    //--- –í —Ç–µ—Å—Ç–µ—Ä–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    if(IsTestMode()) return;
    
    //--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if(g_LicenseDialogOpen) {
        if(id == CHARTEVENT_OBJECT_CLICK) {
            if(HandleLicenseDialogClick(sparam) == true) {
                //--- –ï—Å–ª–∏ –∫–ª—é—á –±—ã–ª –≤–≤–µ–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
                if(StringLen(g_EnteredLicenseKey) > 0) {
                    Print("–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –≤–≤–µ–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º...");
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
                    if(InitializeLicense(g_EnteredLicenseKey)) {
                        Print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
                        Alert("–õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n–°–æ–≤–µ—Ç–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.");
                        
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                        g_BotEnabled = true;
                        LoadSettings();
                        DetectInitialTrend();
                        if(ShowPanel) {
                            CreateInteractivePanel();
                        }
                    } else {
                        Alert("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏:\n\n" + g_LicenseMessage);
                        Print("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ", g_LicenseMessage);
                        
                        // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π
                        ShowLicenseDialog();
                    }
                }
                return;
            }
        }
        return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–∫–∞ –æ—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥
    }
    
    //--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–Ω–µ–ª–∏
    if(id == CHARTEVENT_OBJECT_CLICK) {
        if(StringFind(sparam, PANEL_PREFIX) == 0) {
            HandleButtonClick(sparam);
            ChartRedraw();
            return; // –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
        }
    }
    
    //--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
    if(id == CHARTEVENT_MOUSE_MOVE) {
        int mouseX = (int)lparam;
        int mouseY = (int)dparam;
        int mouseState = (int)StringToInteger(sparam);
        
        //--- –ï—Å–ª–∏ –±—ã–ª –∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        if(g_ButtonClicked) {
            g_PanelDragging = false;
            return;
        }
        
        //--- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º—ã—à—å –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π
        bool mouseOverButton = false;
        for(int i = 0; i < ObjectsTotal(); i++) {
            string objName = ObjectName(i);
            if(StringFind(objName, PANEL_PREFIX + "Btn") == 0 || 
               StringFind(objName, PANEL_PREFIX + "Edit") == 0) {
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–∞
                int objX = (int)ObjectGetInteger(0, objName, OBJPROP_XDISTANCE);
                int objY = (int)ObjectGetInteger(0, objName, OBJPROP_YDISTANCE);
                int objWidth = (int)ObjectGetInteger(0, objName, OBJPROP_XSIZE);
                int objHeight = (int)ObjectGetInteger(0, objName, OBJPROP_YSIZE);
                
                if(mouseX >= objX && mouseX <= objX + objWidth &&
                   mouseY >= objY && mouseY <= objY + objHeight) {
                    mouseOverButton = true;
                    break;
                }
            }
        }
        
        //--- –ï—Å–ª–∏ –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ –Ω–∞–∂–∞—Ç–∞
        if((mouseState & 1) != 0) {
            if(!g_PanelDragging) {
                //--- –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –º—ã—à—å –Ω–∞–¥ –ø–∞–Ω–µ–ª—å—é, –Ω–æ –ù–ï –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π
                if(IsMouseOverPanel(mouseX, mouseY) && !mouseOverButton) {
                    g_PanelDragging = true;
                    g_DragOffsetX = mouseX - g_PanelPosX;
                    g_DragOffsetY = mouseY - g_PanelPosY;
                }
            } else {
                //--- –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–∞–Ω–µ–ª—å
                int newX = mouseX - g_DragOffsetX;
                int newY = mouseY - g_DragOffsetY;
                
                //--- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥—Ä–∞—Ñ–∏–∫–∞
                newX = MathMax(0, newX);
                newY = MathMax(0, newY);
                
                MovePanel(newX, newY);
            }
        } else {
            //--- –û—Ç–ø—É—Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–∫—É –º—ã—à–∏
            g_PanelDragging = false;
        }
    }
}