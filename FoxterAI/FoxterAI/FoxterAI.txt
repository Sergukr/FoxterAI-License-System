//+------------------------------------------------------------------+
//|                                 FoxterAI_OPTIMIZATION_FIXED.mq4 |
//|                                    –¢–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç —Å ATR-—Ç—Ä–µ–Ω–¥–æ–º  |
//|                          –í–µ—Ä—Å–∏—è 1.6 - –ò–°–ü–†–ê–í–õ–ï–ù–û –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò |
//+------------------------------------------------------------------+
#property copyright "FoxterX"
#property version   "1.60"
#property strict

//--- –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
#include "../FoxterAI_modules/1_enums.mqh"
#include "../FoxterAI_modules/2_inputs.mqh"
#include "../FoxterAI_modules/3_globals.mqh"
#include "../FoxterAI_modules/4_series_functions.mqh"
#include "../FoxterAI_modules/5_trend_functions.mqh"
#include "../FoxterAI_modules/6_filter_functions.mqh"
#include "../FoxterAI_modules/7_trading_functions.mqh"
#include "../FoxterAI_modules/8_position_management.mqh"
#include "../FoxterAI_modules/9_panel_create.mqh"
#include "../FoxterAI_modules/10_panel_update.mqh"
#include "../FoxterAI_modules/11_panel_handlers.mqh"
#include "../FoxterAI_modules/12_visualization.mqh"
#include "../FoxterAI_modules/13_license.mqh"
#include "../FoxterAI_modules/14_license_dialog.mqh"

//+------------------------------------------------------------------+
//| –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–û–í–ï–¢–ù–ò–ö–ê - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –î–õ–Ø –¢–ï–°–¢–ï–†–ê          |
//+------------------------------------------------------------------+
int OnInit() {
    //--- –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
    if(IsOptimization()) {
        Print("========================================");
        Print("    –†–ï–ñ–ò–ú –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ê–ö–¢–ò–í–ï–ù");
        Print("========================================");
        Print("–°—á–µ—Ç: ", AccountNumber());
        Print("–°–∏–º–≤–æ–ª: ", Symbol());
        Print("MagicNumber: ", MagicNumber);
        Print("========================================");
        
        //--- –í —Ä–µ–∂–∏–º–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏
        g_LicenseState = LICENSE_VALID;
        g_LicenseActivated = true;
        g_LicenseMessage = "–†–µ–∂–∏–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏";
        
        //--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¢–û–õ–¨–ö–û –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        g_BotEnabled = EnableTrading;
        g_TradeDirection = TradeDirection;
        g_UseImpulse = UseImpulse;
        g_FirstLot = FirstLot;
        g_MaxOrdersBuy = MaxOrdersBuy;
        g_MaxOrdersSell = MaxOrdersSell;
        g_MartinCoeff = MartinCoeff;
        g_BasketProfitPercent = BasketProfitPercent;
        g_GridStepPercent = Grid_StepPercent;
        g_BasketType = BasketType;
        g_BasketAfterN = BasketAfterNOrders;
        g_IncludeCommissionSwap = IncludeCommissionSwap;
        g_EstimatedCommissionPerLot = EstimatedCommissionPerLot;
        g_SlippagePercent = SlippagePercent;
        
        //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if(g_FirstLot < MarketInfo(Symbol(), MODE_MINLOT)) {
            Print("–û–®–ò–ë–ö–ê: –ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ!");
            return(INIT_PARAMETERS_INCORRECT);
        }
        
        //--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä —Å–µ—Ä–∏–π
        ResetSeriesInfo(g_BuySeries);
        ResetSeriesInfo(g_SellSeries);
        
        //--- –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏!
        //--- –ù–ï —Å–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏!
        
        //--- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
        DetectInitialTrend();
        
        Print("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:");
        Print("- FirstLot: ", g_FirstLot);
        Print("- MartinCoeff: ", g_MartinCoeff);
        Print("- GridStep%: ", g_GridStepPercent);
        Print("- BasketProfit%: ", g_BasketProfitPercent);
        Print("- MaxOrdersBuy: ", g_MaxOrdersBuy);
        Print("- MaxOrdersSell: ", g_MaxOrdersSell);
        Print("========================================");
        
        return(INIT_SUCCEEDED);
    }
    
    //--- –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú (–ù–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø)
    Print("========================================");
    Print("    –ó–ê–ü–£–°–ö FOXTERAI v1.6");
    Print("========================================");
    Print("–°—á–µ—Ç: ", AccountNumber());
    Print("–ë—Ä–æ–∫–µ—Ä: ", AccountCompany());
    Print("–ë–∞–ª–∞–Ω—Å: ", AccountBalance());
    Print("–°–∏–º–≤–æ–ª: ", Symbol());
    Print("========================================");
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–µ—Ä–∞
    if(IsTesting() || IsVisualMode()) {
        Print("üîß –†–ï–ñ–ò–ú –¢–ï–°–¢–ï–†–ê –°–¢–†–ê–¢–ï–ì–ò–ô –ê–ö–¢–ò–í–ï–ù");
        Print("–õ–∏—Ü–µ–Ω–∑–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–Ω–∞ –≤ —Ç–µ—Å—Ç–µ—Ä–µ");
        
        //--- –í —Ç–µ—Å—Ç–µ—Ä–µ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
        g_LicenseState = LICENSE_VALID;
        g_LicenseActivated = true;
        g_LicenseMessage = "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º";
    }
    else {
        //--- –†–ï–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        ChartSetInteger(0, CHART_EVENT_MOUSE_MOVE, true);
        ChartSetInteger(0, CHART_EVENT_OBJECT_CREATE, true);
        ChartSetInteger(0, CHART_EVENT_OBJECT_DELETE, true);
        
        //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
        string licenseKey = GetSavedLicenseKey();
        
        //--- –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞
        if(StringLen(licenseKey) == 0) {
            Print("‚ùó –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω");
            Print("‚ûú –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞...");
            
            ShowLicenseDialog();
            g_BotEnabled = false;
            return(INIT_SUCCEEDED);
        }
        
        //--- –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º
        Print("‚úì –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–ª—é—á: ", licenseKey);
        Print("‚ûú –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...");
        
        if(!InitializeLicense(licenseKey)) {
            Print("‚ùå –û–®–ò–ë–ö–ê: ", g_LicenseMessage);
            Alert("–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!\n\n", g_LicenseMessage, "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.");
            
            ClearAllLicenseData();
            ShowLicenseDialog();
            g_BotEnabled = false;
            
            return(INIT_SUCCEEDED);
        }
        
        Print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞: ", GetLicenseStatusText());
    }
    
    //--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    g_BotEnabled = EnableTrading;
    g_TradeDirection = TradeDirection;
    g_UseImpulse = UseImpulse;
    g_FirstLot = FirstLot;
    g_MaxOrdersBuy = MaxOrdersBuy;
    g_MaxOrdersSell = MaxOrdersSell;
    g_MartinCoeff = MartinCoeff;
    g_BasketProfitPercent = BasketProfitPercent;
    g_GridStepPercent = Grid_StepPercent;
    g_BasketType = BasketType;
    g_BasketAfterN = BasketAfterNOrders;
    g_IncludeCommissionSwap = IncludeCommissionSwap;
    g_EstimatedCommissionPerLot = EstimatedCommissionPerLot;
    g_SlippagePercent = SlippagePercent;
    
    //--- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–∞–Ω–µ–ª–∏ –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    g_PanelPosX = PanelX;
    g_PanelPosY = PanelY;
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if(g_FirstLot < MarketInfo(Symbol(), MODE_MINLOT)) {
        Alert("–ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ!");
        return(INIT_PARAMETERS_INCORRECT);
    }
    
    //--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä —Å–µ—Ä–∏–π
    ResetSeriesInfo(g_BuySeries);
    ResetSeriesInfo(g_SellSeries);
    
    //--- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ù–ï –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    if(!IsTesting() && !IsOptimization() && !IsVisualMode()) {
        LoadSettings();
    }
    
    //--- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
    DetectInitialTrend();
    
    //--- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ù–ï –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    if(ShowPanel && !IsOptimization()) {
        Print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...");
        CreateInteractivePanel();
        if(!IsTestMode()) {
            ChartSetInteger(0, CHART_EVENT_MOUSE_MOVE, true);
        }
    } else if(IsOptimization()) {
        Print("–ü–∞–Ω–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏");
    } else {
        Print("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");
    }
    
    Print("========================================");
    Print("‚úÖ –°–û–í–ï–¢–ù–ò–ö –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï");
    Print("–†–æ–±–æ—Ç: ", g_BotEnabled ? "–í–ö–õ–Æ–ß–ï–ù" : "–í–´–ö–õ–Æ–ß–ï–ù");
    Print("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ", g_TradeDirection == TRADE_BOTH ? "BOTH" : 
          (g_TradeDirection == TRADE_BUY_ONLY ? "BUY ONLY" : "SELL ONLY"));
    Print("–ò–º–ø—É–ª—å—Å: ", g_UseImpulse ? "–í–ö–õ–Æ–ß–ï–ù" : "–í–´–ö–õ–Æ–ß–ï–ù");
    Print("–¢—Ä–µ–Ω–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: ", g_TrendState == TREND_BUY ? "BUY ‚Üë" : 
          (g_TrendState == TREND_SELL ? "SELL ‚Üì" : "–ù–ï –û–ü–†–ï–î–ï–õ–ï–ù"));
    
    if(IsOptimization()) {
        Print("üîß –†–ï–ñ–ò–ú –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò: –ü–∞–Ω–µ–ª—å –∏ –ª–∏—Ü–µ–Ω–∑–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
    } else if(IsTestMode()) {
        Print("üîß –†–ï–ñ–ò–ú –¢–ï–°–¢–ï–†–ê: –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è");
    } else {
        Print("üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏: —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏");
        Print("üíì Heartbeat: —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤");
    }
    Print("========================================");
    
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| –î–ï–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø                              |
//+------------------------------------------------------------------+
void OnDeinit(const int reason) {
    //--- –í —Ä–µ–∂–∏–º–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if(IsOptimization()) {
        return;
    }
    
    //--- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ù–ï –≤ —Ç–µ—Å—Ç–µ—Ä–µ –∏ –ù–ï –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    if(!IsTestMode() && !IsOptimization()) {
        SaveSettings();
    }
    
    //--- –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
    DeletePanel();
    
    //--- –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
    if(g_LicenseDialogOpen) {
        CloseLicenseDialog();
    }
    
    //--- –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    DeleteVisualObjects();
    
    string reasonText = "";
    switch(reason) {
        case REASON_PROGRAM:     reasonText = "–°–æ–≤–µ—Ç–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; break;
        case REASON_REMOVE:      reasonText = "–°–æ–≤–µ—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω —Å –≥—Ä–∞—Ñ–∏–∫–∞"; break;
        case REASON_RECOMPILE:   reasonText = "–ü–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—è"; break;
        case REASON_CHARTCHANGE: reasonText = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∞"; break;
        case REASON_CHARTCLOSE:  reasonText = "–ì—Ä–∞—Ñ–∏–∫ –∑–∞–∫—Ä—ã—Ç"; break;
        case REASON_PARAMETERS:  reasonText = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"; break;
        case REASON_ACCOUNT:     reasonText = "–°–º–µ–Ω–∞ —Å—á–µ—Ç–∞"; break;
        default:                 reasonText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞";
    }
    
    if(!IsOptimization()) {
        Print("========================================");
        Print("–°–û–í–ï–¢–ù–ò–ö –û–°–¢–ê–ù–û–í–õ–ï–ù");
        Print("–ü—Ä–∏—á–∏–Ω–∞: ", reasonText);
        Print("========================================");
    }
}

//+------------------------------------------------------------------+
//| –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ò–ö–ê - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø                        |
//+------------------------------------------------------------------+
void OnTick() {
    //--- –í –†–ï–ñ–ò–ú–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò - –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    if(IsOptimization()) {
        //--- –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏–∏
        //--- –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
        //--- –ù–ï —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ñ–∞–π–ª–∞–º–∏
        
        //--- –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–æ–±–æ—Ç
        if(!g_BotEnabled) {
            return;
        }
        
        //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–∏–π
        UpdateSeriesInfo();
        
        //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
        UpdateStatistics();
        
        //--- –¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê
        if(g_UseImpulse) {
            //--- –†–µ–∂–∏–º —Å –∏–º–ø—É–ª—å—Å–æ–º
            static datetime lastTrendBar = 0;
            datetime currentTrendBar = iTime(Symbol(), TrendTimeframe, 0);
            if(lastTrendBar != currentTrendBar) {
                lastTrendBar = currentTrendBar;
                UpdateTrend();
            }
            
            static datetime lastImpulseBar = 0;
            datetime currentImpulseBar = iTime(Symbol(), ImpulseTimeframe, 0);
            if(lastImpulseBar != currentImpulseBar) {
                lastImpulseBar = currentImpulseBar;
                CheckImpulseSignal();
            }
        }
        else {
            //--- –†–µ–∂–∏–º –±–µ–∑ –∏–º–ø—É–ª—å—Å–∞
            static datetime lastTrendBarNoImpulse = 0;
            datetime currentTrendBarNoImpulse = iTime(Symbol(), TrendTimeframe, 0);
            if(lastTrendBarNoImpulse != currentTrendBarNoImpulse) {
                lastTrendBarNoImpulse = currentTrendBarNoImpulse;
                UpdateTrend();
            }
            
            CheckEntryWithoutImpulse();
        }
        
        //--- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
        ManagePositions();
        
        return; // –í—ã—Ö–æ–¥–∏–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
    }
    
    //--- –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú (–ù–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø)
    
    //--- –í –¢–ï–°–¢–ï–†–ï –ù–ï –ü–†–û–í–ï–†–Ø–ï–ú –î–ò–ê–õ–û–ì –ò –õ–ò–¶–ï–ù–ó–ò–Æ
    if(!IsTestMode()) {
        //--- –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –ª–∏—Ü–µ–Ω–∑–∏–∏ –æ—Ç–∫—Ä—ã—Ç - –∂–¥–µ–º –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
        if(g_LicenseDialogOpen) {
            return;
        }
        
        //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –†–ê–ó –í –°–£–¢–ö–ò
        static datetime lastLicenseCheck = 0;
        if(TimeCurrent() - lastLicenseCheck > 86400) {
            lastLicenseCheck = TimeCurrent();
            
            Print("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏...");
            
            if(!CheckLicense()) {
                g_BotEnabled = false;
                
                if(g_LicenseState == LICENSE_INVALID && 
                   (StringFind(g_LicenseMessage, "—É–¥–∞–ª–µ–Ω") >= 0 || StringFind(g_LicenseMessage, "–Ω–µ –Ω–∞–π–¥–µ–Ω") >= 0)) {
                    Alert("–õ–∏—Ü–µ–Ω–∑–∏—è —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.");
                    ClearAllLicenseData();
                    ShowLicenseDialog();
                } else {
                    Alert("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞! –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n" + g_LicenseMessage);
                }
                
                Print("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: ", g_LicenseMessage);
            } else {
                Print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: ", GetLicenseStatusText());
            }
        }
        
        //--- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat —Ä–∞–∑ –≤ 12 –ß–ê–°–û–í
        static datetime lastHeartbeat = 0;
        if(TimeCurrent() - lastHeartbeat > 43200) {
            lastHeartbeat = TimeCurrent();
            if(IsLicenseValidForTrading()) {
                SendHeartbeat();
            }
        }
    }
    
    //--- –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
    g_ButtonClicked = false;
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–æ–±–æ—Ç –ò –ª–∏—Ü–µ–Ω–∑–∏—è –≤–∞–ª–∏–¥–Ω–∞
    if(!g_BotEnabled || !IsLicenseValidForTrading()) {
        if(ShowPanel) UpdateInteractivePanel();
        
        if(!IsLicenseValidForTrading() && (g_BuySeries.active || g_SellSeries.active)) {
            ManagePositions();
        }
        return;
    }
    
    //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–∏–π
    UpdateSeriesInfo();
    
    //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    UpdateStatistics();
    
    //--- –¢–û–†–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê
    if(g_UseImpulse) {
        //--- –†–µ–∂–∏–º —Å –∏–º–ø—É–ª—å—Å–æ–º
        static datetime lastTrendBar = 0;
        datetime currentTrendBar = iTime(Symbol(), TrendTimeframe, 0);
        if(lastTrendBar != currentTrendBar) {
            lastTrendBar = currentTrendBar;
            UpdateTrend();
        }
        
        static datetime lastImpulseBar = 0;
        datetime currentImpulseBar = iTime(Symbol(), ImpulseTimeframe, 0);
        if(lastImpulseBar != currentImpulseBar) {
            lastImpulseBar = currentImpulseBar;
            CheckImpulseSignal();
        }
    }
    else {
        //--- –†–µ–∂–∏–º –±–µ–∑ –∏–º–ø—É–ª—å—Å–∞
        static datetime lastTrendBarNoImpulse = 0;
        datetime currentTrendBarNoImpulse = iTime(Symbol(), TrendTimeframe, 0);
        if(lastTrendBarNoImpulse != currentTrendBarNoImpulse) {
            lastTrendBarNoImpulse = currentTrendBarNoImpulse;
            UpdateTrend();
        }
        
        CheckEntryWithoutImpulse();
    }
    
    //--- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    ManagePositions();
    
    //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ TP
    if(ShowVisualObjects && ShowTPLevels) {
        DrawTPLevels();
    }
    
    //--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
    if(ShowPanel) {
        UpdateInteractivePanel();
    }
}

//+------------------------------------------------------------------+
//| –ü–†–û–í–ï–†–ö–ê –í–•–û–î–ê –ë–ï–ó –ò–ú–ü–£–õ–¨–°–ê                                     |
//+------------------------------------------------------------------+
void CheckEntryWithoutImpulse() {
    //--- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
    bool canBuy = (g_TradeDirection == TRADE_BOTH || g_TradeDirection == TRADE_BUY_ONLY);
    bool canSell = (g_TradeDirection == TRADE_BOTH || g_TradeDirection == TRADE_SELL_ONLY);
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è BUY
    if(g_TrendState == TREND_BUY && canBuy) {
        if(!HasActiveOrders(OP_BUY)) {
            if(CheckFilters()) {
                if(!IsOptimization()) {
                    Print("üí´ –í—Ö–æ–¥ –ø–æ —Ç—Ä–µ–Ω–¥—É BUY (–∏–º–ø—É–ª—å—Å –í–´–ö–õ) - –æ—Ç–∫—Ä—ã–≤–∞–µ–º!");
                }
                OpenPosition(OP_BUY);
            }
        }
    }
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è SELL
    if(g_TrendState == TREND_SELL && canSell) {
        if(!HasActiveOrders(OP_SELL)) {
            if(CheckFilters()) {
                if(!IsOptimization()) {
                    Print("üí´ –í—Ö–æ–¥ –ø–æ —Ç—Ä–µ–Ω–¥—É SELL (–∏–º–ø—É–ª—å—Å –í–´–ö–õ) - –æ—Ç–∫—Ä—ã–≤–∞–µ–º!");
                }
                OpenPosition(OP_SELL);
            }
        }
    }
}

//+------------------------------------------------------------------+
//| –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô –ì–†–ê–§–ò–ö–ê - –û–¢–ö–õ–Æ–ß–ï–ù–ê –ü–†–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò          |
//+------------------------------------------------------------------+
void OnChartEvent(const int id, const long &lparam, const double &dparam, const string &sparam) {
    //--- –í —Ä–µ–∂–∏–º–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    if(IsOptimization()) return;
    
    //--- –í —Ç–µ—Å—Ç–µ—Ä–µ —Ç–æ–∂–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    if(IsTestMode()) return;
    
    //--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if(g_LicenseDialogOpen) {
        if(id == CHARTEVENT_OBJECT_CLICK) {
            if(HandleLicenseDialogClick(sparam) == true) {
                //--- –ï—Å–ª–∏ –∫–ª—é—á –±—ã–ª –≤–≤–µ–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
                if(StringLen(g_EnteredLicenseKey) > 0) {
                    Print("–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –≤–≤–µ–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º...");
                    
                    if(InitializeLicense(g_EnteredLicenseKey)) {
                        Print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
                        Alert("–õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n–°–æ–≤–µ—Ç–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.");
                        
                        g_BotEnabled = EnableTrading;
                        g_TradeDirection = TradeDirection;
                        LoadSettings();
                        DetectInitialTrend();
                        if(ShowPanel) {
                            CreateInteractivePanel();
                        }
                    } else {
                        Alert("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏:\n\n" + g_LicenseMessage);
                        Print("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ", g_LicenseMessage);
                        ShowLicenseDialog();
                    }
                }
                return;
            }
        }
        return;
    }
    
    //--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    if(id == CHARTEVENT_OBJECT_ENDEDIT) {
        if(StringFind(sparam, PANEL_PREFIX + "Edit") == 0) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            if(sparam == PANEL_PREFIX + "EditMaxBuy") {
                string value = ObjectGetString(0, sparam, OBJPROP_TEXT);
                int newMax = (int)StringToInteger(value);
                if(newMax > 0 && newMax <= 100) {
                    g_MaxOrdersBuy = newMax;
                    Print("–ú–∞–∫—Å Buy –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ", g_MaxOrdersBuy);
                    SaveSettings();
                } else {
                    ObjectSetString(0, sparam, OBJPROP_TEXT, IntegerToString(g_MaxOrdersBuy));
                    Print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å Buy: ", value);
                }
            }
            else if(sparam == PANEL_PREFIX + "EditMaxSell") {
                string value = ObjectGetString(0, sparam, OBJPROP_TEXT);
                int newMax = (int)StringToInteger(value);
                if(newMax > 0 && newMax <= 100) {
                    g_MaxOrdersSell = newMax;
                    Print("–ú–∞–∫—Å Sell –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ", g_MaxOrdersSell);
                    SaveSettings();
                } else {
                    ObjectSetString(0, sparam, OBJPROP_TEXT, IntegerToString(g_MaxOrdersSell));
                    Print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å Sell: ", value);
                }
            }
            else if(sparam == PANEL_PREFIX + "EditProfit") {
                string value = ObjectGetString(0, sparam, OBJPROP_TEXT);
                double newProfit = StringToDouble(value);
                if(newProfit > 0 && newProfit <= 10) {
                    g_BasketProfitPercent = newProfit;
                    Print("–ü—Ä–æ—Ñ–∏—Ç % –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ", g_BasketProfitPercent);
                    SaveSettings();
                } else {
                    ObjectSetString(0, sparam, OBJPROP_TEXT, DoubleToString(g_BasketProfitPercent, 2));
                    Print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞: ", value);
                }
            }
            else if(sparam == PANEL_PREFIX + "EditBasketN") {
                string value = ObjectGetString(0, sparam, OBJPROP_TEXT);
                int newN = (int)StringToInteger(value);
                if(newN > 0 && newN <= 20) {
                    g_BasketAfterN = newN;
                    Print("–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Å–ª–µ N –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ", g_BasketAfterN);
                    SaveSettings();
                } else {
                    ObjectSetString(0, sparam, OBJPROP_TEXT, IntegerToString(g_BasketAfterN));
                    Print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ N: ", value);
                }
            }
            ChartRedraw();
            return;
        }
    }
    
    //--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–Ω–µ–ª–∏
    if(id == CHARTEVENT_OBJECT_CLICK) {
        if(StringFind(sparam, PANEL_PREFIX) == 0) {
            HandleButtonClick(sparam);
            ChartRedraw();
            return;
        }
    }
    
    //--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
    if(id == CHARTEVENT_MOUSE_MOVE) {
        int mouseX = (int)lparam;
        int mouseY = (int)dparam;
        int mouseState = (int)StringToInteger(sparam);
        
        if(g_ButtonClicked) {
            g_PanelDragging = false;
            return;
        }
        
        bool mouseOverButton = false;
        for(int i = 0; i < ObjectsTotal(); i++) {
            string objName = ObjectName(i);
            if(StringFind(objName, PANEL_PREFIX + "Btn") == 0 || 
               StringFind(objName, PANEL_PREFIX + "Edit") == 0) {
                int objX = (int)ObjectGetInteger(0, objName, OBJPROP_XDISTANCE);
                int objY = (int)ObjectGetInteger(0, objName, OBJPROP_YDISTANCE);
                int objWidth = (int)ObjectGetInteger(0, objName, OBJPROP_XSIZE);
                int objHeight = (int)ObjectGetInteger(0, objName, OBJPROP_YSIZE);
                
                if(mouseX >= objX && mouseX <= objX + objWidth &&
                   mouseY >= objY && mouseY <= objY + objHeight) {
                    mouseOverButton = true;
                    break;
                }
            }
        }
        
        if((mouseState & 1) != 0) {
            if(!g_PanelDragging) {
                if(IsMouseOverPanel(mouseX, mouseY) && !mouseOverButton) {
                    g_PanelDragging = true;
                    g_DragOffsetX = mouseX - g_PanelPosX;
                    g_DragOffsetY = mouseY - g_PanelPosY;
                }
            } else {
                int newX = mouseX - g_DragOffsetX;
                int newY = mouseY - g_DragOffsetY;
                
                newX = MathMax(0, newX);
                newY = MathMax(0, newY);
                
                MovePanel(newX, newY);
            }
        } else {
            g_PanelDragging = false;
        }
    }
}