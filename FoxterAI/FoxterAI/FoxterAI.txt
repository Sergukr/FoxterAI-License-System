//+------------------------------------------------------------------+
//|                                                    FoxterAI.mq4  |
//|                      –¢–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç —Å ATR-—Ç—Ä–µ–Ω–¥–æ–º –≤–µ—Ä—Å–∏—è 2.0    |
//|                           –° –õ–û–ö–ê–õ–¨–ù–´–ú –•–†–ê–ù–ï–ù–ò–ï–ú –ë–ï–ó GLOBAL      |
//+------------------------------------------------------------------+
#property copyright "FoxterX"
#property version   "2.00"
#property strict

//--- –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
#include "../FoxterAI_modules/1_enums.mqh"
#include "../FoxterAI_modules/2_inputs.mqh"
#include "../FoxterAI_modules/3_globals.mqh"
#include "../FoxterAI_modules/4_series_functions.mqh"
#include "../FoxterAI_modules/5_trend_functions.mqh"
#include "../FoxterAI_modules/6_filter_functions.mqh"
#include "../FoxterAI_modules/7_trading_functions.mqh"
#include "../FoxterAI_modules/8_position_management.mqh"
#include "../FoxterAI_modules/9_panel_create.mqh"
#include "../FoxterAI_modules/10_panel_update.mqh"
#include "../FoxterAI_modules/11_panel_handlers.mqh"
#include "../FoxterAI_modules/12_visualization.mqh"
#include "../FoxterAI_modules/13_license.mqh"
#include "../FoxterAI_modules/14_license_dialog.mqh"
#include "../FoxterAI_modules/15_storage_manager.mqh"

//--- –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
void RecalculateSeriesBalance();
void SendHeartbeatSilent();
void RefreshPanelValues();

//+------------------------------------------------------------------+
//| –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–û–í–ï–¢–ù–ò–ö–ê v2.0                                    |
//+------------------------------------------------------------------+
int OnInit() {
    //--- –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
    if(IsOptimization()) {
        Print("========================================");
        Print("    –†–ï–ñ–ò–ú –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ê–ö–¢–ò–í–ï–ù v2.0");
        Print("========================================");
        
        g_LicenseState = LICENSE_VALID;
        g_LicenseActivated = true;
        g_LicenseMessage = "–†–µ–∂–∏–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏";
        
        g_BotEnabled = EnableTrading;
        g_TradeDirection = TradeDirection;
        g_UseImpulse = UseImpulse;
        g_FirstLot = FirstLot;
        g_MaxOrdersBuy = MaxOrdersBuy;
        g_MaxOrdersSell = MaxOrdersSell;
        g_MartinCoeff = MartinCoeff;
        g_BasketProfitPercent = BasketProfitPercent;
        g_GridStepPercent = Grid_StepPercent;
        g_BasketType = BasketType;
        g_BasketAfterN = BasketAfterNOrders;
        g_IncludeCommissionSwap = IncludeCommissionSwap;
        g_EstimatedCommissionPerLot = EstimatedCommissionPerLot;
        g_SlippagePercent = SlippagePercent;
        
        if(g_FirstLot < MarketInfo(Symbol(), MODE_MINLOT)) {
            Print("–û–®–ò–ë–ö–ê: –ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ!");
            return(INIT_PARAMETERS_INCORRECT);
        }
        
        ResetSeriesInfo(g_BuySeries);
        ResetSeriesInfo(g_SellSeries);
        DetectInitialTrend();
        
        return(INIT_SUCCEEDED);
    }
    
    //--- –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú (–ù–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø)
    Print("========================================");
    Print("    –ó–ê–ü–£–°–ö FOXTERAI v2.0");
    Print("========================================");
    Print("–°—á–µ—Ç: ", AccountNumber());
    Print("–ë—Ä–æ–∫–µ—Ä: ", AccountCompany());
    Print("–ë–∞–ª–∞–Ω—Å: ", AccountBalance());
    Print("–°–∏–º–≤–æ–ª: ", Symbol());
    Print("========================================");
    
    //--- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –•–†–ê–ù–ï–ù–ò–Ø
    InitializeStorage();
    
    //--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–µ—Ä–∞
    if(IsTesting() || IsVisualMode()) {
        Print("üîß –†–ï–ñ–ò–ú –¢–ï–°–¢–ï–†–ê –°–¢–†–ê–¢–ï–ì–ò–ô –ê–ö–¢–ò–í–ï–ù");
        g_LicenseState = LICENSE_VALID;
        g_LicenseActivated = true;
        g_LicenseMessage = "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º";
    }
    else {
        //--- –†–ï–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        ChartSetInteger(0, CHART_EVENT_MOUSE_MOVE, true);
        ChartSetInteger(0, CHART_EVENT_OBJECT_CREATE, true);
        ChartSetInteger(0, CHART_EVENT_OBJECT_DELETE, true);
        
        string licenseKey = GetLicenseKeyLocal();
        
        if(StringLen(licenseKey) == 0) {
            Print("‚ùó –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω");
            ShowLicenseDialog();
            g_BotEnabled = false;
            return(INIT_SUCCEEDED);
        }
        
        Print("‚úì –ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–ª—é—á");
        if(!InitializeLicense(licenseKey)) {
            Print("‚ùå –û–®–ò–ë–ö–ê: ", g_LicenseMessage);
            Alert("–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!\n\n", g_LicenseMessage);
            ClearAllLicenseData();
            ShowLicenseDialog();
            g_BotEnabled = false;
            return(INIT_SUCCEEDED);
        }
        
        Print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞");
    }
    
    //--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    g_BotEnabled = EnableTrading;
    g_TradeDirection = TradeDirection;
    g_UseImpulse = UseImpulse;
    g_FirstLot = FirstLot;
    g_MaxOrdersBuy = MaxOrdersBuy;
    g_MaxOrdersSell = MaxOrdersSell;
    g_MartinCoeff = MartinCoeff;
    g_BasketProfitPercent = BasketProfitPercent;
    g_GridStepPercent = Grid_StepPercent;
    g_BasketType = BasketType;
    g_BasketAfterN = BasketAfterNOrders;
    g_IncludeCommissionSwap = IncludeCommissionSwap;
    g_EstimatedCommissionPerLot = EstimatedCommissionPerLot;
    g_SlippagePercent = SlippagePercent;
    g_PanelPosX = PanelX;
    g_PanelPosY = PanelY;
    
    if(g_FirstLot < MarketInfo(Symbol(), MODE_MINLOT)) {
        Alert("–ù–∞—á–∞–ª—å–Ω—ã–π –ª–æ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ!");
        return(INIT_PARAMETERS_INCORRECT);
    }
    
    ResetSeriesInfo(g_BuySeries);
    ResetSeriesInfo(g_SellSeries);
    
    //--- –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if(!IsTesting() && !IsOptimization()) {
        bool hasOrders = HasOurOrders();
        
        // –ü–†–û–ë–õ–ï–ú–ê 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if(g_WasParametersChange) {
            Print("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ F7");
            Print("üìù –ü—Ä–∏–º–µ–Ω—è–µ–º –ù–û–í–´–ï –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å");
            
            // –í–ê–ñ–ù–û: –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã—à–µ
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
            SavePanelSettings();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            g_WasParametersChange = false;
            
            Print("‚úÖ –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:");
            Print("   MaxOrdersBuy: ", g_MaxOrdersBuy);
            Print("   MaxOrdersSell: ", g_MaxOrdersSell);
            Print("   BasketProfitPercent: ", g_BasketProfitPercent);
            Print("   TradeDirection: ", g_TradeDirection);
            
            // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –æ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ g_ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        }
        else if(hasOrders) {
            Print("üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ - —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è");
            if(LoadPanelSettings()) {
                Print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞");
                // –ü–†–û–ë–õ–ï–ú–ê 3: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º balanceAtStart –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–∏–π
                RecalculateSeriesBalance();
            } else {
                Print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞–º–∏");
                g_BotEnabled = true;
                // –ü–†–û–ë–õ–ï–ú–ê 3: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π
                if(g_BuySeries.active) g_BuySeries.balanceAtStart = AccountBalance();
                if(g_SellSeries.active) g_SellSeries.balanceAtStart = AccountBalance();
            }
        } else {
            if(LoadPanelSettings()) {
                Print("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ", Symbol());
            } else {
                Print("üìÅ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞ –ø–∞—Ä–µ ", Symbol());
                g_BotEnabled = EnableTrading;
                // –ü–†–û–ë–õ–ï–ú–ê 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                SavePanelSettings();
            }
        }
        
        LoadRobotState();
    }
    
    DetectInitialTrend();
    
    if(ShowPanel && !IsOptimization()) {
        Print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è v2.0...");
        CreateInteractivePanel();
        
        // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if(g_WasParametersChange) {
            RefreshPanelValues();
        }
        
        if(!IsTestMode()) {
            ChartSetInteger(0, CHART_EVENT_MOUSE_MOVE, true);
        }
    }
    
    Print("========================================");
    Print("‚úÖ –°–û–í–ï–¢–ù–ò–ö v2.0 –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï");
    Print("–†–æ–±–æ—Ç: ", g_BotEnabled ? "–í–ö–õ–Æ–ß–ï–ù" : "–í–´–ö–õ–Æ–ß–ï–ù");
    Print("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ", g_TradeDirection == TRADE_BOTH ? "BOTH" : 
          (g_TradeDirection == TRADE_BUY_ONLY ? "BUY ONLY" : "SELL ONLY"));
    Print("========================================");
    
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| –î–ï–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø v2.0                                           |
//+------------------------------------------------------------------+
void OnDeinit(const int reason) {
    if(IsOptimization()) {
        return;
    }
    
    // –ü–†–û–ë–õ–ï–ú–ê 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ F7
    if(reason == REASON_PARAMETERS) {
        Print("üîÑ –î–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –≤ —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è
        SaveParametersChangeFlag();
        // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –æ–± –∞–≤–∞—Ä–∏–π–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ
        DeletePanel();
        if(g_LicenseDialogOpen) {
            CloseLicenseDialog();
        }
        DeleteVisualObjects();
        return;
    }
    
    // –û–±—ã—á–Ω–∞—è –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if(!IsTestMode() && !IsOptimization()) {
        if(!g_IsCleanShutdown) {
            SaveRobotState();
            SavePanelSettings();
            Print("üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ");
        }
    }
    
    DeletePanel();
    if(g_LicenseDialogOpen) {
        CloseLicenseDialog();
    }
    DeleteVisualObjects();
    
    string reasonText = "";
    switch(reason) {
        case REASON_PROGRAM:     reasonText = "–°–æ–≤–µ—Ç–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; break;
        case REASON_REMOVE:      reasonText = "–°–æ–≤–µ—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω —Å –≥—Ä–∞—Ñ–∏–∫–∞"; break;
        case REASON_RECOMPILE:   reasonText = "–ü–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—è"; break;
        case REASON_CHARTCHANGE: reasonText = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∞"; break;
        case REASON_CHARTCLOSE:  reasonText = "–ì—Ä–∞—Ñ–∏–∫ –∑–∞–∫—Ä—ã—Ç"; break;
        case REASON_PARAMETERS:  reasonText = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"; break;
        case REASON_ACCOUNT:     reasonText = "–°–º–µ–Ω–∞ —Å—á–µ—Ç–∞"; break;
        default:                 reasonText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞";
    }
    
    if(!IsOptimization()) {
        Print("========================================");
        Print("–°–û–í–ï–¢–ù–ò–ö v2.0 –û–°–¢–ê–ù–û–í–õ–ï–ù");
        Print("–ü—Ä–∏—á–∏–Ω–∞: ", reasonText);
        Print("========================================");
    }
}

//+------------------------------------------------------------------+
//| –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ò–ö–ê v2.0                                      |
//+------------------------------------------------------------------+
void OnTick() {
    if(IsOptimization()) {
        if(!g_BotEnabled) return;
        
        UpdateSeriesInfo();
        UpdateStatistics();
        
        if(g_UseImpulse) {
            static datetime lastTrendBar = 0;
            datetime currentTrendBar = iTime(Symbol(), TrendTimeframe, 0);
            if(lastTrendBar != currentTrendBar) {
                lastTrendBar = currentTrendBar;
                UpdateTrend();
            }
            
            static datetime lastImpulseBar = 0;
            datetime currentImpulseBar = iTime(Symbol(), ImpulseTimeframe, 0);
            if(lastImpulseBar != currentImpulseBar) {
                lastImpulseBar = currentImpulseBar;
                CheckImpulseSignal();
            }
        } else {
            static datetime lastTrendBarNoImpulse = 0;
            datetime currentTrendBarNoImpulse = iTime(Symbol(), TrendTimeframe, 0);
            if(lastTrendBarNoImpulse != currentTrendBarNoImpulse) {
                lastTrendBarNoImpulse = currentTrendBarNoImpulse;
                UpdateTrend();
            }
            CheckEntryWithoutImpulse();
        }
        
        ManagePositions();
        return;
    }
    
    //--- –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú
    if(!IsTestMode()) {
        PeriodicStateSave();
    }
    
    if(!IsTestMode()) {
        if(g_LicenseDialogOpen) return;
        
        // –ü–†–û–ë–õ–ï–ú–ê 4: –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        static datetime lastLicenseCheck = 0;
        if(TimeCurrent() - lastLicenseCheck > 86400) {
            lastLicenseCheck = TimeCurrent();
            
            if(!CheckLicense()) {
                g_BotEnabled = false;
                
                if(g_LicenseState == LICENSE_INVALID && 
                   (StringFind(g_LicenseMessage, "—É–¥–∞–ª–µ–Ω") >= 0 || 
                    StringFind(g_LicenseMessage, "–Ω–µ –Ω–∞–π–¥–µ–Ω") >= 0)) {
                    Alert("–õ–∏—Ü–µ–Ω–∑–∏—è —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á.");
                    ClearAllLicenseData();
                    ShowLicenseDialog();
                } else {
                    Alert("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!\n" + g_LicenseMessage);
                }
            }
        }
        
        // –ü–†–û–ë–õ–ï–ú–ê 4: SendHeartbeat() —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–ª—á–∞
        static datetime lastHeartbeat = 0;
        if(TimeCurrent() - lastHeartbeat > 43200) {
            lastHeartbeat = TimeCurrent();
            if(IsLicenseValidForTrading()) {
                SendHeartbeatSilent();  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏—Ö—É—é –≤–µ—Ä—Å–∏—é
            }
        }
    }
    
    g_ButtonClicked = false;
    
    if(!g_BotEnabled || !IsLicenseValidForTrading()) {
        if(ShowPanel) UpdateInteractivePanel();
        if(!IsLicenseValidForTrading() && (g_BuySeries.active || g_SellSeries.active)) {
            ManagePositions();
        }
        return;
    }
    
    UpdateSeriesInfo();
    UpdateStatistics();
    
    if(g_UseImpulse) {
        static datetime lastTrendBar = 0;
        datetime currentTrendBar = iTime(Symbol(), TrendTimeframe, 0);
        if(lastTrendBar != currentTrendBar) {
            lastTrendBar = currentTrendBar;
            UpdateTrend();
        }
        
        static datetime lastImpulseBar = 0;
        datetime currentImpulseBar = iTime(Symbol(), ImpulseTimeframe, 0);
        if(lastImpulseBar != currentImpulseBar) {
            lastImpulseBar = currentImpulseBar;
            CheckImpulseSignal();
        }
    } else {
        static datetime lastTrendBarNoImpulse = 0;
        datetime currentTrendBarNoImpulse = iTime(Symbol(), TrendTimeframe, 0);
        if(lastTrendBarNoImpulse != currentTrendBarNoImpulse) {
            lastTrendBarNoImpulse = currentTrendBarNoImpulse;
            UpdateTrend();
        }
        CheckEntryWithoutImpulse();
    }
    
    ManagePositions();
    
    if(ShowVisualObjects && ShowTPLevels) {
        DrawTPLevels();
    }
    
    if(ShowPanel) {
        UpdateInteractivePanel();
    }
}

//+------------------------------------------------------------------+
//| –ü–†–û–í–ï–†–ö–ê –í–•–û–î–ê –ë–ï–ó –ò–ú–ü–£–õ–¨–°–ê                                     |
//+------------------------------------------------------------------+
void CheckEntryWithoutImpulse() {
    bool canBuy = (g_TradeDirection == TRADE_BOTH || g_TradeDirection == TRADE_BUY_ONLY);
    bool canSell = (g_TradeDirection == TRADE_BOTH || g_TradeDirection == TRADE_SELL_ONLY);
    
    // –ü–†–û–ë–õ–ï–ú–ê 4: –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –≤—ã–≤–æ–¥—ã
    if(g_TrendState == TREND_BUY && canBuy) {
        if(!HasActiveOrders(OP_BUY)) {
            if(CheckFilters()) {
                OpenPosition(OP_BUY);
            }
        }
    }
    
    if(g_TrendState == TREND_SELL && canSell) {
        if(!HasActiveOrders(OP_SELL)) {
            if(CheckFilters()) {
                OpenPosition(OP_SELL);
            }
        }
    }
}

//+------------------------------------------------------------------+
//| –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô –ì–†–ê–§–ò–ö–ê v2.0                                  |
//+------------------------------------------------------------------+
void OnChartEvent(const int id, const long &lparam, const double &dparam, const string &sparam) {
    if(IsOptimization()) return;
    if(IsTestMode()) return;
    
    if(g_LicenseDialogOpen) {
        if(id == CHARTEVENT_OBJECT_CLICK) {
            if(HandleLicenseDialogClick(sparam) == true) {
                if(StringLen(g_EnteredLicenseKey) > 0) {
                    Print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞...");
                    
                    if(InitializeLicense(g_EnteredLicenseKey)) {
                        Print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
                        Alert("–õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n–°–æ–≤–µ—Ç–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.");
                        
                        SaveLicenseKeyLocal(g_EnteredLicenseKey);
                        g_BotEnabled = EnableTrading;
                        g_TradeDirection = TradeDirection;
                        
                        // –ü–†–û–ë–õ–ï–ú–ê 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                        SavePanelSettings();
                        
                        DetectInitialTrend();
                        if(ShowPanel) {
                            CreateInteractivePanel();
                        }
                    } else {
                        Alert("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏:\n\n" + g_LicenseMessage);
                        ShowLicenseDialog();
                    }
                }
                return;
            }
        }
        return;
    }
    
    // –ü–†–û–ë–õ–ï–ú–ê 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ—Ñ–∏—Ç–∞
    if(id == CHARTEVENT_OBJECT_ENDEDIT) {
        if(StringFind(sparam, PANEL_PREFIX + "Edit") == 0) {
            if(sparam == PANEL_PREFIX + "EditProfit") {
                string value = ObjectGetString(0, sparam, OBJPROP_TEXT);
                double newProfit = StringToDouble(value);
                if(newProfit > 0 && newProfit <= 10) {
                    g_BasketProfitPercent = newProfit;
                    Print("–ü—Ä–æ—Ñ–∏—Ç % –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ", g_BasketProfitPercent);
                    SavePanelSettings();
                    
                    // –ü–†–û–ë–õ–ï–ú–ê 2: –û–±–Ω–æ–≤–ª—è–µ–º TP –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–∏–π
                    if(g_BuySeries.active || g_SellSeries.active) {
                        UpdateCombinedPhysicalTP();
                    }
                } else {
                    ObjectSetString(0, sparam, OBJPROP_TEXT, DoubleToString(g_BasketProfitPercent, 2));
                    Print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞: ", value);
                }
            }
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞...
            else if(sparam == PANEL_PREFIX + "EditMaxBuy") {
                string value = ObjectGetString(0, sparam, OBJPROP_TEXT);
                int newMax = (int)StringToInteger(value);
                if(newMax > 0 && newMax <= 100) {
                    g_MaxOrdersBuy = newMax;
                    Print("–ú–∞–∫—Å Buy –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ", g_MaxOrdersBuy);
                    SavePanelSettings();
                } else {
                    ObjectSetString(0, sparam, OBJPROP_TEXT, IntegerToString(g_MaxOrdersBuy));
                }
            }
            else if(sparam == PANEL_PREFIX + "EditMaxSell") {
                string value = ObjectGetString(0, sparam, OBJPROP_TEXT);
                int newMax = (int)StringToInteger(value);
                if(newMax > 0 && newMax <= 100) {
                    g_MaxOrdersSell = newMax;
                    Print("–ú–∞–∫—Å Sell –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ", g_MaxOrdersSell);
                    SavePanelSettings();
                } else {
                    ObjectSetString(0, sparam, OBJPROP_TEXT, IntegerToString(g_MaxOrdersSell));
                }
            }
            else if(sparam == PANEL_PREFIX + "EditBasketN") {
                string value = ObjectGetString(0, sparam, OBJPROP_TEXT);
                int newN = (int)StringToInteger(value);
                if(newN > 0 && newN <= 20) {
                    g_BasketAfterN = newN;
                    Print("–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Å–ª–µ N –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ", g_BasketAfterN);
                    SavePanelSettings();
                } else {
                    ObjectSetString(0, sparam, OBJPROP_TEXT, IntegerToString(g_BasketAfterN));
                }
            }
            ChartRedraw();
            return;
        }
    }
    
    if(id == CHARTEVENT_OBJECT_CLICK) {
        if(StringFind(sparam, PANEL_PREFIX) == 0) {
            HandleButtonClick(sparam);
            ChartRedraw();
            return;
        }
    }
    
    if(id == CHARTEVENT_MOUSE_MOVE) {
        int mouseX = (int)lparam;
        int mouseY = (int)dparam;
        int mouseState = (int)StringToInteger(sparam);
        
        if(g_ButtonClicked) {
            g_PanelDragging = false;
            return;
        }
        
        bool mouseOverButton = false;
        for(int i = 0; i < ObjectsTotal(); i++) {
            string objName = ObjectName(i);
            if(StringFind(objName, PANEL_PREFIX + "Btn") == 0 || 
               StringFind(objName, PANEL_PREFIX + "Edit") == 0) {
                int objX = (int)ObjectGetInteger(0, objName, OBJPROP_XDISTANCE);
                int objY = (int)ObjectGetInteger(0, objName, OBJPROP_YDISTANCE);
                int objWidth = (int)ObjectGetInteger(0, objName, OBJPROP_XSIZE);
                int objHeight = (int)ObjectGetInteger(0, objName, OBJPROP_YSIZE);
                
                if(mouseX >= objX && mouseX <= objX + objWidth &&
                   mouseY >= objY && mouseY <= objY + objHeight) {
                    mouseOverButton = true;
                    break;
                }
            }
        }
        
        if((mouseState & 1) != 0) {
            if(!g_PanelDragging) {
                if(IsMouseOverPanel(mouseX, mouseY) && !mouseOverButton) {
                    g_PanelDragging = true;
                    g_DragOffsetX = mouseX - g_PanelPosX;
                    g_DragOffsetY = mouseY - g_PanelPosY;
                }
            } else {
                int newX = mouseX - g_DragOffsetX;
                int newY = mouseY - g_DragOffsetY;
                
                newX = MathMax(0, newX);
                newY = MathMax(0, newY);
                
                MovePanel(newX, newY);
                SavePanelSettings();
            }
        } else {
            g_PanelDragging = false;
        }
    }
}

//+------------------------------------------------------------------+
//| –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ—Å—á–µ—Ç balanceAtStart –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–∏–π       |
//+------------------------------------------------------------------+
void RecalculateSeriesBalance() {
    double currentBalance = AccountBalance();
    
    // –ü–†–û–ë–õ–ï–ú–ê 3: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º balanceAtStart
    if(g_BuySeries.active && g_BuySeries.count > 0) {
        if(g_BuySeries.balanceAtStart <= 0) {
            g_BuySeries.balanceAtStart = currentBalance;
            Print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω balanceAtStart –¥–ª—è BUY —Å–µ—Ä–∏–∏: ", g_BuySeries.balanceAtStart);
        }
    }
    
    if(g_SellSeries.active && g_SellSeries.count > 0) {
        if(g_SellSeries.balanceAtStart <= 0) {
            g_SellSeries.balanceAtStart = currentBalance;
            Print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω balanceAtStart –¥–ª—è SELL —Å–µ—Ä–∏–∏: ", g_SellSeries.balanceAtStart);
        }
    }
}

//+------------------------------------------------------------------+
//| –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –¢–∏—Ö–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ heartbeat                         |
//+------------------------------------------------------------------+
void SendHeartbeatSilent() {
    // –ü–†–û–ë–õ–ï–ú–ê 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if(IsTestMode()) return;
    if(g_LicenseState != LICENSE_VALID && !g_LicenseActivated) return;
    
    string accountType = GetAccountType();
    double balance = AccountBalance();
    double equity = AccountEquity();
    double profit = equity - balance;
    
    string postData = "{";
    postData = postData + "\"key\":\"" + g_LicenseKey + "\",";
    postData = postData + "\"account\":\"" + IntegerToString(AccountNumber()) + "\",";
    postData = postData + "\"broker\":\"" + AccountCompany() + "\",";
    postData = postData + "\"robot_name\":\"" + ROBOT_NAME + "\",";
    postData = postData + "\"version\":\"" + ROBOT_VERSION + "\",";
    postData = postData + "\"balance\":" + DoubleToString(balance, 2) + ",";
    postData = postData + "\"equity\":" + DoubleToString(equity, 2) + ",";
    postData = postData + "\"profit\":" + DoubleToString(profit, 2) + ",";
    postData = postData + "\"account_type\":\"" + accountType + "\",";
    postData = postData + "\"robot_state\":\"" + (g_BotEnabled ? "active" : "paused") + "\",";
    postData = postData + "\"open_buy\":" + IntegerToString(g_BuySeries.count) + ",";
    postData = postData + "\"open_sell\":" + IntegerToString(g_SellSeries.count);
    postData = postData + "}";
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–ª—á–∞
    SendHTTPRequest("/heartbeat", postData);
}

//+------------------------------------------------------------------+
//| –û–ë–ù–û–í–ò–¢–¨ –ó–ù–ê–ß–ï–ù–ò–Ø –ù–ê –ü–ê–ù–ï–õ–ò –ü–û–°–õ–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í         |
//+------------------------------------------------------------------+
void RefreshPanelValues() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    ObjectSetString(0, PANEL_PREFIX + "EditMaxBuy", OBJPROP_TEXT, IntegerToString(g_MaxOrdersBuy));
    ObjectSetString(0, PANEL_PREFIX + "EditMaxSell", OBJPROP_TEXT, IntegerToString(g_MaxOrdersSell));
    ObjectSetString(0, PANEL_PREFIX + "EditProfit", OBJPROP_TEXT, DoubleToString(g_BasketProfitPercent, 2));
    ObjectSetString(0, PANEL_PREFIX + "EditBasketN", OBJPROP_TEXT, IntegerToString(g_BasketAfterN));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    if(g_TradeDirection == TRADE_BUY_ONLY) {
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBuy", OBJPROP_BGCOLOR, C'46,125,50');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnSell", OBJPROP_BGCOLOR, C'66,66,66');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBoth", OBJPROP_BGCOLOR, C'66,66,66');
    }
    else if(g_TradeDirection == TRADE_SELL_ONLY) {
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBuy", OBJPROP_BGCOLOR, C'66,66,66');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnSell", OBJPROP_BGCOLOR, C'198,40,40');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBoth", OBJPROP_BGCOLOR, C'66,66,66');
    }
    else if(g_TradeDirection == TRADE_BOTH) {
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBuy", OBJPROP_BGCOLOR, C'66,66,66');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnSell", OBJPROP_BGCOLOR, C'66,66,66');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBoth", OBJPROP_BGCOLOR, C'33,150,243');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ —Ç–∏–ø–∞ –∫–æ—Ä–∑–∏–Ω—ã
    if(g_BasketType == BASKET_NONE) {
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBasketNone", OBJPROP_BGCOLOR, C'46,125,50');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBasketImm", OBJPROP_BGCOLOR, C'66,66,66');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBasketAfter", OBJPROP_BGCOLOR, C'66,66,66');
    }
    else if(g_BasketType == BASKET_IMMEDIATE) {
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBasketNone", OBJPROP_BGCOLOR, C'66,66,66');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBasketImm", OBJPROP_BGCOLOR, C'46,125,50');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBasketAfter", OBJPROP_BGCOLOR, C'66,66,66');
    }
    else if(g_BasketType == BASKET_AFTER_N) {
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBasketNone", OBJPROP_BGCOLOR, C'66,66,66');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBasketImm", OBJPROP_BGCOLOR, C'66,66,66');
        ObjectSetInteger(0, PANEL_PREFIX + "BtnBasketAfter", OBJPROP_BGCOLOR, C'46,125,50');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Start/Stop
    ObjectSetString(0, PANEL_PREFIX + "BtnStartStop", OBJPROP_TEXT, 
                   g_BotEnabled ? "STOP" : "START");
    ObjectSetInteger(0, PANEL_PREFIX + "BtnStartStop", OBJPROP_BGCOLOR, 
                    g_BotEnabled ? C'198,40,40' : C'46,125,50');
    
    Print("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–∞–Ω–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏");
    ChartRedraw();
}